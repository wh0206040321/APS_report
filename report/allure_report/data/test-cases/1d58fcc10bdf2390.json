{"uid":"1d58fcc10bdf2390","name":"test_setting_layoutlist_updatefail","fullName":"Tests.test_item.test_setting.TestSettingPage#test_setting_layoutlist_updatefail","historyId":"6d897055f5e7b0262ba847c8c8194be5","time":{"start":1752735762446,"stop":1752735777428,"duration":14982},"status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n\tGetHandleVerifier [0x0x7ff636af6f65+78965]\n\tGetHandleVerifier [0x0x7ff636af6fc0+79056]\n\t(No symbol) [0x0x7ff636889dda]\n\t(No symbol) [0x0x7ff6368e02ea]\n\t(No symbol) [0x0x7ff6368e059c]\n\t(No symbol) [0x0x7ff636933f37]\n\t(No symbol) [0x0x7ff6369086af]\n\t(No symbol) [0x0x7ff636930dbe]\n\t(No symbol) [0x0x7ff636908443]\n\t(No symbol) [0x0x7ff6368d1311]\n\t(No symbol) [0x0x7ff6368d20a3]\n\tGetHandleVerifier [0x0x7ff636dae26d+2926461]\n\tGetHandleVerifier [0x0x7ff636da8993+2903715]\n\tGetHandleVerifier [0x0x7ff636dc6aed+3026941]\n\tGetHandleVerifier [0x0x7ff636b116fe+187406]\n\tGetHandleVerifier [0x0x7ff636b196ef+220159]\n\tGetHandleVerifier [0x0x7ff636affaf4+114692]\n\tGetHandleVerifier [0x0x7ff636affca9+115129]\n\tGetHandleVerifier [0x0x7ff636ae64d8+10728]\n\tBaseThreadInitThunk [0x0x7ffcaf5c7374+20]\n\tRtlUserThreadStart [0x0x7ffcb055cc91+33]","statusTrace":"self = <test_item.test_setting.TestSettingPage object at 0x0000025311D30190>\nlogin_to_setting = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"3e413c7d6c2193307d517779c18b2080\")>\n\n    @allure.story(\"重复修改布局 不允许修改\")\n    # @pytest.mark.run(order=1)\n    def test_setting_layoutlist_updatefail(self, login_to_setting):\n        driver = login_to_setting  # WebDriver 实例\n        setting = SettingPage(driver)  # 用 driver 初始化 SettingPage\n        layout = \"修改布局\"\n        sleep(2)\n        setting.click_button('//i[@id=\"tabsDrawerIcon\"]')\n        sleep(1)\n        setting.click_button(f'//span[./span[text()=\"{layout}\"]]/following-sibling::i[2]')\n    \n        # 获取目标 div 元素，这里的目标是具有特定文本的 div\n        target_div = setting.get_find_element_xpath(\n            f'//div[@id=\"container\"]/div[.//text()=\"{layout}\"]'\n        )\n    \n        # 获取父容器下所有 div\n        # 这一步是为了确定目标 div 在其父容器中的位置\n        parent_div = setting.get_find_element_xpath(f'//div[@id=\"container\"]')\n        all_children = parent_div.find_elements(By.XPATH, \"./div\")\n    \n        # 获取目标 div 的位置索引（从0开始）\n        # 这里是为了后续操作，比如点击目标 div 相关的按钮\n        index = all_children.index(target_div)\n        print(f\"目标 div 是第 {index + 1} 个 div\")  # 输出 3（如果从0开始则是2）\n    \n        setting.click_button(f'(//div[text()=\"重命名\"])[{index + 1}]')\n        ele = setting.get_find_element_xpath(\n            f'//div[@id=\"container\"]/div[.//text()=\"{layout}\"]//input'\n        )\n        ele.send_keys(Keys.CONTROL, 'a')\n        ele.send_keys(Keys.DELETE)\n        setting.enter_texts(f'//div[@id=\"container\"]/div[.//text()=\"{layout}\"]//input', \"测试布局A\")\n    \n        setting.click_button('(//div[@class=\"demo-drawer-footer\"])[2]/button[2]')\n        sleep(1)\n        # 获取设置后的提示信息\n>       message = setting.get_find_message()\n\nTests\\test_item\\test_setting.py:2220: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nPages\\setting_page.py:47: in get_find_message\n    message = WebDriverWait(self.driver, 10).until(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"3e413c7d6c2193307d517779c18b2080\")>\nmethod = <function visibility_of_element_located.<locals>._predicate at 0x0000025311CF68C0>, message = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        -----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x7ff636af6f65+78965]\nE       \tGetHandleVerifier [0x0x7ff636af6fc0+79056]\nE       \t(No symbol) [0x0x7ff636889dda]\nE       \t(No symbol) [0x0x7ff6368e02ea]\nE       \t(No symbol) [0x0x7ff6368e059c]\nE       \t(No symbol) [0x0x7ff636933f37]\nE       \t(No symbol) [0x0x7ff6369086af]\nE       \t(No symbol) [0x0x7ff636930dbe]\nE       \t(No symbol) [0x0x7ff636908443]\nE       \t(No symbol) [0x0x7ff6368d1311]\nE       \t(No symbol) [0x0x7ff6368d20a3]\nE       \tGetHandleVerifier [0x0x7ff636dae26d+2926461]\nE       \tGetHandleVerifier [0x0x7ff636da8993+2903715]\nE       \tGetHandleVerifier [0x0x7ff636dc6aed+3026941]\nE       \tGetHandleVerifier [0x0x7ff636b116fe+187406]\nE       \tGetHandleVerifier [0x0x7ff636b196ef+220159]\nE       \tGetHandleVerifier [0x0x7ff636affaf4+114692]\nE       \tGetHandleVerifier [0x0x7ff636affca9+115129]\nE       \tGetHandleVerifier [0x0x7ff636ae64d8+10728]\nE       \tBaseThreadInitThunk [0x0x7ffcaf5c7374+20]\nE       \tRtlUserThreadStart [0x0x7ffcb055cc91+33]\n\nmyenv\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:138: TimeoutException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":1,"retriesStatusChange":false,"beforeStages":[{"name":"login_to_setting","time":{"start":1752735754395,"stop":1752735762445,"duration":8050},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n\tGetHandleVerifier [0x0x7ff636af6f65+78965]\n\tGetHandleVerifier [0x0x7ff636af6fc0+79056]\n\t(No symbol) [0x0x7ff636889dda]\n\t(No symbol) [0x0x7ff6368e02ea]\n\t(No symbol) [0x0x7ff6368e059c]\n\t(No symbol) [0x0x7ff636933f37]\n\t(No symbol) [0x0x7ff6369086af]\n\t(No symbol) [0x0x7ff636930dbe]\n\t(No symbol) [0x0x7ff636908443]\n\t(No symbol) [0x0x7ff6368d1311]\n\t(No symbol) [0x0x7ff6368d20a3]\n\tGetHandleVerifier [0x0x7ff636dae26d+2926461]\n\tGetHandleVerifier [0x0x7ff636da8993+2903715]\n\tGetHandleVerifier [0x0x7ff636dc6aed+3026941]\n\tGetHandleVerifier [0x0x7ff636b116fe+187406]\n\tGetHandleVerifier [0x0x7ff636b196ef+220159]\n\tGetHandleVerifier [0x0x7ff636affaf4+114692]\n\tGetHandleVerifier [0x0x7ff636affca9+115129]\n\tGetHandleVerifier [0x0x7ff636ae64d8+10728]\n\tBaseThreadInitThunk [0x0x7ffcaf5c7374+20]\n\tRtlUserThreadStart [0x0x7ffcb055cc91+33]","statusTrace":"self = <test_item.test_setting.TestSettingPage object at 0x0000025311D30190>\nlogin_to_setting = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"3e413c7d6c2193307d517779c18b2080\")>\n\n    @allure.story(\"重复修改布局 不允许修改\")\n    # @pytest.mark.run(order=1)\n    def test_setting_layoutlist_updatefail(self, login_to_setting):\n        driver = login_to_setting  # WebDriver 实例\n        setting = SettingPage(driver)  # 用 driver 初始化 SettingPage\n        layout = \"修改布局\"\n        sleep(2)\n        setting.click_button('//i[@id=\"tabsDrawerIcon\"]')\n        sleep(1)\n        setting.click_button(f'//span[./span[text()=\"{layout}\"]]/following-sibling::i[2]')\n    \n        # 获取目标 div 元素，这里的目标是具有特定文本的 div\n        target_div = setting.get_find_element_xpath(\n            f'//div[@id=\"container\"]/div[.//text()=\"{layout}\"]'\n        )\n    \n        # 获取父容器下所有 div\n        # 这一步是为了确定目标 div 在其父容器中的位置\n        parent_div = setting.get_find_element_xpath(f'//div[@id=\"container\"]')\n        all_children = parent_div.find_elements(By.XPATH, \"./div\")\n    \n        # 获取目标 div 的位置索引（从0开始）\n        # 这里是为了后续操作，比如点击目标 div 相关的按钮\n        index = all_children.index(target_div)\n        print(f\"目标 div 是第 {index + 1} 个 div\")  # 输出 3（如果从0开始则是2）\n    \n        setting.click_button(f'(//div[text()=\"重命名\"])[{index + 1}]')\n        ele = setting.get_find_element_xpath(\n            f'//div[@id=\"container\"]/div[.//text()=\"{layout}\"]//input'\n        )\n        ele.send_keys(Keys.CONTROL, 'a')\n        ele.send_keys(Keys.DELETE)\n        setting.enter_texts(f'//div[@id=\"container\"]/div[.//text()=\"{layout}\"]//input', \"测试布局A\")\n    \n        setting.click_button('(//div[@class=\"demo-drawer-footer\"])[2]/button[2]')\n        sleep(1)\n        # 获取设置后的提示信息\n>       message = setting.get_find_message()\n\nTests\\test_item\\test_setting.py:2220: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nPages\\setting_page.py:47: in get_find_message\n    message = WebDriverWait(self.driver, 10).until(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"3e413c7d6c2193307d517779c18b2080\")>\nmethod = <function visibility_of_element_located.<locals>._predicate at 0x0000025311CF68C0>, message = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        -----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x7ff636af6f65+78965]\nE       \tGetHandleVerifier [0x0x7ff636af6fc0+79056]\nE       \t(No symbol) [0x0x7ff636889dda]\nE       \t(No symbol) [0x0x7ff6368e02ea]\nE       \t(No symbol) [0x0x7ff6368e059c]\nE       \t(No symbol) [0x0x7ff636933f37]\nE       \t(No symbol) [0x0x7ff6369086af]\nE       \t(No symbol) [0x0x7ff636930dbe]\nE       \t(No symbol) [0x0x7ff636908443]\nE       \t(No symbol) [0x0x7ff6368d1311]\nE       \t(No symbol) [0x0x7ff6368d20a3]\nE       \tGetHandleVerifier [0x0x7ff636dae26d+2926461]\nE       \tGetHandleVerifier [0x0x7ff636da8993+2903715]\nE       \tGetHandleVerifier [0x0x7ff636dc6aed+3026941]\nE       \tGetHandleVerifier [0x0x7ff636b116fe+187406]\nE       \tGetHandleVerifier [0x0x7ff636b196ef+220159]\nE       \tGetHandleVerifier [0x0x7ff636affaf4+114692]\nE       \tGetHandleVerifier [0x0x7ff636affca9+115129]\nE       \tGetHandleVerifier [0x0x7ff636ae64d8+10728]\nE       \tBaseThreadInitThunk [0x0x7ffcaf5c7374+20]\nE       \tRtlUserThreadStart [0x0x7ffcb055cc91+33]\n\nmyenv\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:138: TimeoutException","steps":[],"attachments":[{"uid":"f074485adb92bde4","name":"test_setting_layoutlist_updatefail_failure","source":"f074485adb92bde4.png","type":"image/png","size":97831},{"uid":"82d9d58afab5ce7f","name":"test_setting_layoutlist_updatefail_source","source":"82d9d58afab5ce7f.html","type":"text/html","size":1252579},{"uid":"20bef8fa41556dbd","name":"log","source":"20bef8fa41556dbd.txt","type":"text/plain","size":1564}],"parameters":[],"attachmentsCount":3,"shouldDisplayMessage":true,"stepsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"login_to_setting::0","time":{"start":1752735777713,"stop":1752735779831,"duration":2118},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"feature","value":"标准应用设置测试用例"},{"name":"story","value":"重复修改布局 不允许修改"},{"name":"parentSuite","value":"Tests.test_item"},{"name":"suite","value":"test_setting"},{"name":"subSuite","value":"TestSettingPage"},{"name":"host","value":"WIN-20240820MJV"},{"name":"thread","value":"21188-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"Tests.test_item.test_setting"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"7dbe8ec15c6a033e","status":"broken","statusDetails":"selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n\tGetHandleVerifier [0x0x7ff71ab56f65+78965]\n\tGetHandleVerifier [0x0x7ff71ab56fc0+79056]\n\t(No symbol) [0x0x7ff71a8e9dda]\n\t(No symbol) [0x0x7ff71a9402ea]\n\t(No symbol) [0x0x7ff71a94059c]\n\t(No symbol) [0x0x7ff71a993f37]\n\t(No symbol) [0x0x7ff71a9686af]\n\t(No symbol) [0x0x7ff71a990dbe]\n\t(No symbol) [0x0x7ff71a968443]\n\t(No symbol) [0x0x7ff71a931311]\n\t(No symbol) [0x0x7ff71a9320a3]\n\tGetHandleVerifier [0x0x7ff71ae0e26d+2926461]\n\tGetHandleVerifier [0x0x7ff71ae08993+2903715]\n\tGetHandleVerifier [0x0x7ff71ae26aed+3026941]\n\tGetHandleVerifier [0x0x7ff71ab716fe+187406]\n\tGetHandleVerifier [0x0x7ff71ab796ef+220159]\n\tGetHandleVerifier [0x0x7ff71ab5faf4+114692]\n\tGetHandleVerifier [0x0x7ff71ab5fca9+115129]\n\tGetHandleVerifier [0x0x7ff71ab464d8+10728]\n\tBaseThreadInitThunk [0x0x7ffcaf5c7374+20]\n\tRtlUserThreadStart [0x0x7ffcb055cc91+33]","time":{"start":1752675367852,"stop":1752675382663,"duration":14811}}],"categories":[{"name":"Test defects","matchedStatuses":[]}],"tags":[]},"source":"1d58fcc10bdf2390.json","parameterValues":[]}