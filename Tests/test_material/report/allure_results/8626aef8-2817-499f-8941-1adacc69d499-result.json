{"name": "test_sched_attribute1", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message: 点击失败，找不到元素：xpath = //ul[@visible=\"visible\"]//ul//span[text()=\"标准复制\"]", "trace": "self = <Pages.sched_page.SchedPage object at 0x00000214CE466B00>\nby_or_element = 'xpath'\nvalue = '//ul[@visible=\"visible\"]//ul//span[text()=\"标准复制\"]', wait_time = 10\n\n    def click(self, by_or_element, value=None, wait_time=10):\n        if value is not None:\n            by = by_or_element\n            logging.info(f\"点击元素：By = {by}, Value = {value}\")\n            try:\n>               element = WebDriverWait(self.driver, wait_time).until(\n                    EC.element_to_be_clickable((by, value))\n                )\n\n..\\..\\Pages\\base_page.py:42: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"b988ba188e8e0ae1e5a3ef15597ec9d1\")>\nmethod = <function element_to_be_clickable.<locals>._predicate at 0x00000214CDF8F490>\nmessage = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        -----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x7ff655bf6f65+78965]\nE       \tGetHandleVerifier [0x0x7ff655bf6fc0+79056]\nE       \t(No symbol) [0x0x7ff655989dda]\nE       \t(No symbol) [0x0x7ff6559e02ea]\nE       \t(No symbol) [0x0x7ff6559e059c]\nE       \t(No symbol) [0x0x7ff655a33f37]\nE       \t(No symbol) [0x0x7ff655a086af]\nE       \t(No symbol) [0x0x7ff655a30dbe]\nE       \t(No symbol) [0x0x7ff655a08443]\nE       \t(No symbol) [0x0x7ff6559d1311]\nE       \t(No symbol) [0x0x7ff6559d20a3]\nE       \tGetHandleVerifier [0x0x7ff655eae26d+2926461]\nE       \tGetHandleVerifier [0x0x7ff655ea8993+2903715]\nE       \tGetHandleVerifier [0x0x7ff655ec6aed+3026941]\nE       \tGetHandleVerifier [0x0x7ff655c116fe+187406]\nE       \tGetHandleVerifier [0x0x7ff655c196ef+220159]\nE       \tGetHandleVerifier [0x0x7ff655bffaf4+114692]\nE       \tGetHandleVerifier [0x0x7ff655bffca9+115129]\nE       \tGetHandleVerifier [0x0x7ff655be64d8+10728]\nE       \tBaseThreadInitThunk [0x0x7ffd35f37374+20]\nE       \tRtlUserThreadStart [0x0x7ffd36ddcc91+33]\n\nC:\\Python\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:138: TimeoutException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_qtProgrammeMan.TestSchedPage object at 0x00000214CE0A3910>\nlogin_to_sched = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"b988ba188e8e0ae1e5a3ef15597ec9d1\")>\n\n    @allure.story(\"属性设置-未选择必填项，不允许提交\")\n    # @pytest.mark.run(order=1)\n    def test_sched_attribute1(self, login_to_sched):\n        driver = login_to_sched  # WebDriver 实例\n        sched = SchedPage(driver)  # 用 driver 初始化 SchedPage\n        name = \"标准方案复制\"\n        # 选择标准方案复制\n>       sched.click_button(f'//ul[@visible=\"visible\"]//ul//span[text()=\"{name}\"]')\n\ntest_qtProgrammeMan.py:477: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\Pages\\sched_page.py:68: in click_button\n    self.click(By.XPATH, xpath)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Pages.sched_page.SchedPage object at 0x00000214CE466B00>\nby_or_element = 'xpath'\nvalue = '//ul[@visible=\"visible\"]//ul//span[text()=\"标准复制\"]', wait_time = 10\n\n    def click(self, by_or_element, value=None, wait_time=10):\n        if value is not None:\n            by = by_or_element\n            logging.info(f\"点击元素：By = {by}, Value = {value}\")\n            try:\n                element = WebDriverWait(self.driver, wait_time).until(\n                    EC.element_to_be_clickable((by, value))\n                )\n            except TimeoutException:\n                logging.warning(f\"❌ 点击超时：元素 {by} = {value} 未在 {wait_time} 秒内变为可点击\")\n                self.safe_screenshot(\"click_timeout\", test_name=\"test\")\n>               raise TimeoutException(f\"点击失败，找不到元素：{by} = {value}\")\nE               selenium.common.exceptions.TimeoutException: Message: 点击失败，找不到元素：xpath = //ul[@visible=\"visible\"]//ul//span[text()=\"标准复制\"]\n\n..\\..\\Pages\\base_page.py:48: TimeoutException"}, "attachments": [{"name": "test_click_timeout", "source": "0ec6b942-3cad-4ee1-8d31-1876da947443-attachment.png", "type": "image/png"}, {"name": "log", "source": "2c9739bb-233b-4ffc-81e9-4221608b058a-attachment.txt", "type": "text/plain"}], "start": 1753343199752, "stop": 1753343210008, "uuid": "87098e1d-6210-47fe-89ab-adeff3c74cb7", "historyId": "1b996c8754caa6b2e2bc06d14fa47a2b", "testCaseId": "1b996c8754caa6b2e2bc06d14fa47a2b", "fullName": "Tests.test_material.test_qtProgrammeMan.TestSchedPage#test_sched_attribute1", "labels": [{"name": "feature", "value": "物控方案管理表测试用例"}, {"name": "story", "value": "属性设置-未选择必填项，不允许提交"}, {"name": "parentSuite", "value": "Tests.test_material"}, {"name": "suite", "value": "test_qtProgrammeMan"}, {"name": "subSuite", "value": "TestSchedPage"}, {"name": "host", "value": "DESKTOP-N0DSA7M"}, {"name": "thread", "value": "23600-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Tests.test_material.test_qtProgrammeMan"}]}