{"name": "test_item_editcodesuccess", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n\tGetHandleVerifier [0x0x7ff765d16f65+78965]\n\tGetHandleVerifier [0x0x7ff765d16fc0+79056]\n\t(No symbol) [0x0x7ff765aa9dda]\n\t(No symbol) [0x0x7ff765b002ea]\n\t(No symbol) [0x0x7ff765b0059c]\n\t(No symbol) [0x0x7ff765b53f37]\n\t(No symbol) [0x0x7ff765b286af]\n\t(No symbol) [0x0x7ff765b50dbe]\n\t(No symbol) [0x0x7ff765b28443]\n\t(No symbol) [0x0x7ff765af1311]\n\t(No symbol) [0x0x7ff765af20a3]\n\tGetHandleVerifier [0x0x7ff765fce26d+2926461]\n\tGetHandleVerifier [0x0x7ff765fc8993+2903715]\n\tGetHandleVerifier [0x0x7ff765fe6aed+3026941]\n\tGetHandleVerifier [0x0x7ff765d316fe+187406]\n\tGetHandleVerifier [0x0x7ff765d396ef+220159]\n\tGetHandleVerifier [0x0x7ff765d1faf4+114692]\n\tGetHandleVerifier [0x0x7ff765d1fca9+115129]\n\tGetHandleVerifier [0x0x7ff765d064d8+10728]\n\tBaseThreadInitThunk [0x0x7ffd35f37374+20]\n\tRtlUserThreadStart [0x0x7ffd36ddcc91+33]", "trace": "self = <test_materialVendors.TestItemPage object at 0x00000214F38CA170>\nlogin_to_item = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"2616179cd082513890b3e3c60acb4507\")>\n\n    @allure.story(\"修改工厂代码成功\")\n    # @pytest.mark.run(order=1)\n    def test_item_editcodesuccess(self, login_to_item):\n        # 选中1测试A物料代码\n        self.item.click_button('//tr[./td[2][.//span[text()=\"1测试A\"]]]/td[2]')\n        # 点击修改按钮\n        self.item.click_edi_button()\n        sleep(1)\n    \n        text = \"1测试A5\"\n        # 物料代码输入\n>       self.item.enter_texts(\n            \"//div[@id='2gqlayrh-vwyr']//input\", f\"{text}\"\n        )\n\ntest_materialVendors.py:209: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\Pages\\materialPage\\warehouseLocation_page.py:35: in enter_texts\n    self.enter_text(By.XPATH, xpath, text)\n..\\..\\Pages\\base_page.py:65: in enter_text\n    element = WebDriverWait(self.driver, wait_time).until(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"2616179cd082513890b3e3c60acb4507\")>\nmethod = <function visibility_of_element_located.<locals>._predicate at 0x00000214F38429E0>\nmessage = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        -----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x7ff765d16f65+78965]\nE       \tGetHandleVerifier [0x0x7ff765d16fc0+79056]\nE       \t(No symbol) [0x0x7ff765aa9dda]\nE       \t(No symbol) [0x0x7ff765b002ea]\nE       \t(No symbol) [0x0x7ff765b0059c]\nE       \t(No symbol) [0x0x7ff765b53f37]\nE       \t(No symbol) [0x0x7ff765b286af]\nE       \t(No symbol) [0x0x7ff765b50dbe]\nE       \t(No symbol) [0x0x7ff765b28443]\nE       \t(No symbol) [0x0x7ff765af1311]\nE       \t(No symbol) [0x0x7ff765af20a3]\nE       \tGetHandleVerifier [0x0x7ff765fce26d+2926461]\nE       \tGetHandleVerifier [0x0x7ff765fc8993+2903715]\nE       \tGetHandleVerifier [0x0x7ff765fe6aed+3026941]\nE       \tGetHandleVerifier [0x0x7ff765d316fe+187406]\nE       \tGetHandleVerifier [0x0x7ff765d396ef+220159]\nE       \tGetHandleVerifier [0x0x7ff765d1faf4+114692]\nE       \tGetHandleVerifier [0x0x7ff765d1fca9+115129]\nE       \tGetHandleVerifier [0x0x7ff765d064d8+10728]\nE       \tBaseThreadInitThunk [0x0x7ffd35f37374+20]\nE       \tRtlUserThreadStart [0x0x7ffd36ddcc91+33]\n\nC:\\Python\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:138: TimeoutException"}, "attachments": [{"name": "test_item_editcodesuccess_failure", "source": "ad203c36-ef69-4129-8712-e6f05b3d5169-attachment.png", "type": "image/png"}, {"name": "test_item_editcodesuccess_source", "source": "7ebd99ed-af23-4020-b335-9dce24767cd3-attachment.html", "type": "text/html"}, {"name": "log", "source": "6620949c-6b6e-461a-80c3-e9d5eeba7472-attachment.txt", "type": "text/plain"}], "start": 1752819127343, "stop": 1752819139719, "uuid": "d3e88ea0-fbd5-42da-af65-ee7970c6704f", "historyId": "94fdd3435945339df2ddc1de80528909", "testCaseId": "94fdd3435945339df2ddc1de80528909", "fullName": "Tests.test_material.test_materialVendors.TestItemPage#test_item_editcodesuccess", "labels": [{"name": "story", "value": "修改工厂代码成功"}, {"name": "feature", "value": "供应商信息测试用例"}, {"name": "parentSuite", "value": "Tests.test_material"}, {"name": "suite", "value": "test_materialVendors"}, {"name": "subSuite", "value": "TestItemPage"}, {"name": "host", "value": "DESKTOP-N0DSA7M"}, {"name": "thread", "value": "12956-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Tests.test_material.test_materialVendors"}]}