{"name": "test_sched_attribute3", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.InvalidElementStateException: Message: invalid element state\n  (Session info: chrome=138.0.7204.102)\nStacktrace:\n\tGetHandleVerifier [0x0x7ff662096f65+78965]\n\tGetHandleVerifier [0x0x7ff662096fc0+79056]\n\t(No symbol) [0x0x7ff661e29c0c]\n\t(No symbol) [0x0x7ff661e75747]\n\t(No symbol) [0x0x7ff661ea866a]\n\t(No symbol) [0x0x7ff661e72b56]\n\t(No symbol) [0x0x7ff661ea8880]\n\t(No symbol) [0x0x7ff661ed0dbe]\n\t(No symbol) [0x0x7ff661ea8443]\n\t(No symbol) [0x0x7ff661e71311]\n\t(No symbol) [0x0x7ff661e720a3]\n\tGetHandleVerifier [0x0x7ff66234e26d+2926461]\n\tGetHandleVerifier [0x0x7ff662348993+2903715]\n\tGetHandleVerifier [0x0x7ff662366aed+3026941]\n\tGetHandleVerifier [0x0x7ff6620b16fe+187406]\n\tGetHandleVerifier [0x0x7ff6620b96ef+220159]\n\tGetHandleVerifier [0x0x7ff66209faf4+114692]\n\tGetHandleVerifier [0x0x7ff66209fca9+115129]\n\tGetHandleVerifier [0x0x7ff6620864d8+10728]\n\tBaseThreadInitThunk [0x0x7ffd35f37374+20]\n\tRtlUserThreadStart [0x0x7ffd36ddcc91+33]", "trace": "self = <test_qtProgrammeMan.TestSchedPage object at 0x000001987D296410>\nlogin_to_sched = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"6d1696c7c287860a0385cff7ce9f9681\")>\n\n    @allure.story(\"属性设置-齐套供需设置保存全部成功\")\n    # @pytest.mark.run(order=1)\n    def test_sched_attribute3(self, login_to_sched):\n        driver = login_to_sched  # WebDriver 实例\n        sched = SchedPage(driver)  # 用 driver 初始化 SchedPage\n        name = \"标准方案复制\"\n        # 选择排产方案(订单级)复制方案\n        sched.click_button(f'//ul[@visible=\"visible\"]//ul//span[text()=\"{name}\"]')\n        sched.click_attribute_button()\n        # 批量修改表达式\n        expression_list = [\n            '//div[text()=\"预占料供应数据筛选 \"]/following-sibling::div',\n            '//div[text()=\"标准需求表数据筛选 \"]/following-sibling::div',\n            '//div[text()=\"标准供应表数据筛选 \"]/following-sibling::div',\n            '//div[text()=\"标准供应表排序条件式 \"]/following-sibling::div',\n            '//div[text()=\"供需分配有效条件式 \"]/following-sibling::div'\n        ]\n        # sched.expression_click(expression_list)\n    \n        # 点击标准供应表排序分组\n        sched.click_button('//div[text()=\"标准供应表排序分组 \"]/following-sibling::div')\n        # 点击+号\n        sched.click_button('(//button[@class=\"SchemeButton ivu-btn ivu-btn-primary ivu-btn-icon-only\"])[1]')\n        # 输入分组名称\n>       sched.enter_texts('(//div[@class=\"inputSlot ivu-input-wrapper ivu-input-wrapper-small ivu-input-type-text\"])', \"测试1\")\n\ntest_qtProgrammeMan.py:588: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\Pages\\materialPage\\qtProgrammeMan_page.py:65: in enter_texts\n    self.enter_text(By.XPATH, xpath, text)\n..\\..\\Pages\\base_page.py:68: in enter_text\n    element.clear()  # 清空文本框\nC:\\Python\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:156: in clear\n    self._execute(Command.CLEAR_ELEMENT)\nC:\\Python\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:574: in _execute\n    return self._parent.execute(command, params)\nC:\\Python\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:447: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001987D617C40>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"invalid element state\",\"message\":\"invalid element state\\\\n  (Session info...ff6620864d8+10728]\\\\n\\\\tBaseThreadInitThunk [0x0x7ffd35f37374+20]\\\\n\\\\tRtlUserThreadStart [0x0x7ffd36ddcc91+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidElementStateException: Message: invalid element state\nE         (Session info: chrome=138.0.7204.102)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x7ff662096f65+78965]\nE       \tGetHandleVerifier [0x0x7ff662096fc0+79056]\nE       \t(No symbol) [0x0x7ff661e29c0c]\nE       \t(No symbol) [0x0x7ff661e75747]\nE       \t(No symbol) [0x0x7ff661ea866a]\nE       \t(No symbol) [0x0x7ff661e72b56]\nE       \t(No symbol) [0x0x7ff661ea8880]\nE       \t(No symbol) [0x0x7ff661ed0dbe]\nE       \t(No symbol) [0x0x7ff661ea8443]\nE       \t(No symbol) [0x0x7ff661e71311]\nE       \t(No symbol) [0x0x7ff661e720a3]\nE       \tGetHandleVerifier [0x0x7ff66234e26d+2926461]\nE       \tGetHandleVerifier [0x0x7ff662348993+2903715]\nE       \tGetHandleVerifier [0x0x7ff662366aed+3026941]\nE       \tGetHandleVerifier [0x0x7ff6620b16fe+187406]\nE       \tGetHandleVerifier [0x0x7ff6620b96ef+220159]\nE       \tGetHandleVerifier [0x0x7ff66209faf4+114692]\nE       \tGetHandleVerifier [0x0x7ff66209fca9+115129]\nE       \tGetHandleVerifier [0x0x7ff6620864d8+10728]\nE       \tBaseThreadInitThunk [0x0x7ffd35f37374+20]\nE       \tRtlUserThreadStart [0x0x7ffd36ddcc91+33]\n\nC:\\Python\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: InvalidElementStateException"}, "attachments": [{"name": "test_sched_attribute3_failure", "source": "b6c6900d-8c3e-4a7c-9b56-9cc17151a723-attachment.png", "type": "image/png"}, {"name": "test_sched_attribute3_source", "source": "c0fd68c9-2923-4c43-b50d-2203c310251a-attachment.html", "type": "text/html"}, {"name": "log", "source": "f9ebc6c9-0e82-4d77-a1db-33389399b60d-attachment.txt", "type": "text/plain"}], "start": 1753429739510, "stop": 1753429741020, "uuid": "17232427-429d-43e5-b71a-6f0879574679", "historyId": "3a6e3fd80ba1a974f0588081c78fd8f1", "testCaseId": "3a6e3fd80ba1a974f0588081c78fd8f1", "fullName": "Tests.test_material.test_qtProgrammeMan.TestSchedPage#test_sched_attribute3", "labels": [{"name": "feature", "value": "物控方案管理表测试用例"}, {"name": "story", "value": "属性设置-齐套供需设置保存全部成功"}, {"name": "parentSuite", "value": "Tests.test_material"}, {"name": "suite", "value": "test_qtProgrammeMan"}, {"name": "subSuite", "value": "TestSchedPage"}, {"name": "host", "value": "DESKTOP-N0DSA7M"}, {"name": "thread", "value": "5668-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Tests.test_material.test_qtProgrammeMan"}]}