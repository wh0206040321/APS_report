{"name": "test_item_refreshsuccess", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: stale element not found in the current frame\n  (Session info: chrome=138.0.7204.101); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#stale-element-reference-exception\nStacktrace:\n\tGetHandleVerifier [0x0x7ff6be406f65+78965]\n\tGetHandleVerifier [0x0x7ff6be406fc0+79056]\n\t(No symbol) [0x0x7ff6be199dda]\n\t(No symbol) [0x0x7ff6be1a17c1]\n\t(No symbol) [0x0x7ff6be1a4bbc]\n\t(No symbol) [0x0x7ff6be242096]\n\t(No symbol) [0x0x7ff6be21866a]\n\t(No symbol) [0x0x7ff6be240dbe]\n\t(No symbol) [0x0x7ff6be218443]\n\t(No symbol) [0x0x7ff6be1e1311]\n\t(No symbol) [0x0x7ff6be1e20a3]\n\tGetHandleVerifier [0x0x7ff6be6be26d+2926461]\n\tGetHandleVerifier [0x0x7ff6be6b8993+2903715]\n\tGetHandleVerifier [0x0x7ff6be6d6aed+3026941]\n\tGetHandleVerifier [0x0x7ff6be4216fe+187406]\n\tGetHandleVerifier [0x0x7ff6be4296ef+220159]\n\tGetHandleVerifier [0x0x7ff6be40faf4+114692]\n\tGetHandleVerifier [0x0x7ff6be40fca9+115129]\n\tGetHandleVerifier [0x0x7ff6be3f64d8+10728]\n\tBaseThreadInitThunk [0x0x7ffd35f37374+20]\n\tRtlUserThreadStart [0x0x7ffd36ddcc91+33]", "trace": "self = <test_warehouseLocation.TestItemPage object at 0x0000020FABB16950>\nlogin_to_item = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"bd6f164dea2ca0ec3840c5fc799b4ca8\")>\n\n    @allure.story(\"筛选刷新成功\")\n    # @pytest.mark.run(order=1)\n    def test_item_refreshsuccess(self, login_to_item):\n    \n        # 工厂代码筛选框输入123\n        # self.item.enter_texts(\n        #     '//span[text()=\" 工厂代码\"]/ancestor::div[3]//input', \"111\"\n        # )\n        # self.item.click_ref_button()\n        # itemtext = self.item.get_find_element_xpath(\n        #     '//span[text()=\" 工厂代码\"]/ancestor::div[3]//input'\n        # ).text\n        itemtext=\"\"\n>       self.item.click_button('//span[text()=\" 工厂代码\"]/ancestor::div[3]//span//span//span')\n\ntest_warehouseLocation.py:351: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\Pages\\materialPage\\warehouseLocation_page.py:39: in click_button\n    self.click(By.XPATH, xpath)\n..\\..\\Pages\\base_page.py:42: in click\n    element = WebDriverWait(self.driver, wait_time).until(\nC:\\Python\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:129: in until\n    value = method(self._driver)\nC:\\Python\\lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py:623: in _predicate\n    element = visibility_of(target)(driver)\nC:\\Python\\lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py:252: in _predicate\n    return _element_if_visible(element)\nC:\\Python\\lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py:272: in _element_if_visible\n    return element if element.is_displayed() == visibility else False\nC:\\Python\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:342: in is_displayed\n    return self.parent.execute_script(f\"/* isDisplayed */return ({isDisplayed_js}).apply(null, arguments);\", self)\nC:\\Python\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:544: in execute_script\n    return self.execute(command, {\"script\": script, \"args\": converted_args})[\"value\"]\nC:\\Python\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:447: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000020FABAAEF80>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"stale element reference\",\"message\":\"stale element reference: stale elemen...ff6be3f64d8+10728]\\\\n\\\\tBaseThreadInitThunk [0x0x7ffd35f37374+20]\\\\n\\\\tRtlUserThreadStart [0x0x7ffd36ddcc91+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: stale element not found in the current frame\nE         (Session info: chrome=138.0.7204.101); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#stale-element-reference-exception\nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x7ff6be406f65+78965]\nE       \tGetHandleVerifier [0x0x7ff6be406fc0+79056]\nE       \t(No symbol) [0x0x7ff6be199dda]\nE       \t(No symbol) [0x0x7ff6be1a17c1]\nE       \t(No symbol) [0x0x7ff6be1a4bbc]\nE       \t(No symbol) [0x0x7ff6be242096]\nE       \t(No symbol) [0x0x7ff6be21866a]\nE       \t(No symbol) [0x0x7ff6be240dbe]\nE       \t(No symbol) [0x0x7ff6be218443]\nE       \t(No symbol) [0x0x7ff6be1e1311]\nE       \t(No symbol) [0x0x7ff6be1e20a3]\nE       \tGetHandleVerifier [0x0x7ff6be6be26d+2926461]\nE       \tGetHandleVerifier [0x0x7ff6be6b8993+2903715]\nE       \tGetHandleVerifier [0x0x7ff6be6d6aed+3026941]\nE       \tGetHandleVerifier [0x0x7ff6be4216fe+187406]\nE       \tGetHandleVerifier [0x0x7ff6be4296ef+220159]\nE       \tGetHandleVerifier [0x0x7ff6be40faf4+114692]\nE       \tGetHandleVerifier [0x0x7ff6be40fca9+115129]\nE       \tGetHandleVerifier [0x0x7ff6be3f64d8+10728]\nE       \tBaseThreadInitThunk [0x0x7ffd35f37374+20]\nE       \tRtlUserThreadStart [0x0x7ffd36ddcc91+33]\n\nC:\\Python\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: StaleElementReferenceException"}, "attachments": [{"name": "test_item_refreshsuccess_failure", "source": "ef920fbc-2711-48f3-80ea-923f5c67bc5b-attachment.png", "type": "image/png"}, {"name": "test_item_refreshsuccess_source", "source": "58774c5d-1443-4c03-8cb0-8f015e58c5f6-attachment.html", "type": "text/html"}, {"name": "log", "source": "9b7c8cfb-e66c-4f2f-97d9-9f1ff2a8c537-attachment.txt", "type": "text/plain"}], "start": 1753089227916, "stop": 1753089229143, "uuid": "719dff1b-8dbd-45b1-bbda-9d78fafbd03d", "historyId": "b9dee2225c2a5c76eeeaca9c8c4c2784", "testCaseId": "b9dee2225c2a5c76eeeaca9c8c4c2784", "fullName": "Tests.test_material.test_warehouseLocation.TestItemPage#test_item_refreshsuccess", "labels": [{"name": "feature", "value": "仓库库位测试用例"}, {"name": "story", "value": "筛选刷新成功"}, {"name": "parentSuite", "value": "Tests.test_material"}, {"name": "suite", "value": "test_warehouseLocation"}, {"name": "subSuite", "value": "TestItemPage"}, {"name": "host", "value": "DESKTOP-N0DSA7M"}, {"name": "thread", "value": "16140-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Tests.test_material.test_warehouseLocation"}]}