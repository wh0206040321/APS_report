{"name": "test_sched_addfail2", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message: 点击失败，找不到元素：xpath = //li[text()=\"测试方案\"]", "trace": "self = <Pages.sched_page.SchedPage object at 0x000001E2F79990C0>\nby_or_element = 'xpath', value = '//li[text()=\"测试方案\"]', wait_time = 10\n\n    def click(self, by_or_element, value=None, wait_time=10):\n        if value is not None:\n            by = by_or_element\n            logging.info(f\"点击元素：By = {by}, Value = {value}\")\n            try:\n>               element = WebDriverWait(self.driver, wait_time).until(\n                    EC.element_to_be_clickable((by, value))\n                )\n\n..\\..\\Pages\\base_page.py:42: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"481ae72837e72ba3dd1073055aefd5a1\")>\nmethod = <function element_to_be_clickable.<locals>._predicate at 0x000001E2F77FED40>\nmessage = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        -----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x7ff645866f65+78965]\nE       \tGetHandleVerifier [0x0x7ff645866fc0+79056]\nE       \t(No symbol) [0x0x7ff6455f9dda]\nE       \t(No symbol) [0x0x7ff6456502ea]\nE       \t(No symbol) [0x0x7ff64565059c]\nE       \t(No symbol) [0x0x7ff6456a3f37]\nE       \t(No symbol) [0x0x7ff6456786af]\nE       \t(No symbol) [0x0x7ff6456a0dbe]\nE       \t(No symbol) [0x0x7ff645678443]\nE       \t(No symbol) [0x0x7ff645641311]\nE       \t(No symbol) [0x0x7ff6456420a3]\nE       \tGetHandleVerifier [0x0x7ff645b1e26d+2926461]\nE       \tGetHandleVerifier [0x0x7ff645b18993+2903715]\nE       \tGetHandleVerifier [0x0x7ff645b36aed+3026941]\nE       \tGetHandleVerifier [0x0x7ff6458816fe+187406]\nE       \tGetHandleVerifier [0x0x7ff6458896ef+220159]\nE       \tGetHandleVerifier [0x0x7ff64586faf4+114692]\nE       \tGetHandleVerifier [0x0x7ff64586fca9+115129]\nE       \tGetHandleVerifier [0x0x7ff6458564d8+10728]\nE       \tBaseThreadInitThunk [0x0x7ffd35f37374+20]\nE       \tRtlUserThreadStart [0x0x7ffd36ddcc91+33]\n\nC:\\Python\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:138: TimeoutException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_qtProgrammeMan.TestSchedPage object at 0x000001E2F7859480>\nlogin_to_sched = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"481ae72837e72ba3dd1073055aefd5a1\")>\n\n    @allure.story(\"添加方案管理信息 只填写复制方案 不允许提交\")\n    # @pytest.mark.run(order=1)\n    def test_sched_addfail2(self, login_to_sched):\n        driver = login_to_sched  # WebDriver 实例\n        sched = SchedPage(driver)  # 用 driver 初始化 SchedPage\n    \n        sched.click_add_schedbutton()  # 点击添加方案\n        sched.click_button(\n            '//label[text()=\"选择复制的方案\"]/following-sibling::div/div'\n        )  # 点击下拉框\n>       sched.click_button('//li[text()=\"测试方案\"]')\n\ntest_qtProgrammeMan.py:70: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\Pages\\sched_page.py:68: in click_button\n    self.click(By.XPATH, xpath)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Pages.sched_page.SchedPage object at 0x000001E2F79990C0>\nby_or_element = 'xpath', value = '//li[text()=\"测试方案\"]', wait_time = 10\n\n    def click(self, by_or_element, value=None, wait_time=10):\n        if value is not None:\n            by = by_or_element\n            logging.info(f\"点击元素：By = {by}, Value = {value}\")\n            try:\n                element = WebDriverWait(self.driver, wait_time).until(\n                    EC.element_to_be_clickable((by, value))\n                )\n            except TimeoutException:\n                logging.warning(f\"❌ 点击超时：元素 {by} = {value} 未在 {wait_time} 秒内变为可点击\")\n                self.safe_screenshot(\"click_timeout\", test_name=\"test\")\n>               raise TimeoutException(f\"点击失败，找不到元素：{by} = {value}\")\nE               selenium.common.exceptions.TimeoutException: Message: 点击失败，找不到元素：xpath = //li[text()=\"测试方案\"]\n\n..\\..\\Pages\\base_page.py:48: TimeoutException"}, "attachments": [{"name": "test_click_timeout", "source": "0dbdc91f-9181-47d2-b418-a32753592a8b-attachment.png", "type": "image/png"}, {"name": "log", "source": "b9c2b880-4d27-49a7-b99a-2fe0ef5b548c-attachment.txt", "type": "text/plain"}], "start": 1753267531625, "stop": 1753267542880, "uuid": "6c065205-0da8-4934-ae54-afbe5cd66faf", "historyId": "5616e0c316e8fd82e3a50ea74c934bfd", "testCaseId": "5616e0c316e8fd82e3a50ea74c934bfd", "fullName": "Tests.test_material.test_qtProgrammeMan.TestSchedPage#test_sched_addfail2", "labels": [{"name": "story", "value": "添加方案管理信息 只填写复制方案 不允许提交"}, {"name": "feature", "value": "物控方案管理表测试用例"}, {"name": "parentSuite", "value": "Tests.test_material"}, {"name": "suite", "value": "test_qtProgrammeMan"}, {"name": "subSuite", "value": "TestSchedPage"}, {"name": "host", "value": "DESKTOP-N0DSA7M"}, {"name": "thread", "value": "9728-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Tests.test_material.test_qtProgrammeMan"}]}