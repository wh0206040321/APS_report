{"name": "test_sched_attribute1", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n\tGetHandleVerifier [0x0x7ff655bf6f65+78965]\n\tGetHandleVerifier [0x0x7ff655bf6fc0+79056]\n\t(No symbol) [0x0x7ff655989dda]\n\t(No symbol) [0x0x7ff6559e02ea]\n\t(No symbol) [0x0x7ff6559e059c]\n\t(No symbol) [0x0x7ff655a33f37]\n\t(No symbol) [0x0x7ff655a086af]\n\t(No symbol) [0x0x7ff655a30dbe]\n\t(No symbol) [0x0x7ff655a08443]\n\t(No symbol) [0x0x7ff6559d1311]\n\t(No symbol) [0x0x7ff6559d20a3]\n\tGetHandleVerifier [0x0x7ff655eae26d+2926461]\n\tGetHandleVerifier [0x0x7ff655ea8993+2903715]\n\tGetHandleVerifier [0x0x7ff655ec6aed+3026941]\n\tGetHandleVerifier [0x0x7ff655c116fe+187406]\n\tGetHandleVerifier [0x0x7ff655c196ef+220159]\n\tGetHandleVerifier [0x0x7ff655bffaf4+114692]\n\tGetHandleVerifier [0x0x7ff655bffca9+115129]\n\tGetHandleVerifier [0x0x7ff655be64d8+10728]\n\tBaseThreadInitThunk [0x0x7ffd35f37374+20]\n\tRtlUserThreadStart [0x0x7ffd36ddcc91+33]", "trace": "self = <test_qtProgrammeMan.TestSchedPage object at 0x000001FC5123A7A0>\nlogin_to_sched = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"602cf59ab9a21d101dd699f9c9d71dd2\")>\n\n    @allure.story(\"属性设置-未选择必填项，不允许提交\")\n    # @pytest.mark.run(order=1)\n    def test_sched_attribute1(self, login_to_sched):\n        driver = login_to_sched  # WebDriver 实例\n        sched = SchedPage(driver)  # 用 driver 初始化 SchedPage\n        name = \"标准方案复制\"\n        # 选择标准方案复制\n        sched.click_button(f'//ul[@visible=\"visible\"]//ul//span[text()=\"{name}\"]')\n        sched.click_attribute_button()\n    \n        sched.click_button('(//div[@class=\"h-40px flex-justify-end flex-align-items-end b-t-s-d9e3f3\"])[1]//span[text()=\"确定\"]')\n        # # 点击下拉框\n        # sched.click_button('//div[text()=\"按分派规则顺序排列\"]/following-sibling::div')\n        # sched.click_button(\n        #     '//div[text()=\"按分派规则顺序排列\"]/following-sibling::div//ul[2]/li[2]'\n        # )\n        # sleep(1)\n        # befort_input = sched.get_find_element_xpath(\n        #     '//div[text()=\"按分派规则顺序排列\"]/following-sibling::div//input/following-sibling::div/input'\n        # ).get_attribute(\"value\")\n        # sched.get_after_value(name)\n        # after_input = sched.get_find_element_xpath(\n        #     '//div[text()=\"按分派规则顺序排列\"]/following-sibling::div//input/following-sibling::div/input'\n        # ).get_attribute(\"value\")\n    \n>       message = WebDriverWait(driver, 10).until(\n            EC.visibility_of_element_located(\n                (By.XPATH, '//div[@class=\"el-message el-message--error\"]//p')\n            )\n        )\n\ntest_qtProgrammeMan.py:495: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"602cf59ab9a21d101dd699f9c9d71dd2\")>\nmethod = <function visibility_of_element_located.<locals>._predicate at 0x000001FC511DF490>\nmessage = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        -----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x7ff655bf6f65+78965]\nE       \tGetHandleVerifier [0x0x7ff655bf6fc0+79056]\nE       \t(No symbol) [0x0x7ff655989dda]\nE       \t(No symbol) [0x0x7ff6559e02ea]\nE       \t(No symbol) [0x0x7ff6559e059c]\nE       \t(No symbol) [0x0x7ff655a33f37]\nE       \t(No symbol) [0x0x7ff655a086af]\nE       \t(No symbol) [0x0x7ff655a30dbe]\nE       \t(No symbol) [0x0x7ff655a08443]\nE       \t(No symbol) [0x0x7ff6559d1311]\nE       \t(No symbol) [0x0x7ff6559d20a3]\nE       \tGetHandleVerifier [0x0x7ff655eae26d+2926461]\nE       \tGetHandleVerifier [0x0x7ff655ea8993+2903715]\nE       \tGetHandleVerifier [0x0x7ff655ec6aed+3026941]\nE       \tGetHandleVerifier [0x0x7ff655c116fe+187406]\nE       \tGetHandleVerifier [0x0x7ff655c196ef+220159]\nE       \tGetHandleVerifier [0x0x7ff655bffaf4+114692]\nE       \tGetHandleVerifier [0x0x7ff655bffca9+115129]\nE       \tGetHandleVerifier [0x0x7ff655be64d8+10728]\nE       \tBaseThreadInitThunk [0x0x7ffd35f37374+20]\nE       \tRtlUserThreadStart [0x0x7ffd36ddcc91+33]\n\nC:\\Python\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:138: TimeoutException"}, "attachments": [{"name": "test_sched_attribute1_failure", "source": "54bbd7da-e2a5-4853-af8f-9445303d4bb3-attachment.png", "type": "image/png"}, {"name": "test_sched_attribute1_source", "source": "e18178af-448b-4355-830f-cb93ad918f0c-attachment.html", "type": "text/html"}, {"name": "log", "source": "0643336b-7c2a-4ffc-8136-73806331bba2-attachment.txt", "type": "text/plain"}], "start": 1753343237818, "stop": 1753343249150, "uuid": "705d0a78-49ba-4014-af3d-1e242cd38133", "historyId": "1b996c8754caa6b2e2bc06d14fa47a2b", "testCaseId": "1b996c8754caa6b2e2bc06d14fa47a2b", "fullName": "Tests.test_material.test_qtProgrammeMan.TestSchedPage#test_sched_attribute1", "labels": [{"name": "feature", "value": "物控方案管理表测试用例"}, {"name": "story", "value": "属性设置-未选择必填项，不允许提交"}, {"name": "parentSuite", "value": "Tests.test_material"}, {"name": "suite", "value": "test_qtProgrammeMan"}, {"name": "subSuite", "value": "TestSchedPage"}, {"name": "host", "value": "DESKTOP-N0DSA7M"}, {"name": "thread", "value": "25244-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Tests.test_material.test_qtProgrammeMan"}]}