{"name": "test_item_editrepeat", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n\tGetHandleVerifier [0x0x7ff715536f65+78965]\n\tGetHandleVerifier [0x0x7ff715536fc0+79056]\n\t(No symbol) [0x0x7ff7152c9dda]\n\t(No symbol) [0x0x7ff7153202ea]\n\t(No symbol) [0x0x7ff71532059c]\n\t(No symbol) [0x0x7ff715373f37]\n\t(No symbol) [0x0x7ff7153486af]\n\t(No symbol) [0x0x7ff715370dbe]\n\t(No symbol) [0x0x7ff715348443]\n\t(No symbol) [0x0x7ff715311311]\n\t(No symbol) [0x0x7ff7153120a3]\n\tGetHandleVerifier [0x0x7ff7157ee26d+2926461]\n\tGetHandleVerifier [0x0x7ff7157e8993+2903715]\n\tGetHandleVerifier [0x0x7ff715806aed+3026941]\n\tGetHandleVerifier [0x0x7ff7155516fe+187406]\n\tGetHandleVerifier [0x0x7ff7155596ef+220159]\n\tGetHandleVerifier [0x0x7ff71553faf4+114692]\n\tGetHandleVerifier [0x0x7ff71553fca9+115129]\n\tGetHandleVerifier [0x0x7ff7155264d8+10728]\n\tBaseThreadInitThunk [0x0x7ffd35f37374+20]\n\tRtlUserThreadStart [0x0x7ffd36ddcc91+33]", "trace": "self = <test_materialVendors.TestItemPage object at 0x000001D06434A350>\nlogin_to_item = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"ac7f432683f6fe4740f5e1c7bcb4b4e1\")>\n\n    @allure.story(\"修改工厂代码重复\")\n    # @pytest.mark.run(order=1)\n    def test_item_editrepeat(self, login_to_item):\n    \n        # 选中1测试A工厂代码\n        self.item.click_button('//tr[./td[2][.//span[text()=\"1测试A\"]]]/td[2]')\n        # 点击修改按钮\n        self.item.click_edi_button()\n        # 供应商代码输入111\n>       self.item.enter_texts(\"//div[@id='tx0gv6lt-z2dv']//input\", \"111\")\n\ntest_materialVendors.py:187: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\Pages\\materialPage\\warehouseLocation_page.py:35: in enter_texts\n    self.enter_text(By.XPATH, xpath, text)\n..\\..\\Pages\\base_page.py:65: in enter_text\n    element = WebDriverWait(self.driver, wait_time).until(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"ac7f432683f6fe4740f5e1c7bcb4b4e1\")>\nmethod = <function visibility_of_element_located.<locals>._predicate at 0x000001D0642B29E0>\nmessage = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        -----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x7ff715536f65+78965]\nE       \tGetHandleVerifier [0x0x7ff715536fc0+79056]\nE       \t(No symbol) [0x0x7ff7152c9dda]\nE       \t(No symbol) [0x0x7ff7153202ea]\nE       \t(No symbol) [0x0x7ff71532059c]\nE       \t(No symbol) [0x0x7ff715373f37]\nE       \t(No symbol) [0x0x7ff7153486af]\nE       \t(No symbol) [0x0x7ff715370dbe]\nE       \t(No symbol) [0x0x7ff715348443]\nE       \t(No symbol) [0x0x7ff715311311]\nE       \t(No symbol) [0x0x7ff7153120a3]\nE       \tGetHandleVerifier [0x0x7ff7157ee26d+2926461]\nE       \tGetHandleVerifier [0x0x7ff7157e8993+2903715]\nE       \tGetHandleVerifier [0x0x7ff715806aed+3026941]\nE       \tGetHandleVerifier [0x0x7ff7155516fe+187406]\nE       \tGetHandleVerifier [0x0x7ff7155596ef+220159]\nE       \tGetHandleVerifier [0x0x7ff71553faf4+114692]\nE       \tGetHandleVerifier [0x0x7ff71553fca9+115129]\nE       \tGetHandleVerifier [0x0x7ff7155264d8+10728]\nE       \tBaseThreadInitThunk [0x0x7ffd35f37374+20]\nE       \tRtlUserThreadStart [0x0x7ffd36ddcc91+33]\n\nC:\\Python\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:138: TimeoutException"}, "attachments": [{"name": "test_item_editrepeat_failure", "source": "0d094093-c9fb-4b61-b9d5-43c4d96b7dd6-attachment.png", "type": "image/png"}, {"name": "test_item_editrepeat_source", "source": "80583d6e-2a64-46e1-9795-8a194a72dd58-attachment.html", "type": "text/html"}, {"name": "log", "source": "ce290667-bf8f-486a-b069-f539ecdf6ede-attachment.txt", "type": "text/plain"}], "start": 1752805178429, "stop": 1752805189628, "uuid": "56d7aa36-2bac-4e5c-99e8-15356a5ab99e", "historyId": "e7fee82af335bb044d88ab285ba0f619", "testCaseId": "e7fee82af335bb044d88ab285ba0f619", "fullName": "Tests.test_material.test_materialVendors.TestItemPage#test_item_editrepeat", "labels": [{"name": "story", "value": "修改工厂代码重复"}, {"name": "feature", "value": "供应商信息测试用例"}, {"name": "parentSuite", "value": "Tests.test_material"}, {"name": "suite", "value": "test_materialVendors"}, {"name": "subSuite", "value": "TestItemPage"}, {"name": "host", "value": "DESKTOP-N0DSA7M"}, {"name": "thread", "value": "21732-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Tests.test_material.test_materialVendors"}]}