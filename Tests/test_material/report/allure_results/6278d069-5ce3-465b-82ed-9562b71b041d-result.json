{"name": "test_item_addrepeat", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n\tGetHandleVerifier [0x0x7ff74c436f65+78965]\n\tGetHandleVerifier [0x0x7ff74c436fc0+79056]\n\t(No symbol) [0x0x7ff74c1c9dda]\n\t(No symbol) [0x0x7ff74c2202ea]\n\t(No symbol) [0x0x7ff74c22059c]\n\t(No symbol) [0x0x7ff74c273f37]\n\t(No symbol) [0x0x7ff74c2486af]\n\t(No symbol) [0x0x7ff74c270dbe]\n\t(No symbol) [0x0x7ff74c248443]\n\t(No symbol) [0x0x7ff74c211311]\n\t(No symbol) [0x0x7ff74c2120a3]\n\tGetHandleVerifier [0x0x7ff74c6ee26d+2926461]\n\tGetHandleVerifier [0x0x7ff74c6e8993+2903715]\n\tGetHandleVerifier [0x0x7ff74c706aed+3026941]\n\tGetHandleVerifier [0x0x7ff74c4516fe+187406]\n\tGetHandleVerifier [0x0x7ff74c4596ef+220159]\n\tGetHandleVerifier [0x0x7ff74c43faf4+114692]\n\tGetHandleVerifier [0x0x7ff74c43fca9+115129]\n\tGetHandleVerifier [0x0x7ff74c4264d8+10728]\n\tBaseThreadInitThunk [0x0x7ffd35f37374+20]\n\tRtlUserThreadStart [0x0x7ffd36ddcc91+33]", "trace": "self = <test_materialSupplys.TestItemPage object at 0x00000176077C6D40>\nlogin_to_item = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"ab4d219369ed64a9b55b9c5e35be1a9a\")>\n\n    @allure.story(\"添加数据重复\")\n    # @pytest.mark.run(order=1)\n    def test_item_addrepeat(self, login_to_item):\n    \n        self.item.click_add_button()  # 检查点击添加\n    \n        # 输入框要修改的值\n        text_str = \"111\"\n        date_str = \"2025/07/23 00:00:00\"\n        # 新增输入框的xpath\n        input_xpath_list = [\n            \"//div[@id='rta286cd-4col']//input\",\n            \"//div[@id='66fs3ka3-ul4k']//input\",\n            \"//div[@id='xvo43ah2-gj6p']//input\",\n            \"//div[@id='qh1vnphz-0cqy']//input\",\n            \"//div[@id='ddn5nlv3-myjg']//input\"\n        ]\n        # 新增日期选择框的xpath\n        date_xpath_list = [\"//div[@id='9tbuqose-wzrv']//input\"]\n    \n        sleep(1)\n        # 批量修改输入框\n        self.item.batch_modify_input(input_xpath_list, text_str)\n        self.item.batch_modify_input(date_xpath_list, date_str)\n    \n        sleep(1)\n        # 点击确定\n        self.item.click_button('(//button[@type=\"button\"]/span[text()=\"确定\"])[4]')\n        sleep(1)\n        # 获取重复弹窗文字\n>       error_popup = self.item.get_find_element_xpath(\n            '//div[text()=\" 记录已存在,请检查！ \"]'\n        ).text\n\ntest_materialSupplys.py:178: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\Pages\\materialPage\\warehouseLocation_page.py:150: in get_find_element_xpath\n    return self.find_element(By.XPATH, xpath)\n..\\..\\Pages\\base_page.py:24: in find_element\n    return WebDriverWait(self.driver, wait_time).until(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"ab4d219369ed64a9b55b9c5e35be1a9a\")>\nmethod = <function presence_of_element_located.<locals>._predicate at 0x000001760759A8C0>\nmessage = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        -----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x7ff74c436f65+78965]\nE       \tGetHandleVerifier [0x0x7ff74c436fc0+79056]\nE       \t(No symbol) [0x0x7ff74c1c9dda]\nE       \t(No symbol) [0x0x7ff74c2202ea]\nE       \t(No symbol) [0x0x7ff74c22059c]\nE       \t(No symbol) [0x0x7ff74c273f37]\nE       \t(No symbol) [0x0x7ff74c2486af]\nE       \t(No symbol) [0x0x7ff74c270dbe]\nE       \t(No symbol) [0x0x7ff74c248443]\nE       \t(No symbol) [0x0x7ff74c211311]\nE       \t(No symbol) [0x0x7ff74c2120a3]\nE       \tGetHandleVerifier [0x0x7ff74c6ee26d+2926461]\nE       \tGetHandleVerifier [0x0x7ff74c6e8993+2903715]\nE       \tGetHandleVerifier [0x0x7ff74c706aed+3026941]\nE       \tGetHandleVerifier [0x0x7ff74c4516fe+187406]\nE       \tGetHandleVerifier [0x0x7ff74c4596ef+220159]\nE       \tGetHandleVerifier [0x0x7ff74c43faf4+114692]\nE       \tGetHandleVerifier [0x0x7ff74c43fca9+115129]\nE       \tGetHandleVerifier [0x0x7ff74c4264d8+10728]\nE       \tBaseThreadInitThunk [0x0x7ffd35f37374+20]\nE       \tRtlUserThreadStart [0x0x7ffd36ddcc91+33]\n\nC:\\Python\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:138: TimeoutException"}, "attachments": [{"name": "test_find_element_timeout", "source": "e87e0ea8-bf6c-49b5-b658-a903b61be0aa-attachment.png", "type": "image/png"}, {"name": "log", "source": "292e6e5d-e0ee-4ddd-8921-4ecd8e2570af-attachment.txt", "type": "text/plain"}], "start": 1753260014506, "stop": 1753260030125, "uuid": "98073492-ba24-48e8-b9b2-170f0f827e5b", "historyId": "8890ef477793a7ccad32ef2ae34f524d", "testCaseId": "8890ef477793a7ccad32ef2ae34f524d", "fullName": "Tests.test_material.test_materialSupplys.TestItemPage#test_item_addrepeat", "labels": [{"name": "story", "value": "添加数据重复"}, {"name": "feature", "value": "物料交付答复测试用例"}, {"name": "parentSuite", "value": "Tests.test_material"}, {"name": "suite", "value": "test_materialSupplys"}, {"name": "subSuite", "value": "TestItemPage"}, {"name": "host", "value": "DESKTOP-N0DSA7M"}, {"name": "thread", "value": "35212-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Tests.test_material.test_materialSupplys"}]}