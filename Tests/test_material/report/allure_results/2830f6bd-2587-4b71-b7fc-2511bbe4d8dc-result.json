{"name": "test_warehouselocation_addfail", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message: 点击失败，找不到元素：xpath = //p[text()=\"新增\"]", "trace": "self = <Pages.materialPage.warehouseLocation_page.WarehouseLocationPage object at 0x0000014AF24C3250>\nby_or_element = 'xpath', value = '//p[text()=\"新增\"]', wait_time = 10\n\n    def click(self, by_or_element, value=None, wait_time=10):\n        if value is not None:\n            by = by_or_element\n            logging.info(f\"点击元素：By = {by}, Value = {value}\")\n            try:\n>               element = WebDriverWait(self.driver, wait_time).until(\n                    EC.element_to_be_clickable((by, value))\n                )\n\n..\\..\\Pages\\base_page.py:42: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"7e2577b99c232d6f948f1e357e6f3e70\")>\nmethod = <function element_to_be_clickable.<locals>._predicate at 0x0000014AF23623B0>\nmessage = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        -----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x7ff7c0476f65+78965]\nE       \tGetHandleVerifier [0x0x7ff7c0476fc0+79056]\nE       \t(No symbol) [0x0x7ff7c0209dda]\nE       \t(No symbol) [0x0x7ff7c02602ea]\nE       \t(No symbol) [0x0x7ff7c026059c]\nE       \t(No symbol) [0x0x7ff7c02b3f37]\nE       \t(No symbol) [0x0x7ff7c02886af]\nE       \t(No symbol) [0x0x7ff7c02b0dbe]\nE       \t(No symbol) [0x0x7ff7c0288443]\nE       \t(No symbol) [0x0x7ff7c0251311]\nE       \t(No symbol) [0x0x7ff7c02520a3]\nE       \tGetHandleVerifier [0x0x7ff7c072e26d+2926461]\nE       \tGetHandleVerifier [0x0x7ff7c0728993+2903715]\nE       \tGetHandleVerifier [0x0x7ff7c0746aed+3026941]\nE       \tGetHandleVerifier [0x0x7ff7c04916fe+187406]\nE       \tGetHandleVerifier [0x0x7ff7c04996ef+220159]\nE       \tGetHandleVerifier [0x0x7ff7c047faf4+114692]\nE       \tGetHandleVerifier [0x0x7ff7c047fca9+115129]\nE       \tGetHandleVerifier [0x0x7ff7c04664d8+10728]\nE       \tBaseThreadInitThunk [0x0x7ffd35f37374+20]\nE       \tRtlUserThreadStart [0x0x7ffd36ddcc91+33]\n\nC:\\Python\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:138: TimeoutException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_warehouseLocation.TestItemPage object at 0x0000014AF267DC60>\nlogin_to_item = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"7e2577b99c232d6f948f1e357e6f3e70\")>\n\n    @allure.story(\"添加仓库库位信息 不填写数据点击确认 不允许提交\")\n    # @pytest.mark.run(order=1)\n    def test_warehouselocation_addfail(self, login_to_item):\n>       self.item.click_add_button()\n\ntest_warehouseLocation.py:53: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\Pages\\materialPage\\warehouseLocation_page.py:15: in click_add_button\n    self.click(By.XPATH, '//p[text()=\"新增\"]')\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Pages.materialPage.warehouseLocation_page.WarehouseLocationPage object at 0x0000014AF24C3250>\nby_or_element = 'xpath', value = '//p[text()=\"新增\"]', wait_time = 10\n\n    def click(self, by_or_element, value=None, wait_time=10):\n        if value is not None:\n            by = by_or_element\n            logging.info(f\"点击元素：By = {by}, Value = {value}\")\n            try:\n                element = WebDriverWait(self.driver, wait_time).until(\n                    EC.element_to_be_clickable((by, value))\n                )\n            except TimeoutException:\n                logging.warning(f\"❌ 点击超时：元素 {by} = {value} 未在 {wait_time} 秒内变为可点击\")\n                self.safe_screenshot(\"click_timeout\", test_name=\"test\")\n>               raise TimeoutException(f\"点击失败，找不到元素：{by} = {value}\")\nE               selenium.common.exceptions.TimeoutException: Message: 点击失败，找不到元素：xpath = //p[text()=\"新增\"]\n\n..\\..\\Pages\\base_page.py:48: TimeoutException"}, "attachments": [{"name": "test_click_timeout", "source": "609147aa-7d78-4262-9749-0a2b3fdca0b1-attachment.png", "type": "image/png"}, {"name": "log", "source": "68cd7a63-d049-48ec-bfe0-9688371c8a11-attachment.txt", "type": "text/plain"}], "start": 1752661214433, "stop": 1752661224854, "uuid": "f2b18988-998b-4525-b87c-03a3218f3466", "historyId": "8180e07e221e2df11c62446edb1226d0", "testCaseId": "8180e07e221e2df11c62446edb1226d0", "fullName": "Tests.test_material.test_warehouseLocation.TestItemPage#test_warehouselocation_addfail", "labels": [{"name": "story", "value": "添加仓库库位信息 不填写数据点击确认 不允许提交"}, {"name": "feature", "value": "仓库库位测试用例"}, {"name": "parentSuite", "value": "Tests.test_material"}, {"name": "suite", "value": "test_warehouseLocation"}, {"name": "subSuite", "value": "TestItemPage"}, {"name": "host", "value": "DESKTOP-N0DSA7M"}, {"name": "thread", "value": "1636-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Tests.test_material.test_warehouseLocation"}]}