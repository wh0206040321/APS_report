{"name": "test_setting_addfail1", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n\tGetHandleVerifier [0x0x7ff699e16f65+78965]\n\tGetHandleVerifier [0x0x7ff699e16fc0+79056]\n\t(No symbol) [0x0x7ff699ba9dda]\n\t(No symbol) [0x0x7ff699c002ea]\n\t(No symbol) [0x0x7ff699c0059c]\n\t(No symbol) [0x0x7ff699c53f37]\n\t(No symbol) [0x0x7ff699c286af]\n\t(No symbol) [0x0x7ff699c50dbe]\n\t(No symbol) [0x0x7ff699c28443]\n\t(No symbol) [0x0x7ff699bf1311]\n\t(No symbol) [0x0x7ff699bf20a3]\n\tGetHandleVerifier [0x0x7ff69a0ce26d+2926461]\n\tGetHandleVerifier [0x0x7ff69a0c8993+2903715]\n\tGetHandleVerifier [0x0x7ff69a0e6aed+3026941]\n\tGetHandleVerifier [0x0x7ff699e316fe+187406]\n\tGetHandleVerifier [0x0x7ff699e396ef+220159]\n\tGetHandleVerifier [0x0x7ff699e1faf4+114692]\n\tGetHandleVerifier [0x0x7ff699e1fca9+115129]\n\tGetHandleVerifier [0x0x7ff699e064d8+10728]\n\tBaseThreadInitThunk [0x0x7ffa099e7374+20]\n\tRtlUserThreadStart [0x0x7ffa0b89cc91+33]", "trace": "@pytest.fixture  # (scope=\"class\")这个参数表示整个测试类共用同一个浏览器，默认一个用例执行一次\n    def login_to_setting():\n        \"\"\"初始化并返回 driver\"\"\"\n        driver_path = DateDriver().driver_path\n        driver = create_driver(driver_path)\n        driver.implicitly_wait(3)\n    \n        # 初始化登录页面\n        page = LoginPage(driver)  # 初始化登录页面\n        page.navigate_to(DateDriver().url)  # 导航到登录页面\n>       page.login(DateDriver().username, DateDriver().password, DateDriver().planning)\n\ntest_setting.py:32: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\Pages\\login_page.py:30: in login\n    self.enter_username(username)\n..\\..\\Pages\\login_page.py:14: in enter_username\n    self.enter_text(By.XPATH, '//input[@placeholder=\"请输入账户\"]', username)\n..\\..\\Pages\\base_page.py:65: in enter_text\n    element = WebDriverWait(self.driver, wait_time).until(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"56209f8757283758655a4987ce5b7ec5\")>\nmethod = <function visibility_of_element_located.<locals>._predicate at 0x000001B585F2C280>\nmessage = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        -----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x7ff699e16f65+78965]\nE       \tGetHandleVerifier [0x0x7ff699e16fc0+79056]\nE       \t(No symbol) [0x0x7ff699ba9dda]\nE       \t(No symbol) [0x0x7ff699c002ea]\nE       \t(No symbol) [0x0x7ff699c0059c]\nE       \t(No symbol) [0x0x7ff699c53f37]\nE       \t(No symbol) [0x0x7ff699c286af]\nE       \t(No symbol) [0x0x7ff699c50dbe]\nE       \t(No symbol) [0x0x7ff699c28443]\nE       \t(No symbol) [0x0x7ff699bf1311]\nE       \t(No symbol) [0x0x7ff699bf20a3]\nE       \tGetHandleVerifier [0x0x7ff69a0ce26d+2926461]\nE       \tGetHandleVerifier [0x0x7ff69a0c8993+2903715]\nE       \tGetHandleVerifier [0x0x7ff69a0e6aed+3026941]\nE       \tGetHandleVerifier [0x0x7ff699e316fe+187406]\nE       \tGetHandleVerifier [0x0x7ff699e396ef+220159]\nE       \tGetHandleVerifier [0x0x7ff699e1faf4+114692]\nE       \tGetHandleVerifier [0x0x7ff699e1fca9+115129]\nE       \tGetHandleVerifier [0x0x7ff699e064d8+10728]\nE       \tBaseThreadInitThunk [0x0x7ffa099e7374+20]\nE       \tRtlUserThreadStart [0x0x7ffa0b89cc91+33]\n\nD:\\Program Files\\Python310\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:146: TimeoutException"}, "start": 1752739367432, "stop": 1752739367432, "uuid": "2f26b680-51be-446c-89df-efe2bdafd08d", "historyId": "539533d8ee0a00bfc0e02f29bc514b86", "testCaseId": "539533d8ee0a00bfc0e02f29bc514b86", "fullName": "Tests.test_item.test_setting.TestSettingPage#test_setting_addfail1", "labels": [{"name": "story", "value": "不填写布局名称，添加失败"}, {"name": "feature", "value": "标准应用设置测试用例"}, {"name": "tag", "value": "run(order=25)"}, {"name": "parentSuite", "value": "Tests.test_item"}, {"name": "suite", "value": "test_setting"}, {"name": "subSuite", "value": "TestSettingPage"}, {"name": "host", "value": "WIN-20240820MJV"}, {"name": "thread", "value": "23388-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Tests.test_item.test_setting"}]}