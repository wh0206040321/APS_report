{"name": "test_setting_addfail1", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.WebDriverException: Message: unknown error: JavaScript code failed\nfrom unknown command: 'Runtime.evaluate' wasn't found\n  (Session info: chrome=137.0.7151.69)\nStacktrace:\n\tGetHandleVerifier [0x0x7ff699e16f65+78965]\n\tGetHandleVerifier [0x0x7ff699e16fc0+79056]\n\t(No symbol) [0x0x7ff699ba9dda]\n\t(No symbol) [0x0x7ff699b965d0]\n\t(No symbol) [0x0x7ff699b94ce9]\n\t(No symbol) [0x0x7ff699b9559f]\n\t(No symbol) [0x0x7ff699bc0cab]\n\t(No symbol) [0x0x7ff699bb42c0]\n\t(No symbol) [0x0x7ff699bb4162]\n\t(No symbol) [0x0x7ff699b85d68]\n\t(No symbol) [0x0x7ff699b83d03]\n\t(No symbol) [0x0x7ff699c69011]\n\t(No symbol) [0x0x7ff699c2866a]\n\t(No symbol) [0x0x7ff699c50dbe]\n\t(No symbol) [0x0x7ff699c28443]\n\t(No symbol) [0x0x7ff699bf1311]\n\t(No symbol) [0x0x7ff699bf20a3]\n\tGetHandleVerifier [0x0x7ff69a0ce26d+2926461]\n\tGetHandleVerifier [0x0x7ff69a0c8993+2903715]\n\tGetHandleVerifier [0x0x7ff69a0e6aed+3026941]\n\tGetHandleVerifier [0x0x7ff699e316fe+187406]\n\tGetHandleVerifier [0x0x7ff699e396ef+220159]\n\tGetHandleVerifier [0x0x7ff699e1faf4+114692]\n\tGetHandleVerifier [0x0x7ff699e1fca9+115129]\n\tGetHandleVerifier [0x0x7ff699e064d8+10728]\n\tBaseThreadInitThunk [0x0x7ffa099e7374+20]\n\tRtlUserThreadStart [0x0x7ffa0b89cc91+33]", "trace": "@pytest.fixture  # (scope=\"class\")这个参数表示整个测试类共用同一个浏览器，默认一个用例执行一次\n    def login_to_setting():\n        \"\"\"初始化并返回 driver\"\"\"\n        driver_path = DateDriver().driver_path\n>       driver = create_driver(driver_path)\n\ntest_setting.py:26: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\Utils\\driver_manager.py:34: in create_driver\n    driver.maximize_window()  # 最大化浏览器窗口\nD:\\Program Files\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:622: in maximize_window\n    self.execute(command, None)\nD:\\Program Files\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:429: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000250486DBFA0>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"unknown error: JavaScript code failed\\\\nfrom un...ff699e064d8+10728]\\\\n\\\\tBaseThreadInitThunk [0x0x7ffa099e7374+20]\\\\n\\\\tRtlUserThreadStart [0x0x7ffa0b89cc91+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: unknown error: JavaScript code failed\nE       from unknown command: 'Runtime.evaluate' wasn't found\nE         (Session info: chrome=137.0.7151.69)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x7ff699e16f65+78965]\nE       \tGetHandleVerifier [0x0x7ff699e16fc0+79056]\nE       \t(No symbol) [0x0x7ff699ba9dda]\nE       \t(No symbol) [0x0x7ff699b965d0]\nE       \t(No symbol) [0x0x7ff699b94ce9]\nE       \t(No symbol) [0x0x7ff699b9559f]\nE       \t(No symbol) [0x0x7ff699bc0cab]\nE       \t(No symbol) [0x0x7ff699bb42c0]\nE       \t(No symbol) [0x0x7ff699bb4162]\nE       \t(No symbol) [0x0x7ff699b85d68]\nE       \t(No symbol) [0x0x7ff699b83d03]\nE       \t(No symbol) [0x0x7ff699c69011]\nE       \t(No symbol) [0x0x7ff699c2866a]\nE       \t(No symbol) [0x0x7ff699c50dbe]\nE       \t(No symbol) [0x0x7ff699c28443]\nE       \t(No symbol) [0x0x7ff699bf1311]\nE       \t(No symbol) [0x0x7ff699bf20a3]\nE       \tGetHandleVerifier [0x0x7ff69a0ce26d+2926461]\nE       \tGetHandleVerifier [0x0x7ff69a0c8993+2903715]\nE       \tGetHandleVerifier [0x0x7ff69a0e6aed+3026941]\nE       \tGetHandleVerifier [0x0x7ff699e316fe+187406]\nE       \tGetHandleVerifier [0x0x7ff699e396ef+220159]\nE       \tGetHandleVerifier [0x0x7ff699e1faf4+114692]\nE       \tGetHandleVerifier [0x0x7ff699e1fca9+115129]\nE       \tGetHandleVerifier [0x0x7ff699e064d8+10728]\nE       \tBaseThreadInitThunk [0x0x7ffa099e7374+20]\nE       \tRtlUserThreadStart [0x0x7ffa0b89cc91+33]\n\nD:\\Program Files\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: WebDriverException"}, "start": 1752739362091, "stop": 1752739362091, "uuid": "a72d209e-cd31-4d5a-b978-05296c4c531d", "historyId": "539533d8ee0a00bfc0e02f29bc514b86", "testCaseId": "539533d8ee0a00bfc0e02f29bc514b86", "fullName": "Tests.test_item.test_setting.TestSettingPage#test_setting_addfail1", "labels": [{"name": "story", "value": "不填写布局名称，添加失败"}, {"name": "feature", "value": "标准应用设置测试用例"}, {"name": "tag", "value": "run(order=25)"}, {"name": "parentSuite", "value": "Tests.test_item"}, {"name": "suite", "value": "test_setting"}, {"name": "subSuite", "value": "TestSettingPage"}, {"name": "host", "value": "WIN-20240820MJV"}, {"name": "thread", "value": "3668-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Tests.test_item.test_setting"}]}