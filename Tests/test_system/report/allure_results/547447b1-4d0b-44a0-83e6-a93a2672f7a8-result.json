{"name": "test_psi_addall", "status": "broken", "statusDetails": {"message": "Exception: 点击失败：Message: no such window: target window already closed\nfrom unknown error: web view not found\n  (Session info: chrome=137.0.7151.69)\nStacktrace:\n\tGetHandleVerifier [0x0x7ff66a0c6f65+78965]\n\tGetHandleVerifier [0x0x7ff66a0c6fc0+79056]\n\t(No symbol) [0x0x7ff669e59dda]\n\t(No symbol) [0x0x7ff669e320d1]\n\t(No symbol) [0x0x7ff669edff4e]\n\t(No symbol) [0x0x7ff669f006cd]\n\t(No symbol) [0x0x7ff669ed8443]\n\t(No symbol) [0x0x7ff669ea1311]\n\t(No symbol) [0x0x7ff669ea20a3]\n\tGetHandleVerifier [0x0x7ff66a37e26d+2926461]\n\tGetHandleVerifier [0x0x7ff66a378993+2903715]\n\tGetHandleVerifier [0x0x7ff66a396aed+3026941]\n\tGetHandleVerifier [0x0x7ff66a0e16fe+187406]\n\tGetHandleVerifier [0x0x7ff66a0e96ef+220159]\n\tGetHandleVerifier [0x0x7ff66a0cfaf4+114692]\n\tGetHandleVerifier [0x0x7ff66a0cfca9+115129]\n\tGetHandleVerifier [0x0x7ff66a0b64d8+10728]\n\tBaseThreadInitThunk [0x0x7ffff5547374+20]\n\tRtlUserThreadStart [0x0x7ffff5f9cc91+33]", "trace": "self = <Pages.systemPage.psi_page.PsiPage object at 0x00000262B888AF20>\nby_or_element = 'xpath', value = '//div[label[text()=\"文字颜色表达式\"]]//i'\nwait_time = 10\n\n    def click(self, by_or_element, value=None, wait_time=10):\n        if value is not None:\n            by = by_or_element\n            logging.info(f\"点击元素：By = {by}, Value = {value}\")\n            try:\n                element = WebDriverWait(self.driver, wait_time).until(\n                    EC.element_to_be_clickable((by, value))\n                )\n            except TimeoutException:\n                logging.warning(f\"❌ 点击超时：元素 {by} = {value} 未在 {wait_time} 秒内变为可点击\")\n                raise TimeoutException(f\"点击失败，找不到元素：{by} = {value}\")\n        else:\n            logging.info(\"点击元素：WebElement 对象\")\n            element = by_or_element\n    \n        try:\n>           element.click()\n\n..\\..\\Pages\\base_page.py:56: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nD:\\Program Files\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:119: in click\n    self._execute(Command.CLICK_ELEMENT)\nD:\\Program Files\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:572: in _execute\n    return self._parent.execute(command, params)\nD:\\Program Files\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:429: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000262B888B8B0>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such window\",\"message\":\"no such window: target window already closed\\\\...ff66a0b64d8+10728]\\\\n\\\\tBaseThreadInitThunk [0x0x7ffff5547374+20]\\\\n\\\\tRtlUserThreadStart [0x0x7ffff5f9cc91+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nE       from unknown error: web view not found\nE         (Session info: chrome=137.0.7151.69)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x7ff66a0c6f65+78965]\nE       \tGetHandleVerifier [0x0x7ff66a0c6fc0+79056]\nE       \t(No symbol) [0x0x7ff669e59dda]\nE       \t(No symbol) [0x0x7ff669e320d1]\nE       \t(No symbol) [0x0x7ff669edff4e]\nE       \t(No symbol) [0x0x7ff669f006cd]\nE       \t(No symbol) [0x0x7ff669ed8443]\nE       \t(No symbol) [0x0x7ff669ea1311]\nE       \t(No symbol) [0x0x7ff669ea20a3]\nE       \tGetHandleVerifier [0x0x7ff66a37e26d+2926461]\nE       \tGetHandleVerifier [0x0x7ff66a378993+2903715]\nE       \tGetHandleVerifier [0x0x7ff66a396aed+3026941]\nE       \tGetHandleVerifier [0x0x7ff66a0e16fe+187406]\nE       \tGetHandleVerifier [0x0x7ff66a0e96ef+220159]\nE       \tGetHandleVerifier [0x0x7ff66a0cfaf4+114692]\nE       \tGetHandleVerifier [0x0x7ff66a0cfca9+115129]\nE       \tGetHandleVerifier [0x0x7ff66a0b64d8+10728]\nE       \tBaseThreadInitThunk [0x0x7ffff5547374+20]\nE       \tRtlUserThreadStart [0x0x7ffff5f9cc91+33]\n\nD:\\Program Files\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: NoSuchWindowException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_system.test_psi.TestPSIPage object at 0x00000262B888A500>\nlogin_to_psi = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"fe0f0e4d2f3199e8534029689fb19d50\")>\n\n    @allure.story(\"添加全部成功\")\n    # @pytest.mark.run(order=1)\n    def test_psi_addall(self, login_to_psi):\n        driver = login_to_psi  # WebDriver 实例\n        psi = PsiPage(driver)  # 用 driver 初始化 PsiPage\n        name = \"添加全部\"\n        list_update = [\n            '//div[label[text()=\"标签\"]]//input',\n            '//div[label[text()=\"显示内容\"]]//input',\n            '//div[label[text()=\"初始值\"]]//input',\n            '//div[label[text()=\"文字颜色表达式\"]]//input',\n            '//div[label[text()=\"背景颜色表达式\"]]//input',\n            '//div[label[text()=\"限制0的数值\"]]//input',\n        ]\n        list_group = [\n            '//div[p[text()=\" 标签: \"]]//input',\n            '//div[p[text()=\" 组化键: \"]]//input',\n            '//div[p[text()=\" 显示空数据: \"]]//input',\n            '//div[@class=\"vxe-modal--box\"]//table[@class=\"vxe-table--body\"]//tr/td[2]//input',\n        ]\n    \n        list_ = [\n            '//div[p[text()=\"PSI名称: \"]]//input',\n            '//div[p[text()=\"最上位行收集条件: \"]]//input',\n            '//div[p[text()=\"筛选方法: \"]]//input',\n            '//div[p[text()=\"PSI名称: \"]]//input',\n        ]\n        psi.add_psi(name=name)\n        psi.click_data(num=1, name=\"表行\")\n        psi.enter_group_setting(name)\n        psi.enter_group_update(name)\n        before_v1 = psi.batch_acquisition_input(list_update)\n        psi.click_button('(//div[@class=\"h-40px flex-justify-end flex-align-items-end b-t-s-d9e3f3\"])[last()]//span[text()=\"确定\"]')\n        before_v2 = psi.batch_acquisition_input(list_group)\n        psi.click_button('(//div[@class=\"h-40px flex-justify-end flex-align-items-end b-t-s-d9e3f3\"])[2]//span[text()=\"确定\"]')\n        before_v3 = psi.batch_acquisition_input(list_)\n        before_input1 = psi.get_find_element_xpath('(//table[@class=\"vxe-table--body\"]//tr/td[2]//input)[1]').get_attribute(\"value\")\n    \n        psi.click_data(num=2, name=\"表列\")\n        psi.enter_group_setting(name)\n>       psi.enter_group_update(name)\n\ntest_psi.py:160: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\Pages\\systemPage\\psi_page.py:84: in enter_group_update\n    self.click_button('//div[label[text()=\"文字颜色表达式\"]]//i')\n..\\..\\Pages\\systemPage\\psi_page.py:23: in click_button\n    self.click(By.XPATH, xpath)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Pages.systemPage.psi_page.PsiPage object at 0x00000262B888AF20>\nby_or_element = 'xpath', value = '//div[label[text()=\"文字颜色表达式\"]]//i'\nwait_time = 10\n\n    def click(self, by_or_element, value=None, wait_time=10):\n        if value is not None:\n            by = by_or_element\n            logging.info(f\"点击元素：By = {by}, Value = {value}\")\n            try:\n                element = WebDriverWait(self.driver, wait_time).until(\n                    EC.element_to_be_clickable((by, value))\n                )\n            except TimeoutException:\n                logging.warning(f\"❌ 点击超时：元素 {by} = {value} 未在 {wait_time} 秒内变为可点击\")\n                raise TimeoutException(f\"点击失败，找不到元素：{by} = {value}\")\n        else:\n            logging.info(\"点击元素：WebElement 对象\")\n            element = by_or_element\n    \n        try:\n            element.click()\n        except ElementClickInterceptedException:\n            logging.warning(\"⚠️ 原生点击被拦截，尝试使用 JS 点击\")\n            self.driver.execute_script(\"arguments[0].click();\", element)\n        except Exception as e:\n            logging.warning(f\"点击失败：{e}\")\n>           raise Exception(f\"点击失败：{e}\")\nE           Exception: 点击失败：Message: no such window: target window already closed\nE           from unknown error: web view not found\nE             (Session info: chrome=137.0.7151.69)\nE           Stacktrace:\nE           \tGetHandleVerifier [0x0x7ff66a0c6f65+78965]\nE           \tGetHandleVerifier [0x0x7ff66a0c6fc0+79056]\nE           \t(No symbol) [0x0x7ff669e59dda]\nE           \t(No symbol) [0x0x7ff669e320d1]\nE           \t(No symbol) [0x0x7ff669edff4e]\nE           \t(No symbol) [0x0x7ff669f006cd]\nE           \t(No symbol) [0x0x7ff669ed8443]\nE           \t(No symbol) [0x0x7ff669ea1311]\nE           \t(No symbol) [0x0x7ff669ea20a3]\nE           \tGetHandleVerifier [0x0x7ff66a37e26d+2926461]\nE           \tGetHandleVerifier [0x0x7ff66a378993+2903715]\nE           \tGetHandleVerifier [0x0x7ff66a396aed+3026941]\nE           \tGetHandleVerifier [0x0x7ff66a0e16fe+187406]\nE           \tGetHandleVerifier [0x0x7ff66a0e96ef+220159]\nE           \tGetHandleVerifier [0x0x7ff66a0cfaf4+114692]\nE           \tGetHandleVerifier [0x0x7ff66a0cfca9+115129]\nE           \tGetHandleVerifier [0x0x7ff66a0b64d8+10728]\nE           \tBaseThreadInitThunk [0x0x7ffff5547374+20]\nE           \tRtlUserThreadStart [0x0x7ffff5f9cc91+33]\n\n..\\..\\Pages\\base_page.py:62: Exception"}, "attachments": [{"name": "log", "source": "56308bcb-cf94-423d-847a-c69a197de2bd-attachment.txt", "type": "text/plain"}], "start": 1755584437587, "stop": 1755584458649, "uuid": "a65090d3-baaf-421e-a782-c5584a59f99c", "historyId": "7041f4f033d22b91956a33f20f2f92b3", "testCaseId": "7041f4f033d22b91956a33f20f2f92b3", "fullName": "Tests.test_system.test_psi.TestPSIPage#test_psi_addall", "labels": [{"name": "story", "value": "添加全部成功"}, {"name": "feature", "value": "PSI设置用例"}, {"name": "tag", "value": "run(order=203)"}, {"name": "parentSuite", "value": "Tests.test_system"}, {"name": "suite", "value": "test_psi"}, {"name": "subSuite", "value": "TestPSIPage"}, {"name": "host", "value": "WIN-20240820MJV"}, {"name": "thread", "value": "56244-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Tests.test_system.test_psi"}]}