{"name": "test_auditlog_defaultsele", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.WebDriverException: Message: unknown error: JavaScript code failed\nfrom unknown command: 'Runtime.evaluate' wasn't found\n  (Session info: chrome=137.0.7151.69)\nStacktrace:\n\tGetHandleVerifier [0x0x7ff64c196f65+78965]\n\tGetHandleVerifier [0x0x7ff64c196fc0+79056]\n\t(No symbol) [0x0x7ff64bf29dda]\n\t(No symbol) [0x0x7ff64bf165d0]\n\t(No symbol) [0x0x7ff64bf14ce9]\n\t(No symbol) [0x0x7ff64bf1559f]\n\t(No symbol) [0x0x7ff64bf40cab]\n\t(No symbol) [0x0x7ff64bf342c0]\n\t(No symbol) [0x0x7ff64bf34162]\n\t(No symbol) [0x0x7ff64bf05d68]\n\t(No symbol) [0x0x7ff64bf03d03]\n\t(No symbol) [0x0x7ff64bfe9011]\n\t(No symbol) [0x0x7ff64bfa866a]\n\t(No symbol) [0x0x7ff64bfd0dbe]\n\t(No symbol) [0x0x7ff64bfa8443]\n\t(No symbol) [0x0x7ff64bf71311]\n\t(No symbol) [0x0x7ff64bf720a3]\n\tGetHandleVerifier [0x0x7ff64c44e26d+2926461]\n\tGetHandleVerifier [0x0x7ff64c448993+2903715]\n\tGetHandleVerifier [0x0x7ff64c466aed+3026941]\n\tGetHandleVerifier [0x0x7ff64c1b16fe+187406]\n\tGetHandleVerifier [0x0x7ff64c1b96ef+220159]\n\tGetHandleVerifier [0x0x7ff64c19faf4+114692]\n\tGetHandleVerifier [0x0x7ff64c19fca9+115129]\n\tGetHandleVerifier [0x0x7ff64c1864d8+10728]\n\tBaseThreadInitThunk [0x0x7fffd9ac7374+20]\n\tRtlUserThreadStart [0x0x7fffdad1cc91+33]", "trace": "@pytest.fixture  # (scope=\"class\")这个参数表示整个测试类共用同一个浏览器，默认一个用例执行一次\n    def login_to_auditlog():\n        \"\"\"初始化并返回 driver\"\"\"\n        date_driver = DateDriver()\n>       driver = create_driver(date_driver.driver_path)\n\ntest_auditLog.py:31: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\Utils\\driver_manager.py:35: in create_driver\n    driver.maximize_window()  # 最大化浏览器窗口\nD:\\Program Files\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:622: in maximize_window\n    self.execute(command, None)\nD:\\Program Files\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:429: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000002BBD15E2530>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"unknown error: JavaScript code failed\\\\nfrom un...ff64c1864d8+10728]\\\\n\\\\tBaseThreadInitThunk [0x0x7fffd9ac7374+20]\\\\n\\\\tRtlUserThreadStart [0x0x7fffdad1cc91+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: unknown error: JavaScript code failed\nE       from unknown command: 'Runtime.evaluate' wasn't found\nE         (Session info: chrome=137.0.7151.69)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x7ff64c196f65+78965]\nE       \tGetHandleVerifier [0x0x7ff64c196fc0+79056]\nE       \t(No symbol) [0x0x7ff64bf29dda]\nE       \t(No symbol) [0x0x7ff64bf165d0]\nE       \t(No symbol) [0x0x7ff64bf14ce9]\nE       \t(No symbol) [0x0x7ff64bf1559f]\nE       \t(No symbol) [0x0x7ff64bf40cab]\nE       \t(No symbol) [0x0x7ff64bf342c0]\nE       \t(No symbol) [0x0x7ff64bf34162]\nE       \t(No symbol) [0x0x7ff64bf05d68]\nE       \t(No symbol) [0x0x7ff64bf03d03]\nE       \t(No symbol) [0x0x7ff64bfe9011]\nE       \t(No symbol) [0x0x7ff64bfa866a]\nE       \t(No symbol) [0x0x7ff64bfd0dbe]\nE       \t(No symbol) [0x0x7ff64bfa8443]\nE       \t(No symbol) [0x0x7ff64bf71311]\nE       \t(No symbol) [0x0x7ff64bf720a3]\nE       \tGetHandleVerifier [0x0x7ff64c44e26d+2926461]\nE       \tGetHandleVerifier [0x0x7ff64c448993+2903715]\nE       \tGetHandleVerifier [0x0x7ff64c466aed+3026941]\nE       \tGetHandleVerifier [0x0x7ff64c1b16fe+187406]\nE       \tGetHandleVerifier [0x0x7ff64c1b96ef+220159]\nE       \tGetHandleVerifier [0x0x7ff64c19faf4+114692]\nE       \tGetHandleVerifier [0x0x7ff64c19fca9+115129]\nE       \tGetHandleVerifier [0x0x7ff64c1864d8+10728]\nE       \tBaseThreadInitThunk [0x0x7fffd9ac7374+20]\nE       \tRtlUserThreadStart [0x0x7fffdad1cc91+33]\n\nD:\\Program Files\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: WebDriverException"}, "start": 1758009979547, "stop": 1758009979547, "uuid": "808d8f98-2259-40a3-b16a-56a01a0fce33", "historyId": "5a6c04cb60c5298a3e308c8cace0fc6b", "testCaseId": "5a6c04cb60c5298a3e308c8cace0fc6b", "fullName": "Tests.test_system.test_auditLog.TestAuditLogPage#test_auditlog_defaultsele", "labels": [{"name": "feature", "value": "审核日志页用例"}, {"name": "story", "value": "点击查询默认显示当天有异常数据"}, {"name": "tag", "value": "run(order=209)"}, {"name": "parentSuite", "value": "Tests.test_system"}, {"name": "suite", "value": "test_auditLog"}, {"name": "subSuite", "value": "TestAuditLogPage"}, {"name": "host", "value": "WIN-20240820MJV"}, {"name": "thread", "value": "9980-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Tests.test_system.test_auditLog"}]}