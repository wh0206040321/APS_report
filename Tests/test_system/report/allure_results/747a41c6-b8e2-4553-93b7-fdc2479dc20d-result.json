{"name": "test_psi_addall", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id: session deleted as the browser has closed the connection\nfrom disconnected: not connected to DevTools\n  (Session info: chrome=137.0.7151.69)\nStacktrace:\n\tGetHandleVerifier [0x0x7ff66a0c6f65+78965]\n\tGetHandleVerifier [0x0x7ff66a0c6fc0+79056]\n\t(No symbol) [0x0x7ff669e59dda]\n\t(No symbol) [0x0x7ff669e45bc5]\n\t(No symbol) [0x0x7ff669e6ac04]\n\t(No symbol) [0x0x7ff669ee0195]\n\t(No symbol) [0x0x7ff669f006cd]\n\t(No symbol) [0x0x7ff669ed8443]\n\t(No symbol) [0x0x7ff669ea1311]\n\t(No symbol) [0x0x7ff669ea20a3]\n\tGetHandleVerifier [0x0x7ff66a37e26d+2926461]\n\tGetHandleVerifier [0x0x7ff66a378993+2903715]\n\tGetHandleVerifier [0x0x7ff66a396aed+3026941]\n\tGetHandleVerifier [0x0x7ff66a0e16fe+187406]\n\tGetHandleVerifier [0x0x7ff66a0e96ef+220159]\n\tGetHandleVerifier [0x0x7ff66a0cfaf4+114692]\n\tGetHandleVerifier [0x0x7ff66a0cfca9+115129]\n\tGetHandleVerifier [0x0x7ff66a0b64d8+10728]\n\tBaseThreadInitThunk [0x0x7ffff5547374+20]\n\tRtlUserThreadStart [0x0x7ffff5f9cc91+33]", "trace": "self = <test_system.test_psi.TestPSIPage object at 0x000001D3DD698FD0>\nlogin_to_psi = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"bc4ff3ba31637d477eb9fa9a720bc653\")>\n\n>   ???\n\ntest_psi.py:133: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\Pages\\systemPage\\psi_page.py:28: in click_button_psi\n    self.click_button(f'//p[text()=\"{name}\"]')\n..\\..\\Pages\\systemPage\\psi_page.py:23: in click_button\n    self.click(By.XPATH, xpath)\n..\\..\\Pages\\base_page.py:45: in click\n    element = WebDriverWait(self.driver, wait_time).until(\nD:\\Program Files\\Python310\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:137: in until\n    value = method(self._driver)\nD:\\Program Files\\Python310\\lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py:633: in _predicate\n    target = driver.find_element(*target)  # grab element at locator\nD:\\Program Files\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:898: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\nD:\\Program Files\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:429: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001D3DD699150>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"invalid session id\",\"message\":\"invalid session id: session deleted as the...ff66a0b64d8+10728]\\\\n\\\\tBaseThreadInitThunk [0x0x7ffff5547374+20]\\\\n\\\\tRtlUserThreadStart [0x0x7ffff5f9cc91+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id: session deleted as the browser has closed the connection\nE       from disconnected: not connected to DevTools\nE         (Session info: chrome=137.0.7151.69)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x7ff66a0c6f65+78965]\nE       \tGetHandleVerifier [0x0x7ff66a0c6fc0+79056]\nE       \t(No symbol) [0x0x7ff669e59dda]\nE       \t(No symbol) [0x0x7ff669e45bc5]\nE       \t(No symbol) [0x0x7ff669e6ac04]\nE       \t(No symbol) [0x0x7ff669ee0195]\nE       \t(No symbol) [0x0x7ff669f006cd]\nE       \t(No symbol) [0x0x7ff669ed8443]\nE       \t(No symbol) [0x0x7ff669ea1311]\nE       \t(No symbol) [0x0x7ff669ea20a3]\nE       \tGetHandleVerifier [0x0x7ff66a37e26d+2926461]\nE       \tGetHandleVerifier [0x0x7ff66a378993+2903715]\nE       \tGetHandleVerifier [0x0x7ff66a396aed+3026941]\nE       \tGetHandleVerifier [0x0x7ff66a0e16fe+187406]\nE       \tGetHandleVerifier [0x0x7ff66a0e96ef+220159]\nE       \tGetHandleVerifier [0x0x7ff66a0cfaf4+114692]\nE       \tGetHandleVerifier [0x0x7ff66a0cfca9+115129]\nE       \tGetHandleVerifier [0x0x7ff66a0b64d8+10728]\nE       \tBaseThreadInitThunk [0x0x7ffff5547374+20]\nE       \tRtlUserThreadStart [0x0x7ffff5f9cc91+33]\n\nD:\\Program Files\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: InvalidSessionIdException"}, "attachments": [{"name": "log", "source": "bbfb53ad-b9b9-4a9d-9ad4-6dfed2eb854c-attachment.txt", "type": "text/plain"}], "start": 1755515506175, "stop": 1755517323723, "uuid": "89f53557-8dd8-4eba-9b7c-95b01e124672", "historyId": "7041f4f033d22b91956a33f20f2f92b3", "testCaseId": "7041f4f033d22b91956a33f20f2f92b3", "fullName": "Tests.test_system.test_psi.TestPSIPage#test_psi_addall", "labels": [{"name": "feature", "value": "PSI设置用例"}, {"name": "story", "value": "添加全部成功"}, {"name": "tag", "value": "run(order=203)"}, {"name": "parentSuite", "value": "Tests.test_system"}, {"name": "suite", "value": "test_psi"}, {"name": "subSuite", "value": "TestPSIPage"}, {"name": "host", "value": "WIN-20240820MJV"}, {"name": "thread", "value": "21088-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Tests.test_system.test_psi"}]}