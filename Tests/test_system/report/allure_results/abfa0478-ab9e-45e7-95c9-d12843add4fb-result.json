{"name": "test_systemSettings_loginicon", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message: 点击失败，找不到元素：xpath = //div[p[text()=\" 登录背景: \"]]//i", "trace": "self = <Pages.systemPage.systemSettings_page.SystemSettingsPage object at 0x000001A8DC8C1A20>\nby_or_element = 'xpath', value = '//div[p[text()=\" 登录背景: \"]]//i', wait_time = 10\n\n    def click(self, by_or_element, value=None, wait_time=10):\n        if value is not None:\n            by = by_or_element\n            logging.info(f\"点击元素：By = {by}, Value = {value}\")\n            try:\n>               element = WebDriverWait(self.driver, wait_time).until(\n                    EC.element_to_be_clickable((by, value))\n                )\n\n..\\..\\Pages\\base_page.py:45: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"40959fc65e091c14d717befab5efa33e\")>\nmethod = <function element_to_be_clickable.<locals>._predicate at 0x000001A8DC80D5A0>\nmessage = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        -----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x7ff640e26f65+78965]\nE       \tGetHandleVerifier [0x0x7ff640e26fc0+79056]\nE       \t(No symbol) [0x0x7ff640bb9dda]\nE       \t(No symbol) [0x0x7ff640c102ea]\nE       \t(No symbol) [0x0x7ff640c1059c]\nE       \t(No symbol) [0x0x7ff640c63f37]\nE       \t(No symbol) [0x0x7ff640c386af]\nE       \t(No symbol) [0x0x7ff640c60dbe]\nE       \t(No symbol) [0x0x7ff640c38443]\nE       \t(No symbol) [0x0x7ff640c01311]\nE       \t(No symbol) [0x0x7ff640c020a3]\nE       \tGetHandleVerifier [0x0x7ff6410de26d+2926461]\nE       \tGetHandleVerifier [0x0x7ff6410d8993+2903715]\nE       \tGetHandleVerifier [0x0x7ff6410f6aed+3026941]\nE       \tGetHandleVerifier [0x0x7ff640e416fe+187406]\nE       \tGetHandleVerifier [0x0x7ff640e496ef+220159]\nE       \tGetHandleVerifier [0x0x7ff640e2faf4+114692]\nE       \tGetHandleVerifier [0x0x7ff640e2fca9+115129]\nE       \tGetHandleVerifier [0x0x7ff640e164d8+10728]\nE       \tBaseThreadInitThunk [0x0x7ffcefb37374+20]\nE       \tRtlUserThreadStart [0x0x7ffcf06bcc91+33]\n\nD:\\Program Files\\Python310\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:146: TimeoutException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_system.test_systemSettings.TestSystemSettingsPage object at 0x000001A8DC8C0D60>\nlogin_to_systemSettings = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"40959fc65e091c14d717befab5efa33e\")>\n\n    @allure.story(\"设置成功登录背景图成功\")\n    # @pytest.mark.run(order=1)\n    def test_systemSettings_loginicon(self, login_to_systemSettings):\n        driver = login_to_systemSettings  # WebDriver 实例\n        settings = SystemSettingsPage(driver)  # 用 driver 初始化 SystemSettingsPage\n>       settings.click_button('//div[p[text()=\" 登录背景: \"]]//i')\n\ntest_systemSettings.py:207: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\Pages\\systemPage\\systemSettings_page.py:24: in click_button\n    self.click(By.XPATH, xpath)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Pages.systemPage.systemSettings_page.SystemSettingsPage object at 0x000001A8DC8C1A20>\nby_or_element = 'xpath', value = '//div[p[text()=\" 登录背景: \"]]//i', wait_time = 10\n\n    def click(self, by_or_element, value=None, wait_time=10):\n        if value is not None:\n            by = by_or_element\n            logging.info(f\"点击元素：By = {by}, Value = {value}\")\n            try:\n                element = WebDriverWait(self.driver, wait_time).until(\n                    EC.element_to_be_clickable((by, value))\n                )\n            except TimeoutException:\n                logging.warning(f\"❌ 点击超时：元素 {by} = {value} 未在 {wait_time} 秒内变为可点击\")\n>               raise TimeoutException(f\"点击失败，找不到元素：{by} = {value}\")\nE               selenium.common.exceptions.TimeoutException: Message: 点击失败，找不到元素：xpath = //div[p[text()=\" 登录背景: \"]]//i\n\n..\\..\\Pages\\base_page.py:50: TimeoutException"}, "attachments": [{"name": "test_systemSettings_loginicon_failure", "source": "8461ff09-2ac4-48e1-b817-51e9b9bf49ad-attachment.png", "type": "image/png"}, {"name": "test_systemSettings_loginicon_source", "source": "03a2a087-5b25-4f6a-ad29-033f3fc20199-attachment.html", "type": "text/html"}, {"name": "log", "source": "bf58d18b-c64a-412c-aa05-f83b33136eb3-attachment.txt", "type": "text/plain"}], "start": 1758882458765, "stop": 1758882468961, "uuid": "f87284ce-28d5-452d-8429-a012de4e96c1", "historyId": "2f17d67525e84360010e7383922c5dc6", "testCaseId": "2f17d67525e84360010e7383922c5dc6", "fullName": "Tests.test_system.test_systemSettings.TestSystemSettingsPage#test_systemSettings_loginicon", "labels": [{"name": "story", "value": "设置成功登录背景图成功"}, {"name": "feature", "value": "系统标识设置页用例"}, {"name": "tag", "value": "run(order=211)"}, {"name": "parentSuite", "value": "Tests.test_system"}, {"name": "suite", "value": "test_systemSettings"}, {"name": "subSuite", "value": "TestSystemSettingsPage"}, {"name": "host", "value": "WIN-20240820MJV"}, {"name": "thread", "value": "28160-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Tests.test_system.test_systemSettings"}]}