{"name": "test_role_cancel", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id: session deleted as the browser has closed the connection\nfrom disconnected: not connected to DevTools\n  (Session info: chrome=137.0.7151.69)\nStacktrace:\n\tGetHandleVerifier [0x0x7ff7bbc26f65+78965]\n\tGetHandleVerifier [0x0x7ff7bbc26fc0+79056]\n\t(No symbol) [0x0x7ff7bb9b9dda]\n\t(No symbol) [0x0x7ff7bb9a5bc5]\n\t(No symbol) [0x0x7ff7bb9cac04]\n\t(No symbol) [0x0x7ff7bba40195]\n\t(No symbol) [0x0x7ff7bba606cd]\n\t(No symbol) [0x0x7ff7bba38443]\n\t(No symbol) [0x0x7ff7bba01311]\n\t(No symbol) [0x0x7ff7bba020a3]\n\tGetHandleVerifier [0x0x7ff7bbede26d+2926461]\n\tGetHandleVerifier [0x0x7ff7bbed8993+2903715]\n\tGetHandleVerifier [0x0x7ff7bbef6aed+3026941]\n\tGetHandleVerifier [0x0x7ff7bbc416fe+187406]\n\tGetHandleVerifier [0x0x7ff7bbc496ef+220159]\n\tGetHandleVerifier [0x0x7ff7bbc2faf4+114692]\n\tGetHandleVerifier [0x0x7ff7bbc2fca9+115129]\n\tGetHandleVerifier [0x0x7ff7bbc164d8+10728]\n\tBaseThreadInitThunk [0x0x7ffae7f27374+20]\n\tRtlUserThreadStart [0x0x7ffae8d3cc91+33]", "trace": "@pytest.fixture  # (scope=\"class\")这个参数表示整个测试类共用同一个浏览器，默认一个用例执行一次\n    def login_to_role():\n        \"\"\"初始化并返回 driver\"\"\"\n        date_driver = DateDriver()\n        driver = create_driver(date_driver.driver_path)\n        driver.implicitly_wait(3)\n    \n        # 初始化登录页面\n        page = LoginPage(driver)  # 初始化登录页面\n        url = date_driver.url\n        print(f\"[INFO] 正在导航到 URL: {url}\")\n        # 尝试访问 URL，捕获连接错误\n        for attempt in range(2):\n            try:\n                page.navigate_to(url)\n                break\n            except WebDriverException as e:\n                capture_screenshot(driver, f\"login_fail_{attempt + 1}\")\n                logging.warning(f\"第 {attempt + 1} 次连接失败: {e}\")\n                driver.refresh()\n                sleep(date_driver.URL_RETRY_WAIT)\n        else:\n            logging.error(\"连接失败多次，测试中止\")\n            safe_quit(driver)\n            raise RuntimeError(\"无法连接到登录页面\")\n    \n>       page.login(date_driver.username, date_driver.password, date_driver.planning)\n\ntest_role.py:49: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\Pages\\itemsPage\\login_page.py:33: in login\n    self.enter_password(password)\n..\\..\\Pages\\itemsPage\\login_page.py:20: in enter_password\n    self.enter_text(By.XPATH, '//input[@placeholder=\"请输入密码\"]', password)\n..\\..\\Pages\\base_page.py:70: in enter_text\n    element.clear()  # 清空文本框\nD:\\Program Files\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:154: in clear\n    self._execute(Command.CLEAR_ELEMENT)\nD:\\Program Files\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:572: in _execute\n    return self._parent.execute(command, params)\nD:\\Program Files\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:429: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000016F8F9DC2B0>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"invalid session id\",\"message\":\"invalid session id: session deleted as the...ff7bbc164d8+10728]\\\\n\\\\tBaseThreadInitThunk [0x0x7ffae7f27374+20]\\\\n\\\\tRtlUserThreadStart [0x0x7ffae8d3cc91+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id: session deleted as the browser has closed the connection\nE       from disconnected: not connected to DevTools\nE         (Session info: chrome=137.0.7151.69)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x7ff7bbc26f65+78965]\nE       \tGetHandleVerifier [0x0x7ff7bbc26fc0+79056]\nE       \t(No symbol) [0x0x7ff7bb9b9dda]\nE       \t(No symbol) [0x0x7ff7bb9a5bc5]\nE       \t(No symbol) [0x0x7ff7bb9cac04]\nE       \t(No symbol) [0x0x7ff7bba40195]\nE       \t(No symbol) [0x0x7ff7bba606cd]\nE       \t(No symbol) [0x0x7ff7bba38443]\nE       \t(No symbol) [0x0x7ff7bba01311]\nE       \t(No symbol) [0x0x7ff7bba020a3]\nE       \tGetHandleVerifier [0x0x7ff7bbede26d+2926461]\nE       \tGetHandleVerifier [0x0x7ff7bbed8993+2903715]\nE       \tGetHandleVerifier [0x0x7ff7bbef6aed+3026941]\nE       \tGetHandleVerifier [0x0x7ff7bbc416fe+187406]\nE       \tGetHandleVerifier [0x0x7ff7bbc496ef+220159]\nE       \tGetHandleVerifier [0x0x7ff7bbc2faf4+114692]\nE       \tGetHandleVerifier [0x0x7ff7bbc2fca9+115129]\nE       \tGetHandleVerifier [0x0x7ff7bbc164d8+10728]\nE       \tBaseThreadInitThunk [0x0x7ffae7f27374+20]\nE       \tRtlUserThreadStart [0x0x7ffae8d3cc91+33]\n\nD:\\Program Files\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: InvalidSessionIdException"}, "start": 1757303662658, "stop": 1757303662658, "uuid": "bc9e9591-2a50-4b1b-b82a-3f5ac81f7017", "historyId": "b3047b0ab65a71fe31a6225da192109d", "testCaseId": "b3047b0ab65a71fe31a6225da192109d", "fullName": "Tests.test_system.test_role.TestRolePage#test_role_cancel", "labels": [{"name": "story", "value": "点击取消不会修改数据"}, {"name": "feature", "value": "角色管理页用例"}, {"name": "tag", "value": "run(order=205)"}, {"name": "parentSuite", "value": "Tests.test_system"}, {"name": "suite", "value": "test_role"}, {"name": "subSuite", "value": "TestRolePage"}, {"name": "host", "value": "WIN-20240820MJV"}, {"name": "thread", "value": "2852-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Tests.test_system.test_role"}]}