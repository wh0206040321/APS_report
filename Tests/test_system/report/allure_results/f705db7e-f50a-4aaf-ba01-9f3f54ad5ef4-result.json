{"name": "test_expression_updatesuccess1", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n\tGetHandleVerifier [0x0x7ff7529c6f65+78965]\n\tGetHandleVerifier [0x0x7ff7529c6fc0+79056]\n\t(No symbol) [0x0x7ff752759dda]\n\t(No symbol) [0x0x7ff7527b02ea]\n\t(No symbol) [0x0x7ff7527b059c]\n\t(No symbol) [0x0x7ff752803f37]\n\t(No symbol) [0x0x7ff7527d86af]\n\t(No symbol) [0x0x7ff752800dbe]\n\t(No symbol) [0x0x7ff7527d8443]\n\t(No symbol) [0x0x7ff7527a1311]\n\t(No symbol) [0x0x7ff7527a20a3]\n\tGetHandleVerifier [0x0x7ff752c7e26d+2926461]\n\tGetHandleVerifier [0x0x7ff752c78993+2903715]\n\tGetHandleVerifier [0x0x7ff752c96aed+3026941]\n\tGetHandleVerifier [0x0x7ff7529e16fe+187406]\n\tGetHandleVerifier [0x0x7ff7529e96ef+220159]\n\tGetHandleVerifier [0x0x7ff7529cfaf4+114692]\n\tGetHandleVerifier [0x0x7ff7529cfca9+115129]\n\tGetHandleVerifier [0x0x7ff7529b64d8+10728]\n\tBaseThreadInitThunk [0x0x7ffeb48c7374+20]\n\tRtlUserThreadStart [0x0x7ffeb67fcc91+33]", "trace": "self = <test_system.test_expression.TestSExpressionPage object at 0x00000197AA49F8B0>\nlogin_to_expression = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"c67c580f7b4760a7f140363c159675d8\")>\n\n    @allure.story(\"修改表达式名称成功\")\n    # @pytest.mark.run(order=1)\n    def test_expression_updatesuccess1(self, login_to_expression):\n        driver = login_to_expression  # WebDriver 实例\n        expression = ExpressionPage(driver)  # 用 driver 初始化 ExpressionPage\n        sleep(1)\n        before_name = '1测试表达式管理1'\n        afert_name = '1测试表达式管理2'\n        expression.select_input_expression(before_name)\n        expression.click_button('//table[@class=\"vxe-table--body\"]//tr[1]/td[2]')\n        expression.click_all_button(\"编辑\")\n        expression.enter_texts('//div[p[text()=\"名称: \"]]//input', afert_name)\n        expression.click_all_button(\"保存\")\n>       message = expression.get_find_message()\n\ntest_expression.py:136: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\Pages\\systemPage\\expression_page.py:35: in get_find_message\n    message = WebDriverWait(self.driver, 10).until(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"c67c580f7b4760a7f140363c159675d8\")>\nmethod = <function visibility_of_element_located.<locals>._predicate at 0x00000197AA46DD80>\nmessage = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        -----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x7ff7529c6f65+78965]\nE       \tGetHandleVerifier [0x0x7ff7529c6fc0+79056]\nE       \t(No symbol) [0x0x7ff752759dda]\nE       \t(No symbol) [0x0x7ff7527b02ea]\nE       \t(No symbol) [0x0x7ff7527b059c]\nE       \t(No symbol) [0x0x7ff752803f37]\nE       \t(No symbol) [0x0x7ff7527d86af]\nE       \t(No symbol) [0x0x7ff752800dbe]\nE       \t(No symbol) [0x0x7ff7527d8443]\nE       \t(No symbol) [0x0x7ff7527a1311]\nE       \t(No symbol) [0x0x7ff7527a20a3]\nE       \tGetHandleVerifier [0x0x7ff752c7e26d+2926461]\nE       \tGetHandleVerifier [0x0x7ff752c78993+2903715]\nE       \tGetHandleVerifier [0x0x7ff752c96aed+3026941]\nE       \tGetHandleVerifier [0x0x7ff7529e16fe+187406]\nE       \tGetHandleVerifier [0x0x7ff7529e96ef+220159]\nE       \tGetHandleVerifier [0x0x7ff7529cfaf4+114692]\nE       \tGetHandleVerifier [0x0x7ff7529cfca9+115129]\nE       \tGetHandleVerifier [0x0x7ff7529b64d8+10728]\nE       \tBaseThreadInitThunk [0x0x7ffeb48c7374+20]\nE       \tRtlUserThreadStart [0x0x7ffeb67fcc91+33]\n\nD:\\Program Files\\Python310\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:146: TimeoutException"}, "attachments": [{"name": "test_expression_updatesuccess1_failure", "source": "3ae5d136-4edf-4670-8987-cc30b09c42ec-attachment.png", "type": "image/png"}, {"name": "test_expression_updatesuccess1_source", "source": "c4adab68-7848-4dd8-ad77-259ab02f8352-attachment.html", "type": "text/html"}, {"name": "log", "source": "1472b383-7fd5-4a35-b0f9-cc7102724b24-attachment.txt", "type": "text/plain"}], "start": 1760176764981, "stop": 1760176777606, "uuid": "5de758b0-1cd9-40e0-85a0-06d06c6a5313", "historyId": "40b9cedd16a24687ef677080254e0516", "testCaseId": "40b9cedd16a24687ef677080254e0516", "fullName": "Tests.test_system.test_expression.TestSExpressionPage#test_expression_updatesuccess1", "labels": [{"name": "feature", "value": "表达式管理页用例"}, {"name": "story", "value": "修改表达式名称成功"}, {"name": "tag", "value": "run(order=212)"}, {"name": "parentSuite", "value": "Tests.test_system"}, {"name": "suite", "value": "test_expression"}, {"name": "subSuite", "value": "TestSExpressionPage"}, {"name": "host", "value": "WIN-20240820MJV"}, {"name": "thread", "value": "22688-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Tests.test_system.test_expression"}]}