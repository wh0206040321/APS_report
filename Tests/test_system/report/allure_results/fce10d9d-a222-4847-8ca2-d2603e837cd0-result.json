{"name": "test_psi_update1", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.InvalidElementStateException: Message: invalid element state\n  (Session info: chrome=137.0.7151.69)\nStacktrace:\n\tGetHandleVerifier [0x0x7ff66a0c6f65+78965]\n\tGetHandleVerifier [0x0x7ff66a0c6fc0+79056]\n\t(No symbol) [0x0x7ff669e59c0c]\n\t(No symbol) [0x0x7ff669ea5747]\n\t(No symbol) [0x0x7ff669ed866a]\n\t(No symbol) [0x0x7ff669ea2b56]\n\t(No symbol) [0x0x7ff669ed8880]\n\t(No symbol) [0x0x7ff669f00dbe]\n\t(No symbol) [0x0x7ff669ed8443]\n\t(No symbol) [0x0x7ff669ea1311]\n\t(No symbol) [0x0x7ff669ea20a3]\n\tGetHandleVerifier [0x0x7ff66a37e26d+2926461]\n\tGetHandleVerifier [0x0x7ff66a378993+2903715]\n\tGetHandleVerifier [0x0x7ff66a396aed+3026941]\n\tGetHandleVerifier [0x0x7ff66a0e16fe+187406]\n\tGetHandleVerifier [0x0x7ff66a0e96ef+220159]\n\tGetHandleVerifier [0x0x7ff66a0cfaf4+114692]\n\tGetHandleVerifier [0x0x7ff66a0cfca9+115129]\n\tGetHandleVerifier [0x0x7ff66a0b64d8+10728]\n\tBaseThreadInitThunk [0x0x7ffff5547374+20]\n\tRtlUserThreadStart [0x0x7ffff5f9cc91+33]", "trace": "self = <test_system.test_psi.TestPSIPage object at 0x000001E7B08218D0>\nlogin_to_psi = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"9d7036cb17df6dc212f353e2ef88a2e6\")>\n\n    @allure.story(\"修改表行，表列，数据内容名称成功\")\n    # @pytest.mark.run(order=1)\n    def test_psi_update1(self, login_to_psi):\n        driver = login_to_psi  # WebDriver 实例\n        psi = PsiPage(driver)  # 用 driver 初始化 PsiPage\n        name = \"添加全部\"\n        psi.click_button(f'//table[@class=\"vxe-table--body\"]//tr/td[2]//span[text()=\"{name}\"]')\n        psi.click_button_psi(\"编辑\")\n>       psi.enter_texts('(//table[@class=\"vxe-table--body\"]//tr/td[2]//input)[1]', \"1\")\n\ntest_psi.py:250: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\Pages\\systemPage\\psi_page.py:19: in enter_texts\n    self.enter_text(By.XPATH, xpath, text)\n..\\..\\Pages\\base_page.py:70: in enter_text\n    element.clear()  # 清空文本框\nD:\\Program Files\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:154: in clear\n    self._execute(Command.CLEAR_ELEMENT)\nD:\\Program Files\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:572: in _execute\n    return self._parent.execute(command, params)\nD:\\Program Files\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:429: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001E7B08217E0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"invalid element state\",\"message\":\"invalid element state\\\\n  (Session info...ff66a0b64d8+10728]\\\\n\\\\tBaseThreadInitThunk [0x0x7ffff5547374+20]\\\\n\\\\tRtlUserThreadStart [0x0x7ffff5f9cc91+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidElementStateException: Message: invalid element state\nE         (Session info: chrome=137.0.7151.69)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x7ff66a0c6f65+78965]\nE       \tGetHandleVerifier [0x0x7ff66a0c6fc0+79056]\nE       \t(No symbol) [0x0x7ff669e59c0c]\nE       \t(No symbol) [0x0x7ff669ea5747]\nE       \t(No symbol) [0x0x7ff669ed866a]\nE       \t(No symbol) [0x0x7ff669ea2b56]\nE       \t(No symbol) [0x0x7ff669ed8880]\nE       \t(No symbol) [0x0x7ff669f00dbe]\nE       \t(No symbol) [0x0x7ff669ed8443]\nE       \t(No symbol) [0x0x7ff669ea1311]\nE       \t(No symbol) [0x0x7ff669ea20a3]\nE       \tGetHandleVerifier [0x0x7ff66a37e26d+2926461]\nE       \tGetHandleVerifier [0x0x7ff66a378993+2903715]\nE       \tGetHandleVerifier [0x0x7ff66a396aed+3026941]\nE       \tGetHandleVerifier [0x0x7ff66a0e16fe+187406]\nE       \tGetHandleVerifier [0x0x7ff66a0e96ef+220159]\nE       \tGetHandleVerifier [0x0x7ff66a0cfaf4+114692]\nE       \tGetHandleVerifier [0x0x7ff66a0cfca9+115129]\nE       \tGetHandleVerifier [0x0x7ff66a0b64d8+10728]\nE       \tBaseThreadInitThunk [0x0x7ffff5547374+20]\nE       \tRtlUserThreadStart [0x0x7ffff5f9cc91+33]\n\nD:\\Program Files\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: InvalidElementStateException"}, "attachments": [{"name": "test_psi_update1_failure", "source": "3f97dc68-8f82-46c4-b3e4-f05116fe9e50-attachment.png", "type": "image/png"}, {"name": "test_psi_update1_source", "source": "0a930066-f38c-483b-8ad7-4a97128c5cc7-attachment.html", "type": "text/html"}, {"name": "log", "source": "4279bdcd-f2c4-48e5-b6ba-8dd5b0dc8a42-attachment.txt", "type": "text/plain"}], "start": 1755595279531, "stop": 1755595287549, "uuid": "ce3dd66d-14f1-423a-938d-dfdaa6185c70", "historyId": "e384c4ceb42df18e02b2dbabb1f56014", "testCaseId": "e384c4ceb42df18e02b2dbabb1f56014", "fullName": "Tests.test_system.test_psi.TestPSIPage#test_psi_update1", "labels": [{"name": "feature", "value": "PSI设置用例"}, {"name": "story", "value": "修改表行，表列，数据内容名称成功"}, {"name": "tag", "value": "run(order=203)"}, {"name": "parentSuite", "value": "Tests.test_system"}, {"name": "suite", "value": "test_psi"}, {"name": "subSuite", "value": "TestPSIPage"}, {"name": "host", "value": "WIN-20240820MJV"}, {"name": "thread", "value": "22352-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Tests.test_system.test_psi"}]}