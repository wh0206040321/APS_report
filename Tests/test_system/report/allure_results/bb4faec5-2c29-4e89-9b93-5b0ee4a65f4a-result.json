{"name": "test_affairs_template_customizefail1", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: stale element not found in the current frame\n  (Session info: chrome=137.0.7151.69); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#stale-element-reference-exception\nStacktrace:\n\tGetHandleVerifier [0x0x7ff79a536f65+78965]\n\tGetHandleVerifier [0x0x7ff79a536fc0+79056]\n\t(No symbol) [0x0x7ff79a2c9dda]\n\t(No symbol) [0x0x7ff79a2d17c1]\n\t(No symbol) [0x0x7ff79a2d482c]\n\t(No symbol) [0x0x7ff79a2d48ff]\n\t(No symbol) [0x0x7ff79a3224ed]\n\t(No symbol) [0x0x7ff79a31564e]\n\t(No symbol) [0x0x7ff79a34866a]\n\t(No symbol) [0x0x7ff79a312b56]\n\t(No symbol) [0x0x7ff79a348880]\n\t(No symbol) [0x0x7ff79a370dbe]\n\t(No symbol) [0x0x7ff79a348443]\n\t(No symbol) [0x0x7ff79a311311]\n\t(No symbol) [0x0x7ff79a3120a3]\n\tGetHandleVerifier [0x0x7ff79a7ee26d+2926461]\n\tGetHandleVerifier [0x0x7ff79a7e8993+2903715]\n\tGetHandleVerifier [0x0x7ff79a806aed+3026941]\n\tGetHandleVerifier [0x0x7ff79a5516fe+187406]\n\tGetHandleVerifier [0x0x7ff79a5596ef+220159]\n\tGetHandleVerifier [0x0x7ff79a53faf4+114692]\n\tGetHandleVerifier [0x0x7ff79a53fca9+115129]\n\tGetHandleVerifier [0x0x7ff79a5264d8+10728]\n\tBaseThreadInitThunk [0x0x7ffee1537374+20]\n\tRtlUserThreadStart [0x0x7ffee1a7cc91+33]", "trace": "self = <test_system.test_affairs.TestAffairsPage object at 0x000001E2D4FBB400>\nlogin_to_affairs = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"1dc271d4861cb688ec4f0f7704cb2cc3\")>\n\n    @allure.story(\"事务模版-新增模版失败，事务类型为服务，填写自定义失败- 自定义值需以http或https开头\")\n    # @pytest.mark.run(order=1)\n    def test_affairs_template_customizefail1(self, login_to_affairs):\n        driver = login_to_affairs  # WebDriver 实例\n        affairs = AffairsPage(driver)  # 用 driver 初始化 AffairsPage\n        name = \"测试事务模版2\"\n        type = \"服务\"\n        affairs.click_add_affairs(name=name, type=type, button=False)\n        affairs.click_button('//div[text()=\" 自定义 \"]')\n>       affairs.enter_texts('//div[p[text()=\"自定义服务:\"]]//input', \"htt1\")\n\ntest_affairs.py:186: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\Pages\\systemPage\\affairs_page.py:19: in enter_texts\n    self.enter_text(By.XPATH, xpath, text)\n..\\..\\Pages\\base_page.py:70: in enter_text\n    element.clear()  # 清空文本框\nD:\\Program Files\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:154: in clear\n    self._execute(Command.CLEAR_ELEMENT)\nD:\\Program Files\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:572: in _execute\n    return self._parent.execute(command, params)\nD:\\Program Files\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:429: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001E2D4FF9510>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"stale element reference\",\"message\":\"stale element reference: stale elemen...ff79a5264d8+10728]\\\\n\\\\tBaseThreadInitThunk [0x0x7ffee1537374+20]\\\\n\\\\tRtlUserThreadStart [0x0x7ffee1a7cc91+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: stale element not found in the current frame\nE         (Session info: chrome=137.0.7151.69); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#stale-element-reference-exception\nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x7ff79a536f65+78965]\nE       \tGetHandleVerifier [0x0x7ff79a536fc0+79056]\nE       \t(No symbol) [0x0x7ff79a2c9dda]\nE       \t(No symbol) [0x0x7ff79a2d17c1]\nE       \t(No symbol) [0x0x7ff79a2d482c]\nE       \t(No symbol) [0x0x7ff79a2d48ff]\nE       \t(No symbol) [0x0x7ff79a3224ed]\nE       \t(No symbol) [0x0x7ff79a31564e]\nE       \t(No symbol) [0x0x7ff79a34866a]\nE       \t(No symbol) [0x0x7ff79a312b56]\nE       \t(No symbol) [0x0x7ff79a348880]\nE       \t(No symbol) [0x0x7ff79a370dbe]\nE       \t(No symbol) [0x0x7ff79a348443]\nE       \t(No symbol) [0x0x7ff79a311311]\nE       \t(No symbol) [0x0x7ff79a3120a3]\nE       \tGetHandleVerifier [0x0x7ff79a7ee26d+2926461]\nE       \tGetHandleVerifier [0x0x7ff79a7e8993+2903715]\nE       \tGetHandleVerifier [0x0x7ff79a806aed+3026941]\nE       \tGetHandleVerifier [0x0x7ff79a5516fe+187406]\nE       \tGetHandleVerifier [0x0x7ff79a5596ef+220159]\nE       \tGetHandleVerifier [0x0x7ff79a53faf4+114692]\nE       \tGetHandleVerifier [0x0x7ff79a53fca9+115129]\nE       \tGetHandleVerifier [0x0x7ff79a5264d8+10728]\nE       \tBaseThreadInitThunk [0x0x7ffee1537374+20]\nE       \tRtlUserThreadStart [0x0x7ffee1a7cc91+33]\n\nD:\\Program Files\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: StaleElementReferenceException"}, "attachments": [{"name": "test_affairs_template_customizefail1_failure", "source": "8db8aaa3-0351-4161-9f4e-1a24aaa3d6cf-attachment.png", "type": "image/png"}, {"name": "test_affairs_template_customizefail1_source", "source": "06dde780-d1dd-4e64-8425-fc6c371cc4c0-attachment.html", "type": "text/html"}, {"name": "log", "source": "27311822-1eec-406c-a5de-a70a50af739b-attachment.txt", "type": "text/plain"}], "start": 1761117169827, "stop": 1761117171946, "uuid": "729dd1fb-1463-46a5-9804-435a4709e926", "historyId": "be55fc0f187bd9c40ece080ae19030a1", "testCaseId": "be55fc0f187bd9c40ece080ae19030a1", "fullName": "Tests.test_system.test_affairs.TestAffairsPage#test_affairs_template_customizefail1", "labels": [{"name": "story", "value": "事务模版-新增模版失败，事务类型为服务，填写自定义失败- 自定义值需以http或https开头"}, {"name": "feature", "value": "事务管理页用例"}, {"name": "tag", "value": "run(order=202)"}, {"name": "parentSuite", "value": "Tests.test_system"}, {"name": "suite", "value": "test_affairs"}, {"name": "subSuite", "value": "TestAffairsPage"}, {"name": "host", "value": "WIN-20240820MJV"}, {"name": "thread", "value": "13192-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Tests.test_system.test_affairs"}]}