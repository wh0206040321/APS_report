{"name": "test_user_verify10", "status": "broken", "statusDetails": {"message": "Exception: 获取输入框值时发生错误（XPath列表第1个）: Message: invalid selector: The result of the xpath expression \"/\" is: [object HTMLDocument]. It should be an element.\n  (Session info: chrome=137.0.7151.69); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#invalid-selector-exception\nStacktrace:\n\tGetHandleVerifier [0x0x7ff7f9a16f65+78965]\n\tGetHandleVerifier [0x0x7ff7f9a16fc0+79056]\n\t(No symbol) [0x0x7ff7f97a9dda]\n\t(No symbol) [0x0x7ff7f97b17c1]\n\t(No symbol) [0x0x7ff7f97b482c]\n\t(No symbol) [0x0x7ff7f97b48ff]\n\t(No symbol) [0x0x7ff7f97ffb97]\n\t(No symbol) [0x0x7ff7f980059c]\n\t(No symbol) [0x0x7ff7f9853f37]\n\t(No symbol) [0x0x7ff7f98286af]\n\t(No symbol) [0x0x7ff7f9850dbe]\n\t(No symbol) [0x0x7ff7f9828443]\n\t(No symbol) [0x0x7ff7f97f1311]\n\t(No symbol) [0x0x7ff7f97f20a3]\n\tGetHandleVerifier [0x0x7ff7f9cce26d+2926461]\n\tGetHandleVerifier [0x0x7ff7f9cc8993+2903715]\n\tGetHandleVerifier [0x0x7ff7f9ce6aed+3026941]\n\tGetHandleVerifier [0x0x7ff7f9a316fe+187406]\n\tGetHandleVerifier [0x0x7ff7f9a396ef+220159]\n\tGetHandleVerifier [0x0x7ff7f9a1faf4+114692]\n\tGetHandleVerifier [0x0x7ff7f9a1fca9+115129]\n\tGetHandleVerifier [0x0x7ff7f9a064d8+10728]\n\tBaseThreadInitThunk [0x0x7ffae7f27374+20]\n\tRtlUserThreadStart [0x0x7ffae8d3cc91+33]", "trace": "self = <Pages.itemsPage.adds_page.AddsPages object at 0x000001FD0926E9B0>\nxpath_list = '//div[label[text()=\"确认密码\"]]//input', text_value = ''\n\n    def get_border_color(self, xpath_list=[], text_value=\"\"):\n        \"\"\"获取边框颜色\"\"\"\n        values = []\n        for index, xpath in enumerate(xpath_list, 1):\n            try:\n>               value = self.get_find_element_xpath(xpath).value_of_css_property(\"border-color\")\n\n..\\..\\Pages\\itemsPage\\adds_page.py:148: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\Pages\\itemsPage\\adds_page.py:27: in get_find_element_xpath\n    return self.find_element(By.XPATH, xpath)\n..\\..\\Pages\\base_page.py:28: in find_element\n    return WebDriverWait(self.driver, wait_time).until(\nD:\\Program Files\\Python310\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:137: in until\n    value = method(self._driver)\nD:\\Program Files\\Python310\\lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py:110: in _predicate\n    return driver.find_element(*locator)\nD:\\Program Files\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:898: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\nD:\\Program Files\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:429: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001FD0926E260>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"invalid selector\",\"message\":\"invalid selector: The result of the xpath ex...ff7f9a064d8+10728]\\\\n\\\\tBaseThreadInitThunk [0x0x7ffae7f27374+20]\\\\n\\\\tRtlUserThreadStart [0x0x7ffae8d3cc91+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidSelectorException: Message: invalid selector: The result of the xpath expression \"/\" is: [object HTMLDocument]. It should be an element.\nE         (Session info: chrome=137.0.7151.69); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#invalid-selector-exception\nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x7ff7f9a16f65+78965]\nE       \tGetHandleVerifier [0x0x7ff7f9a16fc0+79056]\nE       \t(No symbol) [0x0x7ff7f97a9dda]\nE       \t(No symbol) [0x0x7ff7f97b17c1]\nE       \t(No symbol) [0x0x7ff7f97b482c]\nE       \t(No symbol) [0x0x7ff7f97b48ff]\nE       \t(No symbol) [0x0x7ff7f97ffb97]\nE       \t(No symbol) [0x0x7ff7f980059c]\nE       \t(No symbol) [0x0x7ff7f9853f37]\nE       \t(No symbol) [0x0x7ff7f98286af]\nE       \t(No symbol) [0x0x7ff7f9850dbe]\nE       \t(No symbol) [0x0x7ff7f9828443]\nE       \t(No symbol) [0x0x7ff7f97f1311]\nE       \t(No symbol) [0x0x7ff7f97f20a3]\nE       \tGetHandleVerifier [0x0x7ff7f9cce26d+2926461]\nE       \tGetHandleVerifier [0x0x7ff7f9cc8993+2903715]\nE       \tGetHandleVerifier [0x0x7ff7f9ce6aed+3026941]\nE       \tGetHandleVerifier [0x0x7ff7f9a316fe+187406]\nE       \tGetHandleVerifier [0x0x7ff7f9a396ef+220159]\nE       \tGetHandleVerifier [0x0x7ff7f9a1faf4+114692]\nE       \tGetHandleVerifier [0x0x7ff7f9a1fca9+115129]\nE       \tGetHandleVerifier [0x0x7ff7f9a064d8+10728]\nE       \tBaseThreadInitThunk [0x0x7ffae7f27374+20]\nE       \tRtlUserThreadStart [0x0x7ffae8d3cc91+33]\n\nD:\\Program Files\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: InvalidSelectorException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_system.test_userRole.TestUserRolePage object at 0x000001FD0926DBA0>\nlogin_to_userrole = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"fda9e87a5f4b188fe5d8f7f3e9b58028\")>\n\n    @allure.story(\"校验密码和确认密码不一致\")\n    # @pytest.mark.run(order=1)\n    def test_user_verify10(self, login_to_userrole):\n        driver = login_to_userrole  # WebDriver 实例\n        user = UserRolePage(driver)  # 用 driver 初始化 UserRolePage\n        password = [\"Qw123456\", \"Qw123446\"]\n        add = AddsPages(driver)\n        list_ = [\n            '//div[label[text()=\"密码\"]]//input',\n            '//div[label[text()=\"确认密码\"]]//input',\n        ]\n        user.click_all_button(\"新增\")\n        user.enter_texts(list_[0], password[0])\n        user.enter_texts(list_[1], password[1])\n        user.click_button('//div[label[text()=\"用户名称\"]]//input')\n        sleep(0.5)\n        verify2 = user.get_verify_text(\"确认密码\")\n>       value_list = add.get_border_color(list_[1])\n\ntest_userRole.py:419: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Pages.itemsPage.adds_page.AddsPages object at 0x000001FD0926E9B0>\nxpath_list = '//div[label[text()=\"确认密码\"]]//input', text_value = ''\n\n    def get_border_color(self, xpath_list=[], text_value=\"\"):\n        \"\"\"获取边框颜色\"\"\"\n        values = []\n        for index, xpath in enumerate(xpath_list, 1):\n            try:\n                value = self.get_find_element_xpath(xpath).value_of_css_property(\"border-color\")\n                values.append(value)\n    \n            except TimeoutException:\n                raise NoSuchElementException(\n                    f\"元素未找到（XPath列表第{index}个）: {xpath}\"\n                )\n            except Exception as e:\n>               raise Exception(\n                    f\"获取输入框值时发生错误（XPath列表第{index}个）: {str(e)}\"\n                )\nE               Exception: 获取输入框值时发生错误（XPath列表第1个）: Message: invalid selector: The result of the xpath expression \"/\" is: [object HTMLDocument]. It should be an element.\nE                 (Session info: chrome=137.0.7151.69); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#invalid-selector-exception\nE               Stacktrace:\nE               \tGetHandleVerifier [0x0x7ff7f9a16f65+78965]\nE               \tGetHandleVerifier [0x0x7ff7f9a16fc0+79056]\nE               \t(No symbol) [0x0x7ff7f97a9dda]\nE               \t(No symbol) [0x0x7ff7f97b17c1]\nE               \t(No symbol) [0x0x7ff7f97b482c]\nE               \t(No symbol) [0x0x7ff7f97b48ff]\nE               \t(No symbol) [0x0x7ff7f97ffb97]\nE               \t(No symbol) [0x0x7ff7f980059c]\nE               \t(No symbol) [0x0x7ff7f9853f37]\nE               \t(No symbol) [0x0x7ff7f98286af]\nE               \t(No symbol) [0x0x7ff7f9850dbe]\nE               \t(No symbol) [0x0x7ff7f9828443]\nE               \t(No symbol) [0x0x7ff7f97f1311]\nE               \t(No symbol) [0x0x7ff7f97f20a3]\nE               \tGetHandleVerifier [0x0x7ff7f9cce26d+2926461]\nE               \tGetHandleVerifier [0x0x7ff7f9cc8993+2903715]\nE               \tGetHandleVerifier [0x0x7ff7f9ce6aed+3026941]\nE               \tGetHandleVerifier [0x0x7ff7f9a316fe+187406]\nE               \tGetHandleVerifier [0x0x7ff7f9a396ef+220159]\nE               \tGetHandleVerifier [0x0x7ff7f9a1faf4+114692]\nE               \tGetHandleVerifier [0x0x7ff7f9a1fca9+115129]\nE               \tGetHandleVerifier [0x0x7ff7f9a064d8+10728]\nE               \tBaseThreadInitThunk [0x0x7ffae7f27374+20]\nE               \tRtlUserThreadStart [0x0x7ffae8d3cc91+33]\n\n..\\..\\Pages\\itemsPage\\adds_page.py:156: Exception"}, "attachments": [{"name": "test_user_verify10_failure", "source": "b1ac3c98-d5b0-48a2-aeb1-8ba474ae52ec-attachment.png", "type": "image/png"}, {"name": "test_user_verify10_source", "source": "6b9e605a-e661-43f9-bb8e-e546019bc614-attachment.html", "type": "text/html"}, {"name": "log", "source": "72cc0c88-0d44-48f2-beda-e304c7290703-attachment.txt", "type": "text/plain"}], "start": 1757324656041, "stop": 1757324658721, "uuid": "0f439e31-8eaf-4a93-b7b9-eec04c1381a0", "historyId": "c3d2d7e99d3817dd16a87dff0781ef22", "testCaseId": "c3d2d7e99d3817dd16a87dff0781ef22", "fullName": "Tests.test_system.test_userRole.TestUserRolePage#test_user_verify10", "labels": [{"name": "story", "value": "校验密码和确认密码不一致"}, {"name": "feature", "value": "用户权限管理页用例"}, {"name": "tag", "value": "run(order=206)"}, {"name": "parentSuite", "value": "Tests.test_system"}, {"name": "suite", "value": "test_userRole"}, {"name": "subSuite", "value": "TestUserRolePage"}, {"name": "host", "value": "WIN-20240820MJV"}, {"name": "thread", "value": "12804-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Tests.test_system.test_userRole"}]}