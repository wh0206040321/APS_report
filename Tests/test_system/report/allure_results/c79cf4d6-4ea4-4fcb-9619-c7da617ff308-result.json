{"name": "test_unit_upload", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message:", "trace": "self = <test_system.test_planUnit.TestPlanUnitPage object at 0x0000019F7F8DC370>\nlogin_to_planUnit = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"614f8a482891f153d6a535c2e6452f4e\")>\n\n    @allure.story(\"上传成功\")\n    # @pytest.mark.run(order=1)\n    def test_unit_upload(self, login_to_planUnit):\n        driver = login_to_planUnit  # WebDriver 实例\n        unit = PlanUnitPage(driver)  # 用 driver 初始化 PlanUnitPage\n        name = \"1测试A\"\n        unit.select_input(name)\n        unit.click_button(f'//table[@class=\"vxe-table--body\"]//tr/td[2]//span[text()=\"{name}\"]')\n        unit.click_all_button(\"上传\")\n    \n        # 清理 .crdownload 文件，避免上传未完成的文件\n        download_path = os.path.abspath(\"downloads\")\n        for f in os.listdir(download_path):\n            if f.endswith(\".crdownload\"):\n                os.remove(os.path.join(download_path, f))\n    \n        sleep(3)\n        # 1. 准备上传文件路径\n        upload_file = os.path.abspath(f\"downloads/{name}.km\")  # 确保文件存在\n        assert os.path.exists(upload_file), \"上传文件不存在\"\n    \n        # 2. 定位上传控件并执行上传\n>       unit.upload_file(upload_file)\n\ntest_planUnit.py:734: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\Pages\\systemPage\\planUnit_page.py:116: in upload_file\n    self.enter_texts('(//input[@type=\"file\"])[2]', file_path)\n..\\..\\Pages\\systemPage\\planUnit_page.py:20: in enter_texts\n    self.enter_text(By.XPATH, xpath, text)\n..\\..\\Pages\\base_page.py:66: in enter_text\n    element = WebDriverWait(self.driver, wait_time).until(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"614f8a482891f153d6a535c2e6452f4e\")>\nmethod = <function visibility_of_element_located.<locals>._predicate at 0x0000019F7F704D30>\nmessage = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        -----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\nD:\\Program Files\\Python310\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:146: TimeoutException"}, "attachments": [{"name": "test_unit_upload_failure", "source": "6bf48a1b-fca1-4c92-8c63-6888540bc0f8-attachment.png", "type": "image/png"}, {"name": "test_unit_upload_source", "source": "d22aeaab-cffd-4759-8e8f-33da7cfd5437-attachment.html", "type": "text/html"}, {"name": "log", "source": "485197d8-1522-4d15-ba2b-01d52f8c4c0b-attachment.txt", "type": "text/plain"}], "start": 1756885839519, "stop": 1756885854379, "uuid": "320500dd-db53-4b9c-b14b-5b541fbc9bc6", "historyId": "de5e3b6f02da579aea8ce19dd5882749", "testCaseId": "de5e3b6f02da579aea8ce19dd5882749", "fullName": "Tests.test_system.test_planUnit.TestPlanUnitPage#test_unit_upload", "labels": [{"name": "story", "value": "上传成功"}, {"name": "feature", "value": "计划单元页用例"}, {"name": "tag", "value": "run(order=204)"}, {"name": "parentSuite", "value": "Tests.test_system"}, {"name": "suite", "value": "test_planUnit"}, {"name": "subSuite", "value": "TestPlanUnitPage"}, {"name": "host", "value": "WIN-20240820MJV"}, {"name": "thread", "value": "308-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Tests.test_system.test_planUnit"}]}