{"name": "test_auditlog_defaultsele", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.InvalidArgumentException: Message: invalid argument: 'value' must be a string\n  (Session info: chrome=137.0.7151.69)\nStacktrace:\n\tGetHandleVerifier [0x0x7ff64c196f65+78965]\n\tGetHandleVerifier [0x0x7ff64c196fc0+79056]\n\t(No symbol) [0x0x7ff64bf29dda]\n\t(No symbol) [0x0x7ff64bf800b2]\n\t(No symbol) [0x0x7ff64bf8059c]\n\t(No symbol) [0x0x7ff64bfd3f67]\n\t(No symbol) [0x0x7ff64bfa86af]\n\t(No symbol) [0x0x7ff64bfd0dbe]\n\t(No symbol) [0x0x7ff64bfa8443]\n\t(No symbol) [0x0x7ff64bf71311]\n\t(No symbol) [0x0x7ff64bf720a3]\n\tGetHandleVerifier [0x0x7ff64c44e26d+2926461]\n\tGetHandleVerifier [0x0x7ff64c448993+2903715]\n\tGetHandleVerifier [0x0x7ff64c466aed+3026941]\n\tGetHandleVerifier [0x0x7ff64c1b16fe+187406]\n\tGetHandleVerifier [0x0x7ff64c1b96ef+220159]\n\tGetHandleVerifier [0x0x7ff64c19faf4+114692]\n\tGetHandleVerifier [0x0x7ff64c19fca9+115129]\n\tGetHandleVerifier [0x0x7ff64c1864d8+10728]\n\tBaseThreadInitThunk [0x0x7fffd9ac7374+20]\n\tRtlUserThreadStart [0x0x7fffdad1cc91+33]", "trace": "self = <test_system.test_auditLog.TestAuditLogPage object at 0x000001C4DA7B3A30>\nlogin_to_auditlog = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"67a552a8053029520194183e966384a8\")>\n\n    @allure.story(\"点击查询默认显示当天有异常数据\")\n    # @pytest.mark.run(order=1)\n    def test_auditlog_defaultsele(self, login_to_auditlog):\n        driver = login_to_auditlog  # WebDriver 实例\n        audit = AuditLogPage(driver)  # 用 driver 初始化 AuditLogPage\n        today = datetime.now().date()\n        # 格式化为年/月/日\n        formatted_date = today.strftime(\"%Y/%m/%d\")\n        audit.click_all_button(\"查询\")\n        abnormal = audit.finds_elements(By.XPATH,'//table[@class=\"vxe-table--body\"]//tr/td[6]')\n        time_ = audit.finds_elements(By.XPATH,'//table[@class=\"vxe-table--body\"]//tr/td[8]')\n>       abnormal_list = audit.loop_judgment(abnormal)\n\ntest_auditLog.py:90: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\Pages\\systemPage\\auditLog_page.py:89: in loop_judgment\n    eles = self.finds_elements(By.XPATH, xpath)\n..\\..\\Pages\\base_page.py:38: in finds_elements\n    return self.driver.find_elements(by, value)\nD:\\Program Files\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:936: in find_elements\n    return self.execute(Command.FIND_ELEMENTS, {\"using\": by, \"value\": value})[\"value\"] or []\nD:\\Program Files\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:429: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001C4DA7B3B50>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"invalid argument\",\"message\":\"invalid argument: \\'value\\' must be a string...ff64c1864d8+10728]\\\\n\\\\tBaseThreadInitThunk [0x0x7fffd9ac7374+20]\\\\n\\\\tRtlUserThreadStart [0x0x7fffdad1cc91+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidArgumentException: Message: invalid argument: 'value' must be a string\nE         (Session info: chrome=137.0.7151.69)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x7ff64c196f65+78965]\nE       \tGetHandleVerifier [0x0x7ff64c196fc0+79056]\nE       \t(No symbol) [0x0x7ff64bf29dda]\nE       \t(No symbol) [0x0x7ff64bf800b2]\nE       \t(No symbol) [0x0x7ff64bf8059c]\nE       \t(No symbol) [0x0x7ff64bfd3f67]\nE       \t(No symbol) [0x0x7ff64bfa86af]\nE       \t(No symbol) [0x0x7ff64bfd0dbe]\nE       \t(No symbol) [0x0x7ff64bfa8443]\nE       \t(No symbol) [0x0x7ff64bf71311]\nE       \t(No symbol) [0x0x7ff64bf720a3]\nE       \tGetHandleVerifier [0x0x7ff64c44e26d+2926461]\nE       \tGetHandleVerifier [0x0x7ff64c448993+2903715]\nE       \tGetHandleVerifier [0x0x7ff64c466aed+3026941]\nE       \tGetHandleVerifier [0x0x7ff64c1b16fe+187406]\nE       \tGetHandleVerifier [0x0x7ff64c1b96ef+220159]\nE       \tGetHandleVerifier [0x0x7ff64c19faf4+114692]\nE       \tGetHandleVerifier [0x0x7ff64c19fca9+115129]\nE       \tGetHandleVerifier [0x0x7ff64c1864d8+10728]\nE       \tBaseThreadInitThunk [0x0x7fffd9ac7374+20]\nE       \tRtlUserThreadStart [0x0x7fffdad1cc91+33]\n\nD:\\Program Files\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: InvalidArgumentException"}, "attachments": [{"name": "test_auditlog_defaultsele_failure", "source": "5c592544-8b7d-4340-adfe-b346b179082b-attachment.png", "type": "image/png"}, {"name": "test_auditlog_defaultsele_source", "source": "470d9afd-70a0-4db9-81db-0ca4ee0bab54-attachment.html", "type": "text/html"}, {"name": "log", "source": "ac735d3e-6605-403d-8204-3f205c231baa-attachment.txt", "type": "text/plain"}], "start": 1758009996423, "stop": 1758009997593, "uuid": "1963f155-8459-4c29-b018-13ef9c3a9189", "historyId": "5a6c04cb60c5298a3e308c8cace0fc6b", "testCaseId": "5a6c04cb60c5298a3e308c8cace0fc6b", "fullName": "Tests.test_system.test_auditLog.TestAuditLogPage#test_auditlog_defaultsele", "labels": [{"name": "story", "value": "点击查询默认显示当天有异常数据"}, {"name": "feature", "value": "审核日志页用例"}, {"name": "tag", "value": "run(order=209)"}, {"name": "parentSuite", "value": "Tests.test_system"}, {"name": "suite", "value": "test_auditLog"}, {"name": "subSuite", "value": "TestAuditLogPage"}, {"name": "host", "value": "WIN-20240820MJV"}, {"name": "thread", "value": "7144-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Tests.test_system.test_auditLog"}]}