{"name": "test_auditlog_defaultsele3", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: stale element not found in the current frame\n  (Session info: chrome=137.0.7151.69); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#stale-element-reference-exception\nStacktrace:\n\tGetHandleVerifier [0x0x7ff73ad06f65+78965]\n\tGetHandleVerifier [0x0x7ff73ad06fc0+79056]\n\t(No symbol) [0x0x7ff73aa99dda]\n\t(No symbol) [0x0x7ff73aaa17c1]\n\t(No symbol) [0x0x7ff73aaa482c]\n\t(No symbol) [0x0x7ff73aaa48ff]\n\t(No symbol) [0x0x7ff73aaf120a]\n\t(No symbol) [0x0x7ff73aaf12d7]\n\t(No symbol) [0x0x7ff73aae6acc]\n\t(No symbol) [0x0x7ff73ab1866a]\n\t(No symbol) [0x0x7ff73aae2b56]\n\t(No symbol) [0x0x7ff73ab18880]\n\t(No symbol) [0x0x7ff73ab40dbe]\n\t(No symbol) [0x0x7ff73ab18443]\n\t(No symbol) [0x0x7ff73aae1311]\n\t(No symbol) [0x0x7ff73aae20a3]\n\tGetHandleVerifier [0x0x7ff73afbe26d+2926461]\n\tGetHandleVerifier [0x0x7ff73afb8993+2903715]\n\tGetHandleVerifier [0x0x7ff73afd6aed+3026941]\n\tGetHandleVerifier [0x0x7ff73ad216fe+187406]\n\tGetHandleVerifier [0x0x7ff73ad296ef+220159]\n\tGetHandleVerifier [0x0x7ff73ad0faf4+114692]\n\tGetHandleVerifier [0x0x7ff73ad0fca9+115129]\n\tGetHandleVerifier [0x0x7ff73acf64d8+10728]\n\tBaseThreadInitThunk [0x0x7fffd9ac7374+20]\n\tRtlUserThreadStart [0x0x7fffdad1cc91+33]", "trace": "self = <test_system.test_auditLog.TestAuditLogPage object at 0x0000015DB8964E20>\nlogin_to_auditlog = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"ac9358829e88e619570bc7f21e467f2f\")>\n\n    @allure.story(\"设置时间为当月，用户为当前登录者，显示异常\")\n    # @pytest.mark.run(order=1)\n    def test_auditlog_defaultsele3(self, login_to_auditlog):\n        driver = login_to_auditlog  # WebDriver 实例\n        audit = AuditLogPage(driver)  # 用 driver 初始化 AuditLogPage\n        name = '洪奥青'\n        today = datetime.now().date()\n        # 格式化为年/月/日\n        formatted_date = today.strftime(\"%Y/%m/%d\")\n        first_day = datetime(today.year, today.month, 1).date()\n        formatted_first_day = first_day.strftime(\"%Y/%m/%d\")\n>       audit.enter_texts('//div[span[text()=\"操作时间:\"]]//input', f\"{formatted_first_day} - {formatted_date}\")\n\ntest_auditLog.py:122: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\Pages\\systemPage\\auditLog_page.py:20: in enter_texts\n    self.enter_text(By.XPATH, xpath, text)\n..\\..\\Pages\\base_page.py:71: in enter_text\n    element.send_keys(text)\nD:\\Program Files\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:303: in send_keys\n    self._execute(\nD:\\Program Files\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:572: in _execute\n    return self._parent.execute(command, params)\nD:\\Program Files\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:429: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000015DB8965000>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"stale element reference\",\"message\":\"stale element reference: stale elemen...ff73acf64d8+10728]\\\\n\\\\tBaseThreadInitThunk [0x0x7fffd9ac7374+20]\\\\n\\\\tRtlUserThreadStart [0x0x7fffdad1cc91+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: stale element not found in the current frame\nE         (Session info: chrome=137.0.7151.69); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#stale-element-reference-exception\nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x7ff73ad06f65+78965]\nE       \tGetHandleVerifier [0x0x7ff73ad06fc0+79056]\nE       \t(No symbol) [0x0x7ff73aa99dda]\nE       \t(No symbol) [0x0x7ff73aaa17c1]\nE       \t(No symbol) [0x0x7ff73aaa482c]\nE       \t(No symbol) [0x0x7ff73aaa48ff]\nE       \t(No symbol) [0x0x7ff73aaf120a]\nE       \t(No symbol) [0x0x7ff73aaf12d7]\nE       \t(No symbol) [0x0x7ff73aae6acc]\nE       \t(No symbol) [0x0x7ff73ab1866a]\nE       \t(No symbol) [0x0x7ff73aae2b56]\nE       \t(No symbol) [0x0x7ff73ab18880]\nE       \t(No symbol) [0x0x7ff73ab40dbe]\nE       \t(No symbol) [0x0x7ff73ab18443]\nE       \t(No symbol) [0x0x7ff73aae1311]\nE       \t(No symbol) [0x0x7ff73aae20a3]\nE       \tGetHandleVerifier [0x0x7ff73afbe26d+2926461]\nE       \tGetHandleVerifier [0x0x7ff73afb8993+2903715]\nE       \tGetHandleVerifier [0x0x7ff73afd6aed+3026941]\nE       \tGetHandleVerifier [0x0x7ff73ad216fe+187406]\nE       \tGetHandleVerifier [0x0x7ff73ad296ef+220159]\nE       \tGetHandleVerifier [0x0x7ff73ad0faf4+114692]\nE       \tGetHandleVerifier [0x0x7ff73ad0fca9+115129]\nE       \tGetHandleVerifier [0x0x7ff73acf64d8+10728]\nE       \tBaseThreadInitThunk [0x0x7fffd9ac7374+20]\nE       \tRtlUserThreadStart [0x0x7fffdad1cc91+33]\n\nD:\\Program Files\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: StaleElementReferenceException"}, "attachments": [{"name": "test_auditlog_defaultsele3_failure", "source": "d3b93a82-8be6-4a22-bc6a-b438596409c4-attachment.png", "type": "image/png"}, {"name": "test_auditlog_defaultsele3_source", "source": "8c031b7b-4479-407d-b13a-4dec6ab388b2-attachment.html", "type": "text/html"}, {"name": "log", "source": "b80f4f98-d5da-41c4-9c23-b0a7f9fd1323-attachment.txt", "type": "text/plain"}], "start": 1758014333856, "stop": 1758014335060, "uuid": "e08c6898-cd27-4aaa-ae26-b39b06ce9b7c", "historyId": "c239ec82284a0cd9d618d730c3b4da6a", "testCaseId": "c239ec82284a0cd9d618d730c3b4da6a", "fullName": "Tests.test_system.test_auditLog.TestAuditLogPage#test_auditlog_defaultsele3", "labels": [{"name": "feature", "value": "审核日志页用例"}, {"name": "story", "value": "设置时间为当月，用户为当前登录者，显示异常"}, {"name": "tag", "value": "run(order=209)"}, {"name": "parentSuite", "value": "Tests.test_system"}, {"name": "suite", "value": "test_auditLog"}, {"name": "subSuite", "value": "TestAuditLogPage"}, {"name": "host", "value": "WIN-20240820MJV"}, {"name": "thread", "value": "5080-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Tests.test_system.test_auditLog"}]}