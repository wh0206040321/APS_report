{"name": "test_role_success", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id: session deleted as the browser has closed the connection\nfrom disconnected: not connected to DevTools\n  (Session info: chrome=137.0.7151.69)\nStacktrace:\n\tGetHandleVerifier [0x0x7ff787d66f65+78965]\n\tGetHandleVerifier [0x0x7ff787d66fc0+79056]\n\t(No symbol) [0x0x7ff787af9dda]\n\t(No symbol) [0x0x7ff787ae5bc5]\n\t(No symbol) [0x0x7ff787b0ac04]\n\t(No symbol) [0x0x7ff787b80195]\n\t(No symbol) [0x0x7ff787ba06cd]\n\t(No symbol) [0x0x7ff787b78443]\n\t(No symbol) [0x0x7ff787b41311]\n\t(No symbol) [0x0x7ff787b420a3]\n\tGetHandleVerifier [0x0x7ff78801e26d+2926461]\n\tGetHandleVerifier [0x0x7ff788018993+2903715]\n\tGetHandleVerifier [0x0x7ff788036aed+3026941]\n\tGetHandleVerifier [0x0x7ff787d816fe+187406]\n\tGetHandleVerifier [0x0x7ff787d896ef+220159]\n\tGetHandleVerifier [0x0x7ff787d6faf4+114692]\n\tGetHandleVerifier [0x0x7ff787d6fca9+115129]\n\tGetHandleVerifier [0x0x7ff787d564d8+10728]\n\tBaseThreadInitThunk [0x0x7ff9d9c27374+20]\n\tRtlUserThreadStart [0x0x7ff9db07cc91+33]", "trace": "self = <test_system.test_role.TestRolePage object at 0x000002180EA0D7E0>\nlogin_to_role = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"65b3d2c1cc42f069b52b2163236babf8\")>\n\n    @allure.story(\"添加角色成功，勾选所有菜单,并且增加该用户权限，可切换新建单元\")\n    # @pytest.mark.run(order=1)\n    def test_role_success(self, login_to_role):\n        driver = login_to_role  # WebDriver 实例\n        role = RolePage(driver)  # 用 driver 初始化 PlanUnitPage\n        date_driver = DateDriver()\n        name = \"1测试角色代码1\"\n        module = \"1测试A\"\n        role.add_role(name, module)\n        num = len(role.finds_elements(By.XPATH, '//div[@class=\"ivu-tree\"]//li/label/span'))\n        for i in range(1, num):\n            role.click_button(f'(//div[@class=\"ivu-tree\"]//li/label/span)[{i}]')\n        role.click_all_button(\"保存\")\n        role.right_refresh()\n        role.select_input(name)\n        ele = role.finds_elements(By.XPATH, f'//table[@class=\"vxe-table--body\"]//tr/td[2]//span[text()=\"{name}\"]')\n    \n        role.click_button('(//span[text()=\"用户权限管理\"])[1]')\n        role.enter_texts('//div[div[p[text()=\"用户代码\"]]]//input', date_driver.username)\n        sleep(1)\n        role.click_button(f'(//table[@class=\"vxe-table--body\"]//span[text()=\"{date_driver.username}\"])[1]')\n        role.click_all_button(\"编辑\")\n    \n        role.select_input(name)\n        role.click_button('(//table[@class=\"vxe-table--body\"]//tr[1]/td[2]/div/span)[2]')\n        role.click_all_button(\"保存\")\n        message = role.get_find_message()\n    \n        driver.refresh()\n        role.click_button(f'//div[contains(text(),\"{date_driver.planning}\")]')\n    \n>       role.click_button(f'//ul/li[text()=\"{module}\"]')\n\ntest_role.py:172: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\Pages\\systemPage\\role_page.py:24: in click_button\n    self.click(By.XPATH, xpath)\n..\\..\\Pages\\base_page.py:45: in click\n    element = WebDriverWait(self.driver, wait_time).until(\nD:\\Program Files\\Python310\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:137: in until\n    value = method(self._driver)\nD:\\Program Files\\Python310\\lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py:633: in _predicate\n    target = driver.find_element(*target)  # grab element at locator\nD:\\Program Files\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:898: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\nD:\\Program Files\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:429: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000002180EA0D7B0>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"invalid session id\",\"message\":\"invalid session id: session deleted as the...ff787d564d8+10728]\\\\n\\\\tBaseThreadInitThunk [0x0x7ff9d9c27374+20]\\\\n\\\\tRtlUserThreadStart [0x0x7ff9db07cc91+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id: session deleted as the browser has closed the connection\nE       from disconnected: not connected to DevTools\nE         (Session info: chrome=137.0.7151.69)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x7ff787d66f65+78965]\nE       \tGetHandleVerifier [0x0x7ff787d66fc0+79056]\nE       \t(No symbol) [0x0x7ff787af9dda]\nE       \t(No symbol) [0x0x7ff787ae5bc5]\nE       \t(No symbol) [0x0x7ff787b0ac04]\nE       \t(No symbol) [0x0x7ff787b80195]\nE       \t(No symbol) [0x0x7ff787ba06cd]\nE       \t(No symbol) [0x0x7ff787b78443]\nE       \t(No symbol) [0x0x7ff787b41311]\nE       \t(No symbol) [0x0x7ff787b420a3]\nE       \tGetHandleVerifier [0x0x7ff78801e26d+2926461]\nE       \tGetHandleVerifier [0x0x7ff788018993+2903715]\nE       \tGetHandleVerifier [0x0x7ff788036aed+3026941]\nE       \tGetHandleVerifier [0x0x7ff787d816fe+187406]\nE       \tGetHandleVerifier [0x0x7ff787d896ef+220159]\nE       \tGetHandleVerifier [0x0x7ff787d6faf4+114692]\nE       \tGetHandleVerifier [0x0x7ff787d6fca9+115129]\nE       \tGetHandleVerifier [0x0x7ff787d564d8+10728]\nE       \tBaseThreadInitThunk [0x0x7ff9d9c27374+20]\nE       \tRtlUserThreadStart [0x0x7ff9db07cc91+33]\n\nD:\\Program Files\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: InvalidSessionIdException"}, "attachments": [{"name": "log", "source": "dada8329-4971-4a70-8fce-54fec8664e0d-attachment.txt", "type": "text/plain"}], "start": 1756892877475, "stop": 1756892922618, "uuid": "2f7c233b-9cb0-41b5-954c-607654c5fee6", "historyId": "1fecd3db9d42f2800c83829126d8efa0", "testCaseId": "1fecd3db9d42f2800c83829126d8efa0", "fullName": "Tests.test_system.test_role.TestRolePage#test_role_success", "labels": [{"name": "feature", "value": "角色管理页用例"}, {"name": "story", "value": "添加角色成功，勾选所有菜单,并且增加该用户权限，可切换新建单元"}, {"name": "tag", "value": "run(order=205)"}, {"name": "parentSuite", "value": "Tests.test_system"}, {"name": "suite", "value": "test_role"}, {"name": "subSuite", "value": "TestRolePage"}, {"name": "host", "value": "WIN-20240820MJV"}, {"name": "thread", "value": "3744-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Tests.test_system.test_role"}]}