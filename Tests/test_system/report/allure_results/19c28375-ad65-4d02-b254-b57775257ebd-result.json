{"name": "test_menu_addsuccess", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n\tGetHandleVerifier [0x0x7ff7e64d6f65+78965]\n\tGetHandleVerifier [0x0x7ff7e64d6fc0+79056]\n\t(No symbol) [0x0x7ff7e6269dda]\n\t(No symbol) [0x0x7ff7e62c02ea]\n\t(No symbol) [0x0x7ff7e62c059c]\n\t(No symbol) [0x0x7ff7e6313f37]\n\t(No symbol) [0x0x7ff7e62e86af]\n\t(No symbol) [0x0x7ff7e6310dbe]\n\t(No symbol) [0x0x7ff7e62e8443]\n\t(No symbol) [0x0x7ff7e62b1311]\n\t(No symbol) [0x0x7ff7e62b20a3]\n\tGetHandleVerifier [0x0x7ff7e678e26d+2926461]\n\tGetHandleVerifier [0x0x7ff7e6788993+2903715]\n\tGetHandleVerifier [0x0x7ff7e67a6aed+3026941]\n\tGetHandleVerifier [0x0x7ff7e64f16fe+187406]\n\tGetHandleVerifier [0x0x7ff7e64f96ef+220159]\n\tGetHandleVerifier [0x0x7ff7e64dfaf4+114692]\n\tGetHandleVerifier [0x0x7ff7e64dfca9+115129]\n\tGetHandleVerifier [0x0x7ff7e64c64d8+10728]\n\tBaseThreadInitThunk [0x0x7fff4faa7374+20]\n\tRtlUserThreadStart [0x0x7fff513dcc91+33]", "trace": "self = <test_system.test_menu.TestSMenuPage object at 0x00000242272ADDB0>\nlogin_to_menu = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"265f9f5dad024468576e43f16c2d3c5b\")>\n\n    @allure.story(\"添加菜单成功\")\n    # @pytest.mark.run(order=1)\n    def test_menu_addsuccess(self, login_to_menu):\n        driver = login_to_menu  # WebDriver 实例\n        menu = ExpressionPage(driver)  # 用 driver 初始化 ExpressionPage\n        name = 'ABCDAA'\n        sleep(1)\n        menu.click_all_button(\"新增\")\n>       menu.enter_texts('//div[@id=\"ph5ht87u-mndd\"]//input', name)\n\ntest_menu.py:117: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\Pages\\systemPage\\expression_page.py:20: in enter_texts\n    self.enter_text(By.XPATH, xpath, text)\n..\\..\\Pages\\base_page.py:66: in enter_text\n    element = WebDriverWait(self.driver, wait_time).until(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"265f9f5dad024468576e43f16c2d3c5b\")>\nmethod = <function visibility_of_element_located.<locals>._predicate at 0x000002422709BE20>\nmessage = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        -----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x7ff7e64d6f65+78965]\nE       \tGetHandleVerifier [0x0x7ff7e64d6fc0+79056]\nE       \t(No symbol) [0x0x7ff7e6269dda]\nE       \t(No symbol) [0x0x7ff7e62c02ea]\nE       \t(No symbol) [0x0x7ff7e62c059c]\nE       \t(No symbol) [0x0x7ff7e6313f37]\nE       \t(No symbol) [0x0x7ff7e62e86af]\nE       \t(No symbol) [0x0x7ff7e6310dbe]\nE       \t(No symbol) [0x0x7ff7e62e8443]\nE       \t(No symbol) [0x0x7ff7e62b1311]\nE       \t(No symbol) [0x0x7ff7e62b20a3]\nE       \tGetHandleVerifier [0x0x7ff7e678e26d+2926461]\nE       \tGetHandleVerifier [0x0x7ff7e6788993+2903715]\nE       \tGetHandleVerifier [0x0x7ff7e67a6aed+3026941]\nE       \tGetHandleVerifier [0x0x7ff7e64f16fe+187406]\nE       \tGetHandleVerifier [0x0x7ff7e64f96ef+220159]\nE       \tGetHandleVerifier [0x0x7ff7e64dfaf4+114692]\nE       \tGetHandleVerifier [0x0x7ff7e64dfca9+115129]\nE       \tGetHandleVerifier [0x0x7ff7e64c64d8+10728]\nE       \tBaseThreadInitThunk [0x0x7fff4faa7374+20]\nE       \tRtlUserThreadStart [0x0x7fff513dcc91+33]\n\nD:\\Program Files\\Python310\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:146: TimeoutException"}, "attachments": [{"name": "test_menu_addsuccess_failure", "source": "fdc44a31-7ad9-4c72-b813-fd2e02314872-attachment.png", "type": "image/png"}, {"name": "test_menu_addsuccess_source", "source": "fc658b2b-d0f6-46dd-a329-14b663639072-attachment.html", "type": "text/html"}, {"name": "log", "source": "b07c2b8c-96ff-400d-bf72-40e204319a49-attachment.txt", "type": "text/plain"}], "start": 1761044613486, "stop": 1761044628462, "uuid": "e2e94c43-c6b3-41fc-83f2-b6e329b019a9", "historyId": "5587316c3de85562874789c0c8d5e69e", "testCaseId": "5587316c3de85562874789c0c8d5e69e", "fullName": "Tests.test_system.test_menu.TestSMenuPage#test_menu_addsuccess", "labels": [{"name": "story", "value": "添加菜单成功"}, {"name": "feature", "value": "菜单组件页用例"}, {"name": "tag", "value": "run(order=213)"}, {"name": "parentSuite", "value": "Tests.test_system"}, {"name": "suite", "value": "test_menu"}, {"name": "subSuite", "value": "TestSMenuPage"}, {"name": "host", "value": "WIN-20240820MJV"}, {"name": "thread", "value": "26392-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Tests.test_system.test_menu"}]}