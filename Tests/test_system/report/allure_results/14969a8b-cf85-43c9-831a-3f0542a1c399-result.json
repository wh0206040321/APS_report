{"name": "test_affairs_template_addsuccess5", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nfrom unknown error: web view not found\n  (Session info: chrome=137.0.7151.69)\nStacktrace:\n\tGetHandleVerifier [0x0x7ff634466f65+78965]\n\tGetHandleVerifier [0x0x7ff634466fc0+79056]\n\t(No symbol) [0x0x7ff6341f9dda]\n\t(No symbol) [0x0x7ff6341d20d1]\n\t(No symbol) [0x0x7ff63427ff4e]\n\t(No symbol) [0x0x7ff6342a06cd]\n\t(No symbol) [0x0x7ff634278443]\n\t(No symbol) [0x0x7ff634241311]\n\t(No symbol) [0x0x7ff6342420a3]\n\tGetHandleVerifier [0x0x7ff63471e26d+2926461]\n\tGetHandleVerifier [0x0x7ff634718993+2903715]\n\tGetHandleVerifier [0x0x7ff634736aed+3026941]\n\tGetHandleVerifier [0x0x7ff6344816fe+187406]\n\tGetHandleVerifier [0x0x7ff6344896ef+220159]\n\tGetHandleVerifier [0x0x7ff63446faf4+114692]\n\tGetHandleVerifier [0x0x7ff63446fca9+115129]\n\tGetHandleVerifier [0x0x7ff6344564d8+10728]\n\tBaseThreadInitThunk [0x0x7ff992b87374+20]\n\tRtlUserThreadStart [0x0x7ff99357cc91+33]", "trace": "@pytest.fixture  # (scope=\"class\")这个参数表示整个测试类共用同一个浏览器，默认一个用例执行一次\n    def login_to_affairs():\n        \"\"\"初始化并返回 driver\"\"\"\n        driver_path = DateDriver().driver_path\n        driver = create_driver(driver_path)\n        driver.implicitly_wait(3)\n    \n        # 初始化登录页面\n        page = LoginPage(driver)  # 初始化登录页面\n        page.navigate_to(DateDriver().url)  # 导航到登录页面\n>       page.login(DateDriver().username, DateDriver().password, DateDriver().planning)\n\ntest_affairs.py:31: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\Pages\\itemsPage\\login_page.py:30: in login\n    self.enter_username(username)\n..\\..\\Pages\\itemsPage\\login_page.py:14: in enter_username\n    self.enter_text(By.XPATH, '//input[@placeholder=\"请输入账户\"]', username)\n..\\..\\Pages\\base_page.py:66: in enter_text\n    element = WebDriverWait(self.driver, wait_time).until(\nD:\\Program Files\\Python310\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:137: in until\n    value = method(self._driver)\nD:\\Program Files\\Python310\\lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py:224: in _predicate\n    return _element_if_visible(driver.find_element(*locator))\nD:\\Program Files\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:898: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\nD:\\Program Files\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:429: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001BF3E544190>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such window\",\"message\":\"no such window: target window already closed\\\\...ff6344564d8+10728]\\\\n\\\\tBaseThreadInitThunk [0x0x7ff992b87374+20]\\\\n\\\\tRtlUserThreadStart [0x0x7ff99357cc91+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nE       from unknown error: web view not found\nE         (Session info: chrome=137.0.7151.69)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x7ff634466f65+78965]\nE       \tGetHandleVerifier [0x0x7ff634466fc0+79056]\nE       \t(No symbol) [0x0x7ff6341f9dda]\nE       \t(No symbol) [0x0x7ff6341d20d1]\nE       \t(No symbol) [0x0x7ff63427ff4e]\nE       \t(No symbol) [0x0x7ff6342a06cd]\nE       \t(No symbol) [0x0x7ff634278443]\nE       \t(No symbol) [0x0x7ff634241311]\nE       \t(No symbol) [0x0x7ff6342420a3]\nE       \tGetHandleVerifier [0x0x7ff63471e26d+2926461]\nE       \tGetHandleVerifier [0x0x7ff634718993+2903715]\nE       \tGetHandleVerifier [0x0x7ff634736aed+3026941]\nE       \tGetHandleVerifier [0x0x7ff6344816fe+187406]\nE       \tGetHandleVerifier [0x0x7ff6344896ef+220159]\nE       \tGetHandleVerifier [0x0x7ff63446faf4+114692]\nE       \tGetHandleVerifier [0x0x7ff63446fca9+115129]\nE       \tGetHandleVerifier [0x0x7ff6344564d8+10728]\nE       \tBaseThreadInitThunk [0x0x7ff992b87374+20]\nE       \tRtlUserThreadStart [0x0x7ff99357cc91+33]\n\nD:\\Program Files\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: NoSuchWindowException"}, "attachments": [{"name": "log", "source": "7010529c-a248-47b5-a335-0f662be069e8-attachment.txt", "type": "text/plain"}], "start": 1754382493861, "stop": 1754382493861, "uuid": "597d6983-eee8-4c37-ae67-67b50b3c1d0c", "historyId": "7d15dc6a9743e12f76f73cd9996d2baf", "testCaseId": "7d15dc6a9743e12f76f73cd9996d2baf", "fullName": "Tests.test_system.test_affairs.TestAffairsPage#test_affairs_template_addsuccess5", "labels": [{"name": "feature", "value": "事务管理页用例"}, {"name": "story", "value": "事务模版-新增模版成功，事务类型为存储过程，添加成功"}, {"name": "tag", "value": "run(order=202)"}, {"name": "parentSuite", "value": "Tests.test_system"}, {"name": "suite", "value": "test_affairs"}, {"name": "subSuite", "value": "TestAffairsPage"}, {"name": "host", "value": "WIN-20240820MJV"}, {"name": "thread", "value": "32684-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Tests.test_system.test_affairs"}]}