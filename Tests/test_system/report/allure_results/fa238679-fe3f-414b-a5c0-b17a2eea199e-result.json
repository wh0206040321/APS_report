{"name": "test_unit_selectsuccess3", "status": "failed", "statusDetails": {"message": "AssertionError: 第 1 行不符合：td3=金属（演示）, td4=标准\nassert ('A' in '\\u91d1\\u5c5e\\uff08\\u6f14\\u793a\\uff09' or 'CTB' in '\\u6807\\u51c6')", "trace": "self = <test_system.test_planUnit.TestPlanUnitPage object at 0x00000213E5F23CD0>\nlogin_to_planUnit = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"64b899dc7fd273ee345beccec60486b6\")>\n\n    @allure.story(\"查询计划单元包含A或模版名称为CTB\")\n    # @pytest.mark.run(order=1)\n    def test_unit_selectsuccess3(self, login_to_planUnit):\n        driver = login_to_planUnit  # WebDriver 实例\n        unit = PlanUnitPage(driver)  # 用 driver 初始化 PlanUnitPage\n    \n        name = \"A\"\n        m = 'CTB'\n        # 点击查询\n        unit.click_sel_button()\n        sleep(1)\n    \n        # 定位名称输入框\n        element_to_double_click = driver.find_element(\n            By.XPATH,\n            '(//div[@class=\"vxe-table--render-wrapper\"])[3]/div[1]/div[2]//tr[1]/td[4]',\n        )\n        # 创建一个 ActionChains 对象\n        actions = ActionChains(driver)\n        # 双击命令\n        actions.double_click(element_to_double_click).perform()\n        sleep(1)\n        # 点击物料名称\n        unit.click_button('//div[text()=\"计划单元\" and contains(@optid,\"opt_\")]')\n        sleep(1)\n        # 点击（\n        unit.click_button(\n            '(//div[@class=\"vxe-table--render-wrapper\"])[3]/div[1]/div[2]//tr[1]/td[3]'\n        )\n        unit.click_button('//div[text()=\"(\" and contains(@optid,\"opt_\")]')\n        # 点击比较关系框\n        unit.click_button(\n            '(//div[@class=\"vxe-table--render-wrapper\"])[3]/div[1]/div[2]//tr[1]/td[5]//input'\n        )\n        sleep(1)\n        # 点击包含\n        unit.click_button('//div[text()=\"包含\" and contains(@optid,\"opt_\")]')\n        sleep(1)\n        # 点击输入数值\n        unit.enter_texts(\n            '(//div[@class=\"vxe-table--render-wrapper\"])[3]/div[1]/div[2]//tr[1]/td[6]//input',\n            name,\n        )\n    \n        # 点击（\n        unit.click_button(\n            '(//div[@class=\"vxe-table--render-wrapper\"])[3]/div[1]/div[2]//tr[1]/td[7]'\n        )\n        unit.click_button('//div[text()=\")\" and contains(@optid,\"opt_\")]')\n    \n        sleep(1)\n        double_click = driver.find_element(\n            By.XPATH,\n            '(//div[@class=\"vxe-table--render-wrapper\"])[3]/div[1]/div[2]//tr[2]/td[2]',\n        )\n        # 双击命令\n        sleep(1)\n        actions.double_click(double_click).perform()\n        # 定义or元素的XPath\n        or_xpath = '//div[text()=\"or\" and contains(@optid,\"opt_\")]'\n    \n        try:\n            # 首先尝试直接查找并点击or元素\n            and_element = WebDriverWait(driver, 2).until(\n                EC.presence_of_element_located((By.XPATH, or_xpath))\n            )\n            and_element.click()\n        except:\n            # 如果直接查找失败，进入循环双击操作\n            max_attempts = 5\n            attempt = 0\n            or_found = False\n    \n            while attempt < max_attempts and not or_found:\n                try:\n                    # 执行双击操作\n                    actions.double_click(double_click).perform()\n                    sleep(1)\n    \n                    # 再次尝试查找or元素\n                    or_element = WebDriverWait(driver, 2).until(\n                        EC.presence_of_element_located((By.XPATH, or_xpath))\n                    )\n                    or_element.click()\n                    or_found = True\n                except:\n                    attempt += 1\n                    sleep(1)\n    \n            if not or_found:\n                raise Exception(f\"在{max_attempts}次尝试后仍未找到并点击到'or'元素\")\n    \n        # 点击（\n        unit.click_button(\n            '(//div[@class=\"vxe-table--render-wrapper\"])[3]/div[1]/div[2]//tr[2]/td[3]'\n        )\n        unit.click_button('//div[text()=\"(\" and contains(@optid,\"opt_\")]')\n        # 点击物料优先度\n        unit.click_button(\n            '(//div[@class=\"vxe-table--render-wrapper\"])[3]/div[1]/div[2]//tr[2]/td[4]'\n        )\n        unit.click_button('//div[text()=\"模板名称\" and contains(@optid,\"opt_\")]')\n        sleep(1)\n        # 点击比较关系框\n        unit.click_button(\n            '(//div[@class=\"vxe-table--render-wrapper\"])[3]/div[1]/div[2]//tr[2]/td[5]//input'\n        )\n        # 点击>\n        unit.click_button('//div[text()=\"≥\" and contains(@optid,\"opt_\")]')\n        sleep(1)\n        # 点击输入数值0\n        unit.enter_texts(\n            '(//div[@class=\"vxe-table--render-wrapper\"])[3]/div[1]/div[2]//tr[2]/td[6]//input',\n            m,\n        )\n        # 点击（\n        unit.click_button(\n            '(//div[@class=\"vxe-table--render-wrapper\"])[3]/div[1]/div[2]//tr[2]/td[7]'\n        )\n        unit.click_button('//div[text()=\")\" and contains(@optid,\"opt_\")]')\n    \n        sleep(1)\n    \n        # 点击确认\n        unit.click_button(\n            '(//div[@class=\"demo-drawer-footer\"]//span[text()=\"确定\"])[3]'\n        )\n        sleep(1)\n        # 获取目标表格第2个 vxe 表格中的所有数据行\n        xpath_rows = '(//table[contains(@class, \"vxe-table--body\")])[2]//tr[contains(@class,\"vxe-body--row\")]'\n    \n        # 先拿到总行数\n        base_rows = driver.find_elements(By.XPATH, xpath_rows)\n        total = len(base_rows)\n    \n        valid_count = 0\n        for idx in range(total):\n            try:\n                # 每次都按索引重新定位这一行\n                row = driver.find_elements(By.XPATH, xpath_rows)[idx]\n                tds = row.find_elements(By.TAG_NAME, \"td\")\n                td3 = tds[2].text.strip()\n                td4 = tds[3].text.strip()\n    \n>               assert name in td3 or m in td4, f\"第 {idx + 1} 行不符合：td3={td3}, td4={td4}\"\nE               AssertionError: 第 1 行不符合：td3=金属（演示）, td4=标准\nE               assert ('A' in '\\u91d1\\u5c5e\\uff08\\u6f14\\u793a\\uff09' or 'CTB' in '\\u6807\\u51c6')\n\ntest_planUnit.py:671: AssertionError"}, "attachments": [{"name": "test_unit_selectsuccess3_failure", "source": "4a688956-2922-4c3c-a553-ddf5c624184f-attachment.png", "type": "image/png"}, {"name": "test_unit_selectsuccess3_source", "source": "a1fa4dae-6ee7-4fb0-a14e-b78f48d76d51-attachment.html", "type": "text/html"}, {"name": "log", "source": "766e762c-3f68-4291-ae94-3603fc10a92d-attachment.txt", "type": "text/plain"}], "start": 1756801445155, "stop": 1756801462916, "uuid": "35079231-821c-4485-88ce-bee579fcd26b", "historyId": "382c0e5c4788c3d762e327c21da5b07f", "testCaseId": "382c0e5c4788c3d762e327c21da5b07f", "fullName": "Tests.test_system.test_planUnit.TestPlanUnitPage#test_unit_selectsuccess3", "labels": [{"name": "story", "value": "查询计划单元包含A或模版名称为CTB"}, {"name": "feature", "value": "计划单元页用例"}, {"name": "tag", "value": "run(order=204)"}, {"name": "parentSuite", "value": "Tests.test_system"}, {"name": "suite", "value": "test_planUnit"}, {"name": "subSuite", "value": "TestPlanUnitPage"}, {"name": "host", "value": "WIN-20240820MJV"}, {"name": "thread", "value": "28356-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Tests.test_system.test_planUnit"}]}