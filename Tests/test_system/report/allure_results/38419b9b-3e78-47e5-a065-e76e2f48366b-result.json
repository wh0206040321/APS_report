{"name": "test_menu_selectsuccess", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message: 点击失败，找不到元素：xpath = (//span[text()=\"系统管理\"])[1]", "trace": "self = <Pages.itemsPage.login_page.LoginPage object at 0x0000018C2A0C89D0>\nby_or_element = 'xpath', value = '(//span[text()=\"系统管理\"])[1]', wait_time = 10\n\n    def click(self, by_or_element, value=None, wait_time=10):\n        if value is not None:\n            by = by_or_element\n            logging.info(f\"点击元素：By = {by}, Value = {value}\")\n            try:\n>               element = WebDriverWait(self.driver, wait_time).until(\n                    EC.element_to_be_clickable((by, value))\n                )\n\n..\\..\\Pages\\base_page.py:45: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"724c3e2f4f777559c95822356f2b6277\")>\nmethod = <function element_to_be_clickable.<locals>._predicate at 0x0000018C2A0F1E10>\nmessage = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        -----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x7ff7d6086f65+78965]\nE       \tGetHandleVerifier [0x0x7ff7d6086fc0+79056]\nE       \t(No symbol) [0x0x7ff7d5e19dda]\nE       \t(No symbol) [0x0x7ff7d5e702ea]\nE       \t(No symbol) [0x0x7ff7d5e7059c]\nE       \t(No symbol) [0x0x7ff7d5ec3f37]\nE       \t(No symbol) [0x0x7ff7d5e986af]\nE       \t(No symbol) [0x0x7ff7d5ec0dbe]\nE       \t(No symbol) [0x0x7ff7d5e98443]\nE       \t(No symbol) [0x0x7ff7d5e61311]\nE       \t(No symbol) [0x0x7ff7d5e620a3]\nE       \tGetHandleVerifier [0x0x7ff7d633e26d+2926461]\nE       \tGetHandleVerifier [0x0x7ff7d6338993+2903715]\nE       \tGetHandleVerifier [0x0x7ff7d6356aed+3026941]\nE       \tGetHandleVerifier [0x0x7ff7d60a16fe+187406]\nE       \tGetHandleVerifier [0x0x7ff7d60a96ef+220159]\nE       \tGetHandleVerifier [0x0x7ff7d608faf4+114692]\nE       \tGetHandleVerifier [0x0x7ff7d608fca9+115129]\nE       \tGetHandleVerifier [0x0x7ff7d60764d8+10728]\nE       \tBaseThreadInitThunk [0x0x7ffe68f47374+20]\nE       \tRtlUserThreadStart [0x0x7ffe691dcc91+33]\n\nD:\\Program Files\\Python310\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:146: TimeoutException\n\nDuring handling of the above exception, another exception occurred:\n\n    @pytest.fixture  # (scope=\"class\")这个参数表示整个测试类共用同一个浏览器，默认一个用例执行一次\n    def login_to_menu():\n        \"\"\"初始化并返回 driver\"\"\"\n        date_driver = DateDriver()\n        driver = create_driver(date_driver.driver_path)\n        driver.implicitly_wait(3)\n    \n        # 初始化登录页面\n        page = LoginPage(driver)  # 初始化登录页面\n        url = date_driver.url\n        print(f\"[INFO] 正在导航到 URL: {url}\")\n        # 尝试访问 URL，捕获连接错误\n        for attempt in range(2):\n            try:\n                page.navigate_to(url)\n                break\n            except WebDriverException as e:\n                capture_screenshot(driver, f\"login_fail_{attempt + 1}\")\n                logging.warning(f\"第 {attempt + 1} 次连接失败: {e}\")\n                driver.refresh()\n                sleep(date_driver.URL_RETRY_WAIT)\n        else:\n            logging.error(\"连接失败多次，测试中止\")\n            safe_quit(driver)\n            raise RuntimeError(\"无法连接到登录页面\")\n    \n        page.login(date_driver.username, date_driver.password, date_driver.planning)\n        list_ = [\"系统管理\", \"系统设置\", \"菜单组件\"]\n        for v in list_:\n>           page.click_button(f'(//span[text()=\"{v}\"])[1]')\n\ntest_menu.py:51: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\Pages\\itemsPage\\login_page.py:24: in click_button\n    self.click(By.XPATH, xpath)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Pages.itemsPage.login_page.LoginPage object at 0x0000018C2A0C89D0>\nby_or_element = 'xpath', value = '(//span[text()=\"系统管理\"])[1]', wait_time = 10\n\n    def click(self, by_or_element, value=None, wait_time=10):\n        if value is not None:\n            by = by_or_element\n            logging.info(f\"点击元素：By = {by}, Value = {value}\")\n            try:\n                element = WebDriverWait(self.driver, wait_time).until(\n                    EC.element_to_be_clickable((by, value))\n                )\n            except TimeoutException:\n                logging.warning(f\"❌ 点击超时：元素 {by} = {value} 未在 {wait_time} 秒内变为可点击\")\n>               raise TimeoutException(f\"点击失败，找不到元素：{by} = {value}\")\nE               selenium.common.exceptions.TimeoutException: Message: 点击失败，找不到元素：xpath = (//span[text()=\"系统管理\"])[1]\n\n..\\..\\Pages\\base_page.py:50: TimeoutException"}, "attachments": [{"name": "log", "source": "30260f37-e528-4798-9991-8a5e99d7295a-attachment.txt", "type": "text/plain"}], "start": 1760491225739, "stop": 1760491225739, "uuid": "37a5dea0-6a69-4a9f-814a-36efaba9016f", "historyId": "690606fdae96d117b3a7e94ff40b0f00", "testCaseId": "690606fdae96d117b3a7e94ff40b0f00", "fullName": "Tests.test_system.test_menu.TestSMenuPage#test_menu_selectsuccess", "labels": [{"name": "story", "value": "查询组件代码成功"}, {"name": "feature", "value": "菜单组件页用例"}, {"name": "tag", "value": "run(order=213)"}, {"name": "parentSuite", "value": "Tests.test_system"}, {"name": "suite", "value": "test_menu"}, {"name": "subSuite", "value": "TestSMenuPage"}, {"name": "host", "value": "WIN-20240820MJV"}, {"name": "thread", "value": "22912-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Tests.test_system.test_menu"}]}