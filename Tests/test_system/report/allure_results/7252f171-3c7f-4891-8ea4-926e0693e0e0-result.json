{"name": "test_systemSettings_logo1", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message: 点击失败，找不到元素：xpath = //div[p[text()=\" LOGO显示方式: \"]]//input", "trace": "self = <Pages.systemPage.systemSettings_page.SystemSettingsPage object at 0x0000022E32C2B880>\nby_or_element = 'xpath', value = '//div[p[text()=\" LOGO显示方式: \"]]//input'\nwait_time = 10\n\n    def click(self, by_or_element, value=None, wait_time=10):\n        if value is not None:\n            by = by_or_element\n            logging.info(f\"点击元素：By = {by}, Value = {value}\")\n            try:\n>               element = WebDriverWait(self.driver, wait_time).until(\n                    EC.element_to_be_clickable((by, value))\n                )\n\n..\\..\\Pages\\base_page.py:45: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"804ea30cc8ff15e3fccb79d2407c1919\")>\nmethod = <function element_to_be_clickable.<locals>._predicate at 0x0000022E32BAD000>\nmessage = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        -----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\nD:\\Program Files\\Python310\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:146: TimeoutException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_system.test_systemSettings.TestSystemSettingsPage object at 0x0000022E32C2A8F0>\nlogin_to_systemSettings = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"804ea30cc8ff15e3fccb79d2407c1919\")>\n\n    @allure.story(\"LOGO显示方式为文字\")\n    # @pytest.mark.run(order=1)\n    def test_systemSettings_logo1(self, login_to_systemSettings):\n        driver = login_to_systemSettings  # WebDriver 实例\n        settings = SystemSettingsPage(driver)  # 用 driver 初始化 SystemSettingsPage\n>       settings.click_button('//div[p[text()=\" LOGO显示方式: \"]]//input')\n\ntest_systemSettings.py:96: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\Pages\\systemPage\\systemSettings_page.py:24: in click_button\n    self.click(By.XPATH, xpath)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Pages.systemPage.systemSettings_page.SystemSettingsPage object at 0x0000022E32C2B880>\nby_or_element = 'xpath', value = '//div[p[text()=\" LOGO显示方式: \"]]//input'\nwait_time = 10\n\n    def click(self, by_or_element, value=None, wait_time=10):\n        if value is not None:\n            by = by_or_element\n            logging.info(f\"点击元素：By = {by}, Value = {value}\")\n            try:\n                element = WebDriverWait(self.driver, wait_time).until(\n                    EC.element_to_be_clickable((by, value))\n                )\n            except TimeoutException:\n                logging.warning(f\"❌ 点击超时：元素 {by} = {value} 未在 {wait_time} 秒内变为可点击\")\n>               raise TimeoutException(f\"点击失败，找不到元素：{by} = {value}\")\nE               selenium.common.exceptions.TimeoutException: Message: 点击失败，找不到元素：xpath = //div[p[text()=\" LOGO显示方式: \"]]//input\n\n..\\..\\Pages\\base_page.py:50: TimeoutException"}, "attachments": [{"name": "test_systemSettings_logo1_failure", "source": "07352e9d-b937-4077-81ff-456002a1af37-attachment.png", "type": "image/png"}, {"name": "test_systemSettings_logo1_source", "source": "1f8b873e-eb8f-464b-9003-bdf6b6455bfd-attachment.html", "type": "text/html"}, {"name": "log", "source": "88fee9f5-a8d7-49a5-aa29-6ba3e1989566-attachment.txt", "type": "text/plain"}], "start": 1758850185121, "stop": 1758850195621, "uuid": "598a711f-5572-4799-ac50-f10516a5ca17", "historyId": "10be671db87c2d0af3feeb8f027cb4b4", "testCaseId": "10be671db87c2d0af3feeb8f027cb4b4", "fullName": "Tests.test_system.test_systemSettings.TestSystemSettingsPage#test_systemSettings_logo1", "labels": [{"name": "story", "value": "LOGO显示方式为文字"}, {"name": "feature", "value": "系统标识设置页用例"}, {"name": "tag", "value": "run(order=211)"}, {"name": "parentSuite", "value": "Tests.test_system"}, {"name": "suite", "value": "test_systemSettings"}, {"name": "subSuite", "value": "TestSystemSettingsPage"}, {"name": "host", "value": "WIN-20240820MJV"}, {"name": "thread", "value": "33616-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Tests.test_system.test_systemSettings"}]}