{"name": "test_apps_addfail1", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id: session deleted as the browser has closed the connection\nfrom disconnected: unable to send message to renderer\n  (Session info: chrome=137.0.7151.69)\nStacktrace:\n\tGetHandleVerifier [0x0x7ff715ef6f65+78965]\n\tGetHandleVerifier [0x0x7ff715ef6fc0+79056]\n\t(No symbol) [0x0x7ff715c89dda]\n\t(No symbol) [0x0x7ff715c761e1]\n\t(No symbol) [0x0x7ff715c7614c]\n\t(No symbol) [0x0x7ff715c748dc]\n\t(No symbol) [0x0x7ff715c7559f]\n\t(No symbol) [0x0x7ff715c8f331]\n\t(No symbol) [0x0x7ff715c8fe27]\n\t(No symbol) [0x0x7ff715c9482c]\n\t(No symbol) [0x0x7ff715c948ff]\n\t(No symbol) [0x0x7ff715cdfb97]\n\t(No symbol) [0x0x7ff715ce059c]\n\t(No symbol) [0x0x7ff715d33f37]\n\t(No symbol) [0x0x7ff715d086af]\n\t(No symbol) [0x0x7ff715d30dbe]\n\t(No symbol) [0x0x7ff715d08443]\n\t(No symbol) [0x0x7ff715cd1311]\n\t(No symbol) [0x0x7ff715cd20a3]\n\tGetHandleVerifier [0x0x7ff7161ae26d+2926461]\n\tGetHandleVerifier [0x0x7ff7161a8993+2903715]\n\tGetHandleVerifier [0x0x7ff7161c6aed+3026941]\n\tGetHandleVerifier [0x0x7ff715f116fe+187406]\n\tGetHandleVerifier [0x0x7ff715f196ef+220159]\n\tGetHandleVerifier [0x0x7ff715effaf4+114692]\n\tGetHandleVerifier [0x0x7ff715effca9+115129]\n\tGetHandleVerifier [0x0x7ff715ee64d8+10728]\n\tBaseThreadInitThunk [0x0x7fff4faa7374+20]\n\tRtlUserThreadStart [0x0x7fff513dcc91+33]", "trace": "@pytest.fixture  # (scope=\"class\")这个参数表示整个测试类共用同一个浏览器，默认一个用例执行一次\n    def login_to_apps():\n        \"\"\"初始化并返回 driver\"\"\"\n        date_driver = DateDriver()\n        driver = create_driver(date_driver.driver_path)\n        driver.implicitly_wait(3)\n    \n        # 初始化登录页面\n        page = LoginPage(driver)  # 初始化登录页面\n        url = date_driver.url\n        print(f\"[INFO] 正在导航到 URL: {url}\")\n        # 尝试访问 URL，捕获连接错误\n        for attempt in range(2):\n            try:\n                page.navigate_to(url)\n                break\n            except WebDriverException as e:\n                capture_screenshot(driver, f\"login_fail_{attempt + 1}\")\n                logging.warning(f\"第 {attempt + 1} 次连接失败: {e}\")\n                driver.refresh()\n                sleep(date_driver.URL_RETRY_WAIT)\n        else:\n            logging.error(\"连接失败多次，测试中止\")\n            safe_quit(driver)\n            raise RuntimeError(\"无法连接到登录页面\")\n    \n>       page.login(date_driver.username, date_driver.password, date_driver.planning)\n\ntest_apps.py:48: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\Pages\\itemsPage\\login_page.py:32: in login\n    self.enter_username(username)\n..\\..\\Pages\\itemsPage\\login_page.py:16: in enter_username\n    self.enter_text(By.XPATH, '//input[@placeholder=\"请输入账户\"]', username)\n..\\..\\Pages\\base_page.py:66: in enter_text\n    element = WebDriverWait(self.driver, wait_time).until(\nD:\\Program Files\\Python310\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:137: in until\n    value = method(self._driver)\nD:\\Program Files\\Python310\\lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py:224: in _predicate\n    return _element_if_visible(driver.find_element(*locator))\nD:\\Program Files\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:898: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\nD:\\Program Files\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:429: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001C40EE7B910>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"invalid session id\",\"message\":\"invalid session id: session deleted as the...ff715ee64d8+10728]\\\\n\\\\tBaseThreadInitThunk [0x0x7fff4faa7374+20]\\\\n\\\\tRtlUserThreadStart [0x0x7fff513dcc91+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id: session deleted as the browser has closed the connection\nE       from disconnected: unable to send message to renderer\nE         (Session info: chrome=137.0.7151.69)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x7ff715ef6f65+78965]\nE       \tGetHandleVerifier [0x0x7ff715ef6fc0+79056]\nE       \t(No symbol) [0x0x7ff715c89dda]\nE       \t(No symbol) [0x0x7ff715c761e1]\nE       \t(No symbol) [0x0x7ff715c7614c]\nE       \t(No symbol) [0x0x7ff715c748dc]\nE       \t(No symbol) [0x0x7ff715c7559f]\nE       \t(No symbol) [0x0x7ff715c8f331]\nE       \t(No symbol) [0x0x7ff715c8fe27]\nE       \t(No symbol) [0x0x7ff715c9482c]\nE       \t(No symbol) [0x0x7ff715c948ff]\nE       \t(No symbol) [0x0x7ff715cdfb97]\nE       \t(No symbol) [0x0x7ff715ce059c]\nE       \t(No symbol) [0x0x7ff715d33f37]\nE       \t(No symbol) [0x0x7ff715d086af]\nE       \t(No symbol) [0x0x7ff715d30dbe]\nE       \t(No symbol) [0x0x7ff715d08443]\nE       \t(No symbol) [0x0x7ff715cd1311]\nE       \t(No symbol) [0x0x7ff715cd20a3]\nE       \tGetHandleVerifier [0x0x7ff7161ae26d+2926461]\nE       \tGetHandleVerifier [0x0x7ff7161a8993+2903715]\nE       \tGetHandleVerifier [0x0x7ff7161c6aed+3026941]\nE       \tGetHandleVerifier [0x0x7ff715f116fe+187406]\nE       \tGetHandleVerifier [0x0x7ff715f196ef+220159]\nE       \tGetHandleVerifier [0x0x7ff715effaf4+114692]\nE       \tGetHandleVerifier [0x0x7ff715effca9+115129]\nE       \tGetHandleVerifier [0x0x7ff715ee64d8+10728]\nE       \tBaseThreadInitThunk [0x0x7fff4faa7374+20]\nE       \tRtlUserThreadStart [0x0x7fff513dcc91+33]\n\nD:\\Program Files\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: InvalidSessionIdException"}, "start": 1760953941339, "stop": 1760953941339, "uuid": "f7a8167a-29ec-41b2-83f0-0b878cd77bc4", "historyId": "828ab8be2243e2fc7e63779808fb01f1", "testCaseId": "828ab8be2243e2fc7e63779808fb01f1", "fullName": "Tests.test_system.test_apps.TestSAppsPage#test_apps_addfail1", "labels": [{"name": "feature", "value": "应用管理页用例"}, {"name": "story", "value": "新增直接点击保存不允许添加"}, {"name": "tag", "value": "run(order=215)"}, {"name": "parentSuite", "value": "Tests.test_system"}, {"name": "suite", "value": "test_apps"}, {"name": "subSuite", "value": "TestSAppsPage"}, {"name": "host", "value": "WIN-20240820MJV"}, {"name": "thread", "value": "12496-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Tests.test_system.test_apps"}]}