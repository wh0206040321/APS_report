{"uid":"b433b725cb9aaa72","name":"test_setting_perspective_display","fullName":"Tests.test_items.test_setting.TestSettingPage#test_setting_perspective_display","historyId":"4b8f149b9523508812c958a07df4eb01","time":{"start":1758724831790,"stop":1758724842984,"duration":11194},"status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n\tGetHandleVerifier [0x0x7ff7ee406f65+78965]\n\tGetHandleVerifier [0x0x7ff7ee406fc0+79056]\n\t(No symbol) [0x0x7ff7ee199dda]\n\t(No symbol) [0x0x7ff7ee1f02ea]\n\t(No symbol) [0x0x7ff7ee1f059c]\n\t(No symbol) [0x0x7ff7ee243f37]\n\t(No symbol) [0x0x7ff7ee2186af]\n\t(No symbol) [0x0x7ff7ee240dbe]\n\t(No symbol) [0x0x7ff7ee218443]\n\t(No symbol) [0x0x7ff7ee1e1311]\n\t(No symbol) [0x0x7ff7ee1e20a3]\n\tGetHandleVerifier [0x0x7ff7ee6be26d+2926461]\n\tGetHandleVerifier [0x0x7ff7ee6b8993+2903715]\n\tGetHandleVerifier [0x0x7ff7ee6d6aed+3026941]\n\tGetHandleVerifier [0x0x7ff7ee4216fe+187406]\n\tGetHandleVerifier [0x0x7ff7ee4296ef+220159]\n\tGetHandleVerifier [0x0x7ff7ee40faf4+114692]\n\tGetHandleVerifier [0x0x7ff7ee40fca9+115129]\n\tGetHandleVerifier [0x0x7ff7ee3f64d8+10728]\n\tBaseThreadInitThunk [0x0x7ffcefb37374+20]\n\tRtlUserThreadStart [0x0x7ffcf06bcc91+33]","statusTrace":"self = <test_items.test_setting.TestSettingPage object at 0x00000271F3498A60>, login_to_setting = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"53132bd899162da2414a7155ec3590bf\")>\n\n    @allure.story(\"设置透视表格布局-布局列表设置为显示布局\")\n    # @pytest.mark.run(order=1)\n    def test_setting_perspective_display(self, login_to_setting):\n        driver = login_to_setting  # WebDriver 实例\n        setting = SettingPage(driver)  # 用 driver 初始化 SettingPage\n        layout = \"测试透视表B\"\n        sleep(1)\n        setting.click_button('//i[@id=\"tabsDrawerIcon\"]')\n    \n        # 获取目标 div 元素，这里的目标是具有特定文本的 div\n>       target_div = setting.get_find_element_xpath(\n            f'//div[@id=\"container\"]/div[.//text()=\"{layout}\"]'\n        )\n\nTests\\test_items\\test_setting.py:1372: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nPages\\itemsPage\\setting_page.py:27: in get_find_element_xpath\n    return self.find_element(By.XPATH, xpath)\nPages\\base_page.py:28: in find_element\n    return WebDriverWait(self.driver, wait_time).until(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"53132bd899162da2414a7155ec3590bf\")>, method = <function presence_of_element_located.<locals>._predicate at 0x00000271F4EA4430>, message = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        -----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x7ff7ee406f65+78965]\nE       \tGetHandleVerifier [0x0x7ff7ee406fc0+79056]\nE       \t(No symbol) [0x0x7ff7ee199dda]\nE       \t(No symbol) [0x0x7ff7ee1f02ea]\nE       \t(No symbol) [0x0x7ff7ee1f059c]\nE       \t(No symbol) [0x0x7ff7ee243f37]\nE       \t(No symbol) [0x0x7ff7ee2186af]\nE       \t(No symbol) [0x0x7ff7ee240dbe]\nE       \t(No symbol) [0x0x7ff7ee218443]\nE       \t(No symbol) [0x0x7ff7ee1e1311]\nE       \t(No symbol) [0x0x7ff7ee1e20a3]\nE       \tGetHandleVerifier [0x0x7ff7ee6be26d+2926461]\nE       \tGetHandleVerifier [0x0x7ff7ee6b8993+2903715]\nE       \tGetHandleVerifier [0x0x7ff7ee6d6aed+3026941]\nE       \tGetHandleVerifier [0x0x7ff7ee4216fe+187406]\nE       \tGetHandleVerifier [0x0x7ff7ee4296ef+220159]\nE       \tGetHandleVerifier [0x0x7ff7ee40faf4+114692]\nE       \tGetHandleVerifier [0x0x7ff7ee40fca9+115129]\nE       \tGetHandleVerifier [0x0x7ff7ee3f64d8+10728]\nE       \tBaseThreadInitThunk [0x0x7ffcefb37374+20]\nE       \tRtlUserThreadStart [0x0x7ffcf06bcc91+33]\n\nmyenv\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:138: TimeoutException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"login_to_setting","time":{"start":1758724823302,"stop":1758724831790,"duration":8488},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentStep":false,"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n\tGetHandleVerifier [0x0x7ff7ee406f65+78965]\n\tGetHandleVerifier [0x0x7ff7ee406fc0+79056]\n\t(No symbol) [0x0x7ff7ee199dda]\n\t(No symbol) [0x0x7ff7ee1f02ea]\n\t(No symbol) [0x0x7ff7ee1f059c]\n\t(No symbol) [0x0x7ff7ee243f37]\n\t(No symbol) [0x0x7ff7ee2186af]\n\t(No symbol) [0x0x7ff7ee240dbe]\n\t(No symbol) [0x0x7ff7ee218443]\n\t(No symbol) [0x0x7ff7ee1e1311]\n\t(No symbol) [0x0x7ff7ee1e20a3]\n\tGetHandleVerifier [0x0x7ff7ee6be26d+2926461]\n\tGetHandleVerifier [0x0x7ff7ee6b8993+2903715]\n\tGetHandleVerifier [0x0x7ff7ee6d6aed+3026941]\n\tGetHandleVerifier [0x0x7ff7ee4216fe+187406]\n\tGetHandleVerifier [0x0x7ff7ee4296ef+220159]\n\tGetHandleVerifier [0x0x7ff7ee40faf4+114692]\n\tGetHandleVerifier [0x0x7ff7ee40fca9+115129]\n\tGetHandleVerifier [0x0x7ff7ee3f64d8+10728]\n\tBaseThreadInitThunk [0x0x7ffcefb37374+20]\n\tRtlUserThreadStart [0x0x7ffcf06bcc91+33]","statusTrace":"self = <test_items.test_setting.TestSettingPage object at 0x00000271F3498A60>, login_to_setting = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"53132bd899162da2414a7155ec3590bf\")>\n\n    @allure.story(\"设置透视表格布局-布局列表设置为显示布局\")\n    # @pytest.mark.run(order=1)\n    def test_setting_perspective_display(self, login_to_setting):\n        driver = login_to_setting  # WebDriver 实例\n        setting = SettingPage(driver)  # 用 driver 初始化 SettingPage\n        layout = \"测试透视表B\"\n        sleep(1)\n        setting.click_button('//i[@id=\"tabsDrawerIcon\"]')\n    \n        # 获取目标 div 元素，这里的目标是具有特定文本的 div\n>       target_div = setting.get_find_element_xpath(\n            f'//div[@id=\"container\"]/div[.//text()=\"{layout}\"]'\n        )\n\nTests\\test_items\\test_setting.py:1372: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nPages\\itemsPage\\setting_page.py:27: in get_find_element_xpath\n    return self.find_element(By.XPATH, xpath)\nPages\\base_page.py:28: in find_element\n    return WebDriverWait(self.driver, wait_time).until(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"53132bd899162da2414a7155ec3590bf\")>, method = <function presence_of_element_located.<locals>._predicate at 0x00000271F4EA4430>, message = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        -----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x7ff7ee406f65+78965]\nE       \tGetHandleVerifier [0x0x7ff7ee406fc0+79056]\nE       \t(No symbol) [0x0x7ff7ee199dda]\nE       \t(No symbol) [0x0x7ff7ee1f02ea]\nE       \t(No symbol) [0x0x7ff7ee1f059c]\nE       \t(No symbol) [0x0x7ff7ee243f37]\nE       \t(No symbol) [0x0x7ff7ee2186af]\nE       \t(No symbol) [0x0x7ff7ee240dbe]\nE       \t(No symbol) [0x0x7ff7ee218443]\nE       \t(No symbol) [0x0x7ff7ee1e1311]\nE       \t(No symbol) [0x0x7ff7ee1e20a3]\nE       \tGetHandleVerifier [0x0x7ff7ee6be26d+2926461]\nE       \tGetHandleVerifier [0x0x7ff7ee6b8993+2903715]\nE       \tGetHandleVerifier [0x0x7ff7ee6d6aed+3026941]\nE       \tGetHandleVerifier [0x0x7ff7ee4216fe+187406]\nE       \tGetHandleVerifier [0x0x7ff7ee4296ef+220159]\nE       \tGetHandleVerifier [0x0x7ff7ee40faf4+114692]\nE       \tGetHandleVerifier [0x0x7ff7ee40fca9+115129]\nE       \tGetHandleVerifier [0x0x7ff7ee3f64d8+10728]\nE       \tBaseThreadInitThunk [0x0x7ffcefb37374+20]\nE       \tRtlUserThreadStart [0x0x7ffcf06bcc91+33]\n\nmyenv\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:138: TimeoutException","steps":[],"attachments":[{"uid":"7c194e2db64e2079","name":"test_setting_perspective_display_failure","source":"7c194e2db64e2079.png","type":"image/png","size":108186},{"uid":"c9448d41196031e3","name":"test_setting_perspective_display_source","source":"c9448d41196031e3.html","type":"text/html","size":1335880},{"uid":"a0915a9612dcfcd5","name":"log","source":"a0915a9612dcfcd5.txt","type":"text/plain","size":1138}],"parameters":[],"hasContent":true,"attachmentStep":false,"stepsCount":0,"shouldDisplayMessage":true,"attachmentsCount":3},"afterStages":[{"name":"login_to_setting::0","time":{"start":1758724843176,"stop":1758724845352,"duration":2176},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentStep":false,"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0}],"labels":[{"name":"feature","value":"标准应用设置测试用例"},{"name":"story","value":"设置透视表格布局-布局列表设置为显示布局"},{"name":"parentSuite","value":"Tests.test_items"},{"name":"suite","value":"test_setting"},{"name":"subSuite","value":"TestSettingPage"},{"name":"host","value":"WIN-20240820MJV"},{"name":"thread","value":"15904-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"Tests.test_items.test_setting"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[]}],"tags":[]},"source":"b433b725cb9aaa72.json","parameterValues":[]}