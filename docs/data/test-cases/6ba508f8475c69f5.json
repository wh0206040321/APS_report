{"uid":"6ba508f8475c69f5","name":"test_setting_select_input","fullName":"Tests.test_items.test_setting.TestSettingPage#test_setting_select_input","historyId":"bdbbdd2055e9ce9da4550144ba3012fb","time":{"start":1758724638891,"stop":1758724645081,"duration":6190},"status":"failed","statusMessage":"AssertionError: assert ('1211' == '1测试A'\n  \n  \u001B[0m\u001B[91m- 1测试A\u001B[39;49;00m\u001B[90m\u001B[39;49;00m\n  \u001B[92m+ 1211\u001B[39;49;00m\u001B[90m\u001B[39;49;00m)","statusTrace":"self = <test_items.test_setting.TestSettingPage object at 0x00000271F349A1D0>, login_to_setting = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"71019612ac8d33e75b136d15aa97aa2a\")>\n\n    @allure.story(\"设置表格布局-物料代码快速查询-输入框\")\n    # @pytest.mark.run(order=1)\n    def test_setting_select_input(self, login_to_setting):\n        driver = login_to_setting  # WebDriver 实例\n        setting = SettingPage(driver)  # 用 driver 初始化 SettingPage\n        layout = \"测试布局A\"\n        setting.click_button(f'//div[@class=\"tabsDivItemCon\"]/div[text()=\" {layout} \"]')\n        code = \"物料代码\"\n        # 点击设置按钮，进入显示设置界面\n        setting.click_setting_button()\n        # 点击快速查询按钮以开始搜索\n        setting.click_button('//div[text()=\" 快速查询 \"]')\n    \n        # 根据提供的code点击对应的行按钮，以展开详细信息\n        setting.click_button(\n            f'//tr[./td[3][.//span[text()=\"{code}\"]]]/td[4]//input[@placeholder=\"请选择\"]'\n        )\n    \n        # 点击输入框，准备输入数据\n        setting.click_button('//div[text()=\"输入框\"]')\n    \n        # 确认输入框点击，进入下一步\n        setting.click_button('(//div[@class=\"demo-drawer-footer\"])[3]/button[2]')\n    \n        # 获取表格中特定位置的数据，用于后续的验证\n        data = setting.get_find_element_xpath(\n            '(//div[@class=\"vxe-table--body-wrapper body--wrapper\"])[2]/table//tr[2]/td[2]'\n        ).text\n    \n        # 等待界面更新，确保数据被正确处理\n        sleep(1)\n    \n        # 在界面上输入之前获取的数据，以进行验证\n        setting.enter_texts(\n            f'//div[text()=\"{code}\"]/following-sibling::div//input', f\"{data}\"\n        )\n    \n        # 点击查询按钮，提交输入的数据\n        setting.click_button('//div[@class=\"queryBtn\"]/button[1]')\n    \n        # 等待查询结果出现\n        sleep(1)\n    \n        # 获取查询结果中的第一条数据，用于验证\n        text1 = setting.get_find_element_xpath(\n            '(//div[@class=\"vxe-table--body-wrapper body--wrapper\"])[2]/table//tr[1]/td[2]'\n        ).text\n    \n        # 再次等待，确保所有数据都已加载\n        sleep(1)\n    \n        # 获取查询结果中的第二条数据，用于进一步验证\n        text2 = driver.find_elements(\n            By.XPATH,\n            '(//div[@class=\"vxe-table--body-wrapper body--wrapper\"])[2]/table//tr[2]/td[2]',\n        )\n    \n        # 断言查询结果与之前获取的数据一致，且没有其他不相关数据\n>       assert text1 == data and text2 == []\nE       AssertionError: assert ('1211' == '1测试A'\nE         \nE         \u001B[0m\u001B[91m- 1测试A\u001B[39;49;00m\u001B[90m\u001B[39;49;00m\nE         \u001B[92m+ 1211\u001B[39;49;00m\u001B[90m\u001B[39;49;00m)\n\nTests\\test_items\\test_setting.py:812: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"login_to_setting","time":{"start":1758724630397,"stop":1758724638891,"duration":8494},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentStep":false,"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert ('1211' == '1测试A'\n  \n  \u001B[0m\u001B[91m- 1测试A\u001B[39;49;00m\u001B[90m\u001B[39;49;00m\n  \u001B[92m+ 1211\u001B[39;49;00m\u001B[90m\u001B[39;49;00m)","statusTrace":"self = <test_items.test_setting.TestSettingPage object at 0x00000271F349A1D0>, login_to_setting = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"71019612ac8d33e75b136d15aa97aa2a\")>\n\n    @allure.story(\"设置表格布局-物料代码快速查询-输入框\")\n    # @pytest.mark.run(order=1)\n    def test_setting_select_input(self, login_to_setting):\n        driver = login_to_setting  # WebDriver 实例\n        setting = SettingPage(driver)  # 用 driver 初始化 SettingPage\n        layout = \"测试布局A\"\n        setting.click_button(f'//div[@class=\"tabsDivItemCon\"]/div[text()=\" {layout} \"]')\n        code = \"物料代码\"\n        # 点击设置按钮，进入显示设置界面\n        setting.click_setting_button()\n        # 点击快速查询按钮以开始搜索\n        setting.click_button('//div[text()=\" 快速查询 \"]')\n    \n        # 根据提供的code点击对应的行按钮，以展开详细信息\n        setting.click_button(\n            f'//tr[./td[3][.//span[text()=\"{code}\"]]]/td[4]//input[@placeholder=\"请选择\"]'\n        )\n    \n        # 点击输入框，准备输入数据\n        setting.click_button('//div[text()=\"输入框\"]')\n    \n        # 确认输入框点击，进入下一步\n        setting.click_button('(//div[@class=\"demo-drawer-footer\"])[3]/button[2]')\n    \n        # 获取表格中特定位置的数据，用于后续的验证\n        data = setting.get_find_element_xpath(\n            '(//div[@class=\"vxe-table--body-wrapper body--wrapper\"])[2]/table//tr[2]/td[2]'\n        ).text\n    \n        # 等待界面更新，确保数据被正确处理\n        sleep(1)\n    \n        # 在界面上输入之前获取的数据，以进行验证\n        setting.enter_texts(\n            f'//div[text()=\"{code}\"]/following-sibling::div//input', f\"{data}\"\n        )\n    \n        # 点击查询按钮，提交输入的数据\n        setting.click_button('//div[@class=\"queryBtn\"]/button[1]')\n    \n        # 等待查询结果出现\n        sleep(1)\n    \n        # 获取查询结果中的第一条数据，用于验证\n        text1 = setting.get_find_element_xpath(\n            '(//div[@class=\"vxe-table--body-wrapper body--wrapper\"])[2]/table//tr[1]/td[2]'\n        ).text\n    \n        # 再次等待，确保所有数据都已加载\n        sleep(1)\n    \n        # 获取查询结果中的第二条数据，用于进一步验证\n        text2 = driver.find_elements(\n            By.XPATH,\n            '(//div[@class=\"vxe-table--body-wrapper body--wrapper\"])[2]/table//tr[2]/td[2]',\n        )\n    \n        # 断言查询结果与之前获取的数据一致，且没有其他不相关数据\n>       assert text1 == data and text2 == []\nE       AssertionError: assert ('1211' == '1测试A'\nE         \nE         \u001B[0m\u001B[91m- 1测试A\u001B[39;49;00m\u001B[90m\u001B[39;49;00m\nE         \u001B[92m+ 1211\u001B[39;49;00m\u001B[90m\u001B[39;49;00m)\n\nTests\\test_items\\test_setting.py:812: AssertionError","steps":[],"attachments":[{"uid":"891b9a651a4fbb4f","name":"test_setting_select_input_failure","source":"891b9a651a4fbb4f.png","type":"image/png","size":116337},{"uid":"aa69ff8cf231baf1","name":"test_setting_select_input_source","source":"aa69ff8cf231baf1.html","type":"text/html","size":1445537},{"uid":"684ebb579b52112e","name":"log","source":"684ebb579b52112e.txt","type":"text/plain","size":1932}],"parameters":[],"hasContent":true,"attachmentStep":false,"stepsCount":0,"shouldDisplayMessage":true,"attachmentsCount":3},"afterStages":[{"name":"login_to_setting::0","time":{"start":1758724645286,"stop":1758724647462,"duration":2176},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentStep":false,"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0}],"labels":[{"name":"story","value":"设置表格布局-物料代码快速查询-输入框"},{"name":"feature","value":"标准应用设置测试用例"},{"name":"parentSuite","value":"Tests.test_items"},{"name":"suite","value":"test_setting"},{"name":"subSuite","value":"TestSettingPage"},{"name":"host","value":"WIN-20240820MJV"},{"name":"thread","value":"15904-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"Tests.test_items.test_setting"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[]}],"tags":[]},"source":"6ba508f8475c69f5.json","parameterValues":[]}