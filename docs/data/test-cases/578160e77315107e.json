{"uid":"578160e77315107e","name":"test_item_addsuccess","fullName":"Tests.test_material.test_demandSourceMan.TestItemPage#test_item_addsuccess","historyId":"e472106f1182f91cbdfdc4c37c1da91f","time":{"start":1755187065418,"stop":1755187084678,"duration":19260},"status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message: 点击失败，找不到元素：xpath = //span[text()='需求来源标识']/ancestor::td/following-sibling::td[2]//ul[@class='ivu-select-dropdown-list']/li[1]","statusTrace":"self = <Pages.materialPage.warehouseLocation_page.WarehouseLocationPage object at 0x0000019971BFB580>, by_or_element = 'xpath'\nvalue = \"//span[text()='需求来源标识']/ancestor::td/following-sibling::td[2]//ul[@class='ivu-select-dropdown-list']/li[1]\", wait_time = 10\n\n    def click(self, by_or_element, value=None, wait_time=10):\n        if value is not None:\n            by = by_or_element\n            logging.info(f\"点击元素：By = {by}, Value = {value}\")\n            try:\n>               element = WebDriverWait(self.driver, wait_time).until(\n                    EC.element_to_be_clickable((by, value))\n                )\n\nPages\\base_page.py:45: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"873e160774aad6b80299ae28c0aab813\")>\nmethod = <function element_to_be_clickable.<locals>._predicate at 0x0000019972194A60>, message = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        -----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\nmyenv\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:138: TimeoutException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_material.test_demandSourceMan.TestItemPage object at 0x0000019971781C60>\nlogin_to_item = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"873e160774aad6b80299ae28c0aab813\")>\n\n    @allure.story(\"添加必填数据成功\")\n    # @pytest.mark.run(order=1)\n    def test_item_addsuccess(self, login_to_item):\n    \n        self.item.click_add_button()  # 检查点击添加\n        # 创建一个 ActionChains 对象\n        actions = ActionChains(self.driver)\n        # 输入框要修改的值\n        text_str = \"111\"\n        # 新增输入框的xpath\n        input_xpath_list = [\n            \"//div[text()=' 需求来源编码: ']/following-sibling::div/input\",\n            \"//div[text()=' 需求来源名称: ']/following-sibling::div/input\",\n        ]\n        sleep(1)\n        # 批量修改输入框\n        self.item.batch_modify_input(input_xpath_list, text_str)\n        self.item.click_button(\"//div[text()=' 需求类型: ']/following-sibling::div/label\")\n        # 点击数据库名称下拉\n        self.item.click_button(\"//div[text()=' 数据库名称: ']/following-sibling::div\")\n        sleep(1)\n        self.item.click_button(\"//div[text()=' 数据库名称: ']/following-sibling::div//ul[@class='ivu-select-dropdown-list']/li[1]\")\n    \n        sleep(1)\n        # 点击表或视图名下拉\n        self.item.click_button(\"//div[text()=' 表或视图名: ']/following-sibling::div\")\n        sleep(1)\n        self.item.click_button(\n            \"//div[text()=' 表或视图名: ']/following-sibling::div//ul[@class='ivu-select-dropdown-list']/li[2]\")\n    \n        # 点击表格【需求来源标识】字段名称下拉\n        self.item.click_button(\"//span[text()='需求来源标识']/ancestor::td/following-sibling::td[2]\")\n        sleep(1)\n        self.item.click_button(\"//span[text()='需求来源标识']/ancestor::td/following-sibling::td[2]//div[@class='ivu-select-selection']\")\n        sleep(1)\n>       self.item.click_button(\"//span[text()='需求来源标识']/ancestor::td/following-sibling::td[2]//ul[@class='ivu-select-dropdown-list']/li[1]\")\n\nTests\\test_material\\test_demandSourceMan.py:121: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nPages\\materialPage\\warehouseLocation_page.py:60: in click_button\n    self.click(By.XPATH, xpath)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Pages.materialPage.warehouseLocation_page.WarehouseLocationPage object at 0x0000019971BFB580>, by_or_element = 'xpath'\nvalue = \"//span[text()='需求来源标识']/ancestor::td/following-sibling::td[2]//ul[@class='ivu-select-dropdown-list']/li[1]\", wait_time = 10\n\n    def click(self, by_or_element, value=None, wait_time=10):\n        if value is not None:\n            by = by_or_element\n            logging.info(f\"点击元素：By = {by}, Value = {value}\")\n            try:\n                element = WebDriverWait(self.driver, wait_time).until(\n                    EC.element_to_be_clickable((by, value))\n                )\n            except TimeoutException:\n                logging.warning(f\"❌ 点击超时：元素 {by} = {value} 未在 {wait_time} 秒内变为可点击\")\n>               raise TimeoutException(f\"点击失败，找不到元素：{by} = {value}\")\nE               selenium.common.exceptions.TimeoutException: Message: 点击失败，找不到元素：xpath = //span[text()='需求来源标识']/ancestor::td/following-sibling::td[2]//ul[@class='ivu-select-dropdown-list']/li[1]\n\nPages\\base_page.py:50: TimeoutException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"login_to_item","time":{"start":1755187043350,"stop":1755187053545,"duration":10195},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentStep":false,"hasContent":false,"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"setup","time":{"start":1755187065416,"stop":1755187065418,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentStep":false,"hasContent":false,"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message: 点击失败，找不到元素：xpath = //span[text()='需求来源标识']/ancestor::td/following-sibling::td[2]//ul[@class='ivu-select-dropdown-list']/li[1]","statusTrace":"self = <Pages.materialPage.warehouseLocation_page.WarehouseLocationPage object at 0x0000019971BFB580>, by_or_element = 'xpath'\nvalue = \"//span[text()='需求来源标识']/ancestor::td/following-sibling::td[2]//ul[@class='ivu-select-dropdown-list']/li[1]\", wait_time = 10\n\n    def click(self, by_or_element, value=None, wait_time=10):\n        if value is not None:\n            by = by_or_element\n            logging.info(f\"点击元素：By = {by}, Value = {value}\")\n            try:\n>               element = WebDriverWait(self.driver, wait_time).until(\n                    EC.element_to_be_clickable((by, value))\n                )\n\nPages\\base_page.py:45: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"873e160774aad6b80299ae28c0aab813\")>\nmethod = <function element_to_be_clickable.<locals>._predicate at 0x0000019972194A60>, message = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        -----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\nmyenv\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:138: TimeoutException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_material.test_demandSourceMan.TestItemPage object at 0x0000019971781C60>\nlogin_to_item = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"873e160774aad6b80299ae28c0aab813\")>\n\n    @allure.story(\"添加必填数据成功\")\n    # @pytest.mark.run(order=1)\n    def test_item_addsuccess(self, login_to_item):\n    \n        self.item.click_add_button()  # 检查点击添加\n        # 创建一个 ActionChains 对象\n        actions = ActionChains(self.driver)\n        # 输入框要修改的值\n        text_str = \"111\"\n        # 新增输入框的xpath\n        input_xpath_list = [\n            \"//div[text()=' 需求来源编码: ']/following-sibling::div/input\",\n            \"//div[text()=' 需求来源名称: ']/following-sibling::div/input\",\n        ]\n        sleep(1)\n        # 批量修改输入框\n        self.item.batch_modify_input(input_xpath_list, text_str)\n        self.item.click_button(\"//div[text()=' 需求类型: ']/following-sibling::div/label\")\n        # 点击数据库名称下拉\n        self.item.click_button(\"//div[text()=' 数据库名称: ']/following-sibling::div\")\n        sleep(1)\n        self.item.click_button(\"//div[text()=' 数据库名称: ']/following-sibling::div//ul[@class='ivu-select-dropdown-list']/li[1]\")\n    \n        sleep(1)\n        # 点击表或视图名下拉\n        self.item.click_button(\"//div[text()=' 表或视图名: ']/following-sibling::div\")\n        sleep(1)\n        self.item.click_button(\n            \"//div[text()=' 表或视图名: ']/following-sibling::div//ul[@class='ivu-select-dropdown-list']/li[2]\")\n    \n        # 点击表格【需求来源标识】字段名称下拉\n        self.item.click_button(\"//span[text()='需求来源标识']/ancestor::td/following-sibling::td[2]\")\n        sleep(1)\n        self.item.click_button(\"//span[text()='需求来源标识']/ancestor::td/following-sibling::td[2]//div[@class='ivu-select-selection']\")\n        sleep(1)\n>       self.item.click_button(\"//span[text()='需求来源标识']/ancestor::td/following-sibling::td[2]//ul[@class='ivu-select-dropdown-list']/li[1]\")\n\nTests\\test_material\\test_demandSourceMan.py:121: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nPages\\materialPage\\warehouseLocation_page.py:60: in click_button\n    self.click(By.XPATH, xpath)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Pages.materialPage.warehouseLocation_page.WarehouseLocationPage object at 0x0000019971BFB580>, by_or_element = 'xpath'\nvalue = \"//span[text()='需求来源标识']/ancestor::td/following-sibling::td[2]//ul[@class='ivu-select-dropdown-list']/li[1]\", wait_time = 10\n\n    def click(self, by_or_element, value=None, wait_time=10):\n        if value is not None:\n            by = by_or_element\n            logging.info(f\"点击元素：By = {by}, Value = {value}\")\n            try:\n                element = WebDriverWait(self.driver, wait_time).until(\n                    EC.element_to_be_clickable((by, value))\n                )\n            except TimeoutException:\n                logging.warning(f\"❌ 点击超时：元素 {by} = {value} 未在 {wait_time} 秒内变为可点击\")\n>               raise TimeoutException(f\"点击失败，找不到元素：{by} = {value}\")\nE               selenium.common.exceptions.TimeoutException: Message: 点击失败，找不到元素：xpath = //span[text()='需求来源标识']/ancestor::td/following-sibling::td[2]//ul[@class='ivu-select-dropdown-list']/li[1]\n\nPages\\base_page.py:50: TimeoutException","steps":[],"attachments":[{"uid":"1002fbc09e65008b","name":"test_item_addsuccess_failure","source":"1002fbc09e65008b.png","type":"image/png","size":129156},{"uid":"30b287c4f118ffa6","name":"test_item_addsuccess_source","source":"30b287c4f118ffa6.html","type":"text/html","size":1248697},{"uid":"9ffb08b3d633f594","name":"log","source":"9ffb08b3d633f594.txt","type":"text/plain","size":1689}],"parameters":[],"attachmentStep":false,"hasContent":true,"stepsCount":0,"shouldDisplayMessage":true,"attachmentsCount":3},"afterStages":[{"name":"login_to_item::0","time":{"start":1755187932839,"stop":1755187935002,"duration":2163},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentStep":false,"hasContent":false,"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0}],"labels":[{"name":"story","value":"添加必填数据成功"},{"name":"feature","value":"物控需求定义测试用例"},{"name":"parentSuite","value":"Tests.test_material"},{"name":"suite","value":"test_demandSourceMan"},{"name":"subSuite","value":"TestItemPage"},{"name":"host","value":"WIN-20240820MJV"},{"name":"thread","value":"16980-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"Tests.test_material.test_demandSourceMan"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":[]},"source":"578160e77315107e.json","parameterValues":[]}