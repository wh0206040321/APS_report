{"uid":"8fae34f2c34bb65b","name":"test_item_selectcodesuccess","fullName":"Tests.test_material.test_warehouseLocation.TestItemPage#test_item_selectcodesuccess","historyId":"ed41759b7135a8f010246cdbe6473c2b","time":{"start":1753110124436,"stop":1753110143903,"duration":19467},"status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n\tGetHandleVerifier [0x0x7ff77a1f6f65+78965]\n\tGetHandleVerifier [0x0x7ff77a1f6fc0+79056]\n\t(No symbol) [0x0x7ff779f89dda]\n\t(No symbol) [0x0x7ff779fe02ea]\n\t(No symbol) [0x0x7ff779fe059c]\n\t(No symbol) [0x0x7ff77a033f37]\n\t(No symbol) [0x0x7ff77a0086af]\n\t(No symbol) [0x0x7ff77a030dbe]\n\t(No symbol) [0x0x7ff77a008443]\n\t(No symbol) [0x0x7ff779fd1311]\n\t(No symbol) [0x0x7ff779fd20a3]\n\tGetHandleVerifier [0x0x7ff77a4ae26d+2926461]\n\tGetHandleVerifier [0x0x7ff77a4a8993+2903715]\n\tGetHandleVerifier [0x0x7ff77a4c6aed+3026941]\n\tGetHandleVerifier [0x0x7ff77a2116fe+187406]\n\tGetHandleVerifier [0x0x7ff77a2196ef+220159]\n\tGetHandleVerifier [0x0x7ff77a1ffaf4+114692]\n\tGetHandleVerifier [0x0x7ff77a1ffca9+115129]\n\tGetHandleVerifier [0x0x7ff77a1e64d8+10728]\n\tBaseThreadInitThunk [0x0x7fff79487374+20]\n\tRtlUserThreadStart [0x0x7fff7967cc91+33]","statusTrace":"self = <test_warehouseLocation.TestItemPage object at 0x0000024D1FFF15D0>, login_to_item = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"3ac198255f2f4793c6189a5a5b8c2793\")>\n\n    @allure.story(\"查询工厂代码成功\")\n    # @pytest.mark.run(order=1)\n    def test_item_selectcodesuccess(self, login_to_item):\n        driver = login_to_item  # WebDriver 实例\n        item = WarehouseLocationPage(driver)  # 用 driver 初始化 ItemPage\n    \n        # 点击查询\n        item.click_sel_button()\n        sleep(1)\n        # 定位名称输入框\n        element_to_double_click = driver.find_element(\n            By.XPATH,\n            '(//div[@class=\"vxe-table--render-wrapper\"])[3]/div[1]/div[2]//tr[1]/td[4]',\n        )\n        # 创建一个 ActionChains 对象\n        actions = ActionChains(driver)\n        # 双击命令\n        actions.double_click(element_to_double_click).perform()\n        sleep(1)\n        # 点击工厂代码\n        item.click_button('//div[text()=\"工厂代码\" and contains(@optid,\"opt_\")]')\n        sleep(1)\n        # 点击比较关系框\n        item.click_button(\n            '(//div[@class=\"vxe-table--render-wrapper\"])[3]/div[1]/div[2]//tr[1]/td[5]//input'\n        )\n        sleep(1)\n        # 点击=\n        item.click_button('//div[text()=\"=\" and contains(@optid,\"opt_\")]')\n        sleep(1)\n        # 点击输入数值\n        item.enter_texts(\n            '(//div[@class=\"vxe-table--render-wrapper\"])[3]/div[1]/div[2]//tr[1]/td[6]//input',\n            \"1测试A\",\n        )\n        sleep(1)\n    \n        # 点击确认\n        item.click_button(\n            '(//button[@class=\"ivu-btn ivu-btn-primary\"]/span[text()=\"确定\"])[2]'\n        )\n        sleep(1)\n        # 定位第一行是否为产品A\n>       itemcode = item.get_find_element_xpath(\n            '(//table[contains(@class, \"vxe-table--body\")])[2]//tr[@class=\"vxe-body--row\"][1]/td[2]'\n        ).text\n\nTests\\test_material\\test_warehouseLocation.py:392: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nPages\\materialPage\\warehouseLocation_page.py:123: in get_find_element_xpath\n    return self.find_element(By.XPATH, xpath)\nPages\\base_page.py:24: in find_element\n    return WebDriverWait(self.driver, wait_time).until(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"3ac198255f2f4793c6189a5a5b8c2793\")>\nmethod = <function presence_of_element_located.<locals>._predicate at 0x0000024D21432A70>, message = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        -----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x7ff77a1f6f65+78965]\nE       \tGetHandleVerifier [0x0x7ff77a1f6fc0+79056]\nE       \t(No symbol) [0x0x7ff779f89dda]\nE       \t(No symbol) [0x0x7ff779fe02ea]\nE       \t(No symbol) [0x0x7ff779fe059c]\nE       \t(No symbol) [0x0x7ff77a033f37]\nE       \t(No symbol) [0x0x7ff77a0086af]\nE       \t(No symbol) [0x0x7ff77a030dbe]\nE       \t(No symbol) [0x0x7ff77a008443]\nE       \t(No symbol) [0x0x7ff779fd1311]\nE       \t(No symbol) [0x0x7ff779fd20a3]\nE       \tGetHandleVerifier [0x0x7ff77a4ae26d+2926461]\nE       \tGetHandleVerifier [0x0x7ff77a4a8993+2903715]\nE       \tGetHandleVerifier [0x0x7ff77a4c6aed+3026941]\nE       \tGetHandleVerifier [0x0x7ff77a2116fe+187406]\nE       \tGetHandleVerifier [0x0x7ff77a2196ef+220159]\nE       \tGetHandleVerifier [0x0x7ff77a1ffaf4+114692]\nE       \tGetHandleVerifier [0x0x7ff77a1ffca9+115129]\nE       \tGetHandleVerifier [0x0x7ff77a1e64d8+10728]\nE       \tBaseThreadInitThunk [0x0x7fff79487374+20]\nE       \tRtlUserThreadStart [0x0x7fff7967cc91+33]\n\nmyenv\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:138: TimeoutException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":1,"retriesStatusChange":true,"beforeStages":[{"name":"login_to_item","time":{"start":1753110116898,"stop":1753110124433,"duration":7535},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentStep":false,"stepsCount":0,"hasContent":false,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"setup","time":{"start":1753110124433,"stop":1753110124435,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentStep":false,"stepsCount":0,"hasContent":false,"attachmentsCount":0,"shouldDisplayMessage":false}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n\tGetHandleVerifier [0x0x7ff77a1f6f65+78965]\n\tGetHandleVerifier [0x0x7ff77a1f6fc0+79056]\n\t(No symbol) [0x0x7ff779f89dda]\n\t(No symbol) [0x0x7ff779fe02ea]\n\t(No symbol) [0x0x7ff779fe059c]\n\t(No symbol) [0x0x7ff77a033f37]\n\t(No symbol) [0x0x7ff77a0086af]\n\t(No symbol) [0x0x7ff77a030dbe]\n\t(No symbol) [0x0x7ff77a008443]\n\t(No symbol) [0x0x7ff779fd1311]\n\t(No symbol) [0x0x7ff779fd20a3]\n\tGetHandleVerifier [0x0x7ff77a4ae26d+2926461]\n\tGetHandleVerifier [0x0x7ff77a4a8993+2903715]\n\tGetHandleVerifier [0x0x7ff77a4c6aed+3026941]\n\tGetHandleVerifier [0x0x7ff77a2116fe+187406]\n\tGetHandleVerifier [0x0x7ff77a2196ef+220159]\n\tGetHandleVerifier [0x0x7ff77a1ffaf4+114692]\n\tGetHandleVerifier [0x0x7ff77a1ffca9+115129]\n\tGetHandleVerifier [0x0x7ff77a1e64d8+10728]\n\tBaseThreadInitThunk [0x0x7fff79487374+20]\n\tRtlUserThreadStart [0x0x7fff7967cc91+33]","statusTrace":"self = <test_warehouseLocation.TestItemPage object at 0x0000024D1FFF15D0>, login_to_item = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"3ac198255f2f4793c6189a5a5b8c2793\")>\n\n    @allure.story(\"查询工厂代码成功\")\n    # @pytest.mark.run(order=1)\n    def test_item_selectcodesuccess(self, login_to_item):\n        driver = login_to_item  # WebDriver 实例\n        item = WarehouseLocationPage(driver)  # 用 driver 初始化 ItemPage\n    \n        # 点击查询\n        item.click_sel_button()\n        sleep(1)\n        # 定位名称输入框\n        element_to_double_click = driver.find_element(\n            By.XPATH,\n            '(//div[@class=\"vxe-table--render-wrapper\"])[3]/div[1]/div[2]//tr[1]/td[4]',\n        )\n        # 创建一个 ActionChains 对象\n        actions = ActionChains(driver)\n        # 双击命令\n        actions.double_click(element_to_double_click).perform()\n        sleep(1)\n        # 点击工厂代码\n        item.click_button('//div[text()=\"工厂代码\" and contains(@optid,\"opt_\")]')\n        sleep(1)\n        # 点击比较关系框\n        item.click_button(\n            '(//div[@class=\"vxe-table--render-wrapper\"])[3]/div[1]/div[2]//tr[1]/td[5]//input'\n        )\n        sleep(1)\n        # 点击=\n        item.click_button('//div[text()=\"=\" and contains(@optid,\"opt_\")]')\n        sleep(1)\n        # 点击输入数值\n        item.enter_texts(\n            '(//div[@class=\"vxe-table--render-wrapper\"])[3]/div[1]/div[2]//tr[1]/td[6]//input',\n            \"1测试A\",\n        )\n        sleep(1)\n    \n        # 点击确认\n        item.click_button(\n            '(//button[@class=\"ivu-btn ivu-btn-primary\"]/span[text()=\"确定\"])[2]'\n        )\n        sleep(1)\n        # 定位第一行是否为产品A\n>       itemcode = item.get_find_element_xpath(\n            '(//table[contains(@class, \"vxe-table--body\")])[2]//tr[@class=\"vxe-body--row\"][1]/td[2]'\n        ).text\n\nTests\\test_material\\test_warehouseLocation.py:392: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nPages\\materialPage\\warehouseLocation_page.py:123: in get_find_element_xpath\n    return self.find_element(By.XPATH, xpath)\nPages\\base_page.py:24: in find_element\n    return WebDriverWait(self.driver, wait_time).until(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"3ac198255f2f4793c6189a5a5b8c2793\")>\nmethod = <function presence_of_element_located.<locals>._predicate at 0x0000024D21432A70>, message = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        -----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x7ff77a1f6f65+78965]\nE       \tGetHandleVerifier [0x0x7ff77a1f6fc0+79056]\nE       \t(No symbol) [0x0x7ff779f89dda]\nE       \t(No symbol) [0x0x7ff779fe02ea]\nE       \t(No symbol) [0x0x7ff779fe059c]\nE       \t(No symbol) [0x0x7ff77a033f37]\nE       \t(No symbol) [0x0x7ff77a0086af]\nE       \t(No symbol) [0x0x7ff77a030dbe]\nE       \t(No symbol) [0x0x7ff77a008443]\nE       \t(No symbol) [0x0x7ff779fd1311]\nE       \t(No symbol) [0x0x7ff779fd20a3]\nE       \tGetHandleVerifier [0x0x7ff77a4ae26d+2926461]\nE       \tGetHandleVerifier [0x0x7ff77a4a8993+2903715]\nE       \tGetHandleVerifier [0x0x7ff77a4c6aed+3026941]\nE       \tGetHandleVerifier [0x0x7ff77a2116fe+187406]\nE       \tGetHandleVerifier [0x0x7ff77a2196ef+220159]\nE       \tGetHandleVerifier [0x0x7ff77a1ffaf4+114692]\nE       \tGetHandleVerifier [0x0x7ff77a1ffca9+115129]\nE       \tGetHandleVerifier [0x0x7ff77a1e64d8+10728]\nE       \tBaseThreadInitThunk [0x0x7fff79487374+20]\nE       \tRtlUserThreadStart [0x0x7fff7967cc91+33]\n\nmyenv\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:138: TimeoutException","steps":[],"attachments":[{"uid":"8fa4dc39368288b1","name":"test_find_element_timeout","source":"8fa4dc39368288b1.png","type":"image/png","size":89442},{"uid":"a5249b5be41534e5","name":"log","source":"a5249b5be41534e5.txt","type":"text/plain","size":3490}],"parameters":[],"attachmentStep":false,"stepsCount":0,"hasContent":true,"attachmentsCount":2,"shouldDisplayMessage":true},"afterStages":[{"name":"login_to_item::0","time":{"start":1753110143918,"stop":1753110146042,"duration":2124},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentStep":false,"stepsCount":0,"hasContent":false,"attachmentsCount":0,"shouldDisplayMessage":false}],"labels":[{"name":"story","value":"查询工厂代码成功"},{"name":"feature","value":"仓库库位测试用例"},{"name":"parentSuite","value":"Tests.test_material"},{"name":"suite","value":"test_warehouseLocation"},{"name":"subSuite","value":"TestItemPage"},{"name":"host","value":"WIN-20240820MJV"},{"name":"thread","value":"26464-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"Tests.test_material.test_warehouseLocation"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"871591a12a90b9eb","status":"failed","statusDetails":"AssertionError: assert ('111' == '1测试A'\n  \n  \u001B[0m\u001B[91m- 1测试A\u001B[39;49;00m\u001B[90m\u001B[39;49;00m\n  \u001B[92m+ 111\u001B[39;49;00m\u001B[90m\u001B[39;49;00m)","time":{"start":1753110105322,"stop":1753110114591,"duration":9269}}],"categories":[{"name":"Test defects","matchedStatuses":[]}],"tags":[]},"source":"8fae34f2c34bb65b.json","parameterValues":[]}