{"uid":"f3096cf68b53f684","name":"test_setting_layoutlist_deletesuccess","fullName":"Tests.test_items.test_setting.TestSettingPage#test_setting_layoutlist_deletesuccess","historyId":"1e85e6b51a0256e497c63e29a0554424","time":{"start":1760368266088,"stop":1760368277448,"duration":11360},"status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n\tGetHandleVerifier [0x0x7ff71bec6f65+78965]\n\tGetHandleVerifier [0x0x7ff71bec6fc0+79056]\n\t(No symbol) [0x0x7ff71bc59dda]\n\t(No symbol) [0x0x7ff71bcb02ea]\n\t(No symbol) [0x0x7ff71bcb059c]\n\t(No symbol) [0x0x7ff71bd03f37]\n\t(No symbol) [0x0x7ff71bcd86af]\n\t(No symbol) [0x0x7ff71bd00dbe]\n\t(No symbol) [0x0x7ff71bcd8443]\n\t(No symbol) [0x0x7ff71bca1311]\n\t(No symbol) [0x0x7ff71bca20a3]\n\tGetHandleVerifier [0x0x7ff71c17e26d+2926461]\n\tGetHandleVerifier [0x0x7ff71c178993+2903715]\n\tGetHandleVerifier [0x0x7ff71c196aed+3026941]\n\tGetHandleVerifier [0x0x7ff71bee16fe+187406]\n\tGetHandleVerifier [0x0x7ff71bee96ef+220159]\n\tGetHandleVerifier [0x0x7ff71becfaf4+114692]\n\tGetHandleVerifier [0x0x7ff71becfca9+115129]\n\tGetHandleVerifier [0x0x7ff71beb64d8+10728]\n\tBaseThreadInitThunk [0x0x7ffe68f47374+20]\n\tRtlUserThreadStart [0x0x7ffe691dcc91+33]","statusTrace":"self = <test_items.test_setting.TestSettingPage object at 0x00000216A241FD60>, login_to_setting = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"1c0e97faf1a3e6bd7c26a36aa5632a60\")>\n\n    @allure.story(\"布局删除成功\")\n    # @pytest.mark.run(order=1)\n    def test_setting_layoutlist_deletesuccess(self, login_to_setting):\n        driver = login_to_setting  # WebDriver 实例\n        setting = SettingPage(driver)  # 用 driver 初始化 SettingPage\n        layout = \"修改布局\"\n        sleep(1)\n        setting.click_button('//i[@id=\"tabsDrawerIcon\"]')\n        # 获取目标 div 元素，这里的目标是具有特定文本的 div\n>       target_div = setting.get_find_element_xpath(\n            f'//div[@id=\"container\"]/div[.//text()=\"{layout}\"]'\n        )\n\nTests\\test_items\\test_setting.py:2203: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nPages\\itemsPage\\setting_page.py:27: in get_find_element_xpath\n    return self.find_element(By.XPATH, xpath)\nPages\\base_page.py:28: in find_element\n    return WebDriverWait(self.driver, wait_time).until(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"1c0e97faf1a3e6bd7c26a36aa5632a60\")>, method = <function presence_of_element_located.<locals>._predicate at 0x00000216A3D7A320>, message = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        -----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x7ff71bec6f65+78965]\nE       \tGetHandleVerifier [0x0x7ff71bec6fc0+79056]\nE       \t(No symbol) [0x0x7ff71bc59dda]\nE       \t(No symbol) [0x0x7ff71bcb02ea]\nE       \t(No symbol) [0x0x7ff71bcb059c]\nE       \t(No symbol) [0x0x7ff71bd03f37]\nE       \t(No symbol) [0x0x7ff71bcd86af]\nE       \t(No symbol) [0x0x7ff71bd00dbe]\nE       \t(No symbol) [0x0x7ff71bcd8443]\nE       \t(No symbol) [0x0x7ff71bca1311]\nE       \t(No symbol) [0x0x7ff71bca20a3]\nE       \tGetHandleVerifier [0x0x7ff71c17e26d+2926461]\nE       \tGetHandleVerifier [0x0x7ff71c178993+2903715]\nE       \tGetHandleVerifier [0x0x7ff71c196aed+3026941]\nE       \tGetHandleVerifier [0x0x7ff71bee16fe+187406]\nE       \tGetHandleVerifier [0x0x7ff71bee96ef+220159]\nE       \tGetHandleVerifier [0x0x7ff71becfaf4+114692]\nE       \tGetHandleVerifier [0x0x7ff71becfca9+115129]\nE       \tGetHandleVerifier [0x0x7ff71beb64d8+10728]\nE       \tBaseThreadInitThunk [0x0x7ffe68f47374+20]\nE       \tRtlUserThreadStart [0x0x7ffe691dcc91+33]\n\nmyenv\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:138: TimeoutException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"login_to_setting","time":{"start":1760368255885,"stop":1760368266087,"duration":10202},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false,"attachmentsCount":0}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n\tGetHandleVerifier [0x0x7ff71bec6f65+78965]\n\tGetHandleVerifier [0x0x7ff71bec6fc0+79056]\n\t(No symbol) [0x0x7ff71bc59dda]\n\t(No symbol) [0x0x7ff71bcb02ea]\n\t(No symbol) [0x0x7ff71bcb059c]\n\t(No symbol) [0x0x7ff71bd03f37]\n\t(No symbol) [0x0x7ff71bcd86af]\n\t(No symbol) [0x0x7ff71bd00dbe]\n\t(No symbol) [0x0x7ff71bcd8443]\n\t(No symbol) [0x0x7ff71bca1311]\n\t(No symbol) [0x0x7ff71bca20a3]\n\tGetHandleVerifier [0x0x7ff71c17e26d+2926461]\n\tGetHandleVerifier [0x0x7ff71c178993+2903715]\n\tGetHandleVerifier [0x0x7ff71c196aed+3026941]\n\tGetHandleVerifier [0x0x7ff71bee16fe+187406]\n\tGetHandleVerifier [0x0x7ff71bee96ef+220159]\n\tGetHandleVerifier [0x0x7ff71becfaf4+114692]\n\tGetHandleVerifier [0x0x7ff71becfca9+115129]\n\tGetHandleVerifier [0x0x7ff71beb64d8+10728]\n\tBaseThreadInitThunk [0x0x7ffe68f47374+20]\n\tRtlUserThreadStart [0x0x7ffe691dcc91+33]","statusTrace":"self = <test_items.test_setting.TestSettingPage object at 0x00000216A241FD60>, login_to_setting = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"1c0e97faf1a3e6bd7c26a36aa5632a60\")>\n\n    @allure.story(\"布局删除成功\")\n    # @pytest.mark.run(order=1)\n    def test_setting_layoutlist_deletesuccess(self, login_to_setting):\n        driver = login_to_setting  # WebDriver 实例\n        setting = SettingPage(driver)  # 用 driver 初始化 SettingPage\n        layout = \"修改布局\"\n        sleep(1)\n        setting.click_button('//i[@id=\"tabsDrawerIcon\"]')\n        # 获取目标 div 元素，这里的目标是具有特定文本的 div\n>       target_div = setting.get_find_element_xpath(\n            f'//div[@id=\"container\"]/div[.//text()=\"{layout}\"]'\n        )\n\nTests\\test_items\\test_setting.py:2203: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nPages\\itemsPage\\setting_page.py:27: in get_find_element_xpath\n    return self.find_element(By.XPATH, xpath)\nPages\\base_page.py:28: in find_element\n    return WebDriverWait(self.driver, wait_time).until(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"1c0e97faf1a3e6bd7c26a36aa5632a60\")>, method = <function presence_of_element_located.<locals>._predicate at 0x00000216A3D7A320>, message = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        -----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x7ff71bec6f65+78965]\nE       \tGetHandleVerifier [0x0x7ff71bec6fc0+79056]\nE       \t(No symbol) [0x0x7ff71bc59dda]\nE       \t(No symbol) [0x0x7ff71bcb02ea]\nE       \t(No symbol) [0x0x7ff71bcb059c]\nE       \t(No symbol) [0x0x7ff71bd03f37]\nE       \t(No symbol) [0x0x7ff71bcd86af]\nE       \t(No symbol) [0x0x7ff71bd00dbe]\nE       \t(No symbol) [0x0x7ff71bcd8443]\nE       \t(No symbol) [0x0x7ff71bca1311]\nE       \t(No symbol) [0x0x7ff71bca20a3]\nE       \tGetHandleVerifier [0x0x7ff71c17e26d+2926461]\nE       \tGetHandleVerifier [0x0x7ff71c178993+2903715]\nE       \tGetHandleVerifier [0x0x7ff71c196aed+3026941]\nE       \tGetHandleVerifier [0x0x7ff71bee16fe+187406]\nE       \tGetHandleVerifier [0x0x7ff71bee96ef+220159]\nE       \tGetHandleVerifier [0x0x7ff71becfaf4+114692]\nE       \tGetHandleVerifier [0x0x7ff71becfca9+115129]\nE       \tGetHandleVerifier [0x0x7ff71beb64d8+10728]\nE       \tBaseThreadInitThunk [0x0x7ffe68f47374+20]\nE       \tRtlUserThreadStart [0x0x7ffe691dcc91+33]\n\nmyenv\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:138: TimeoutException","steps":[],"attachments":[{"uid":"69f635680809fa53","name":"test_setting_layoutlist_deletesuccess_failure","source":"69f635680809fa53.png","type":"image/png","size":110568},{"uid":"cef3d09f164daad2","name":"test_setting_layoutlist_deletesuccess_source","source":"cef3d09f164daad2.html","type":"text/html","size":1342791},{"uid":"2849fdffadbcaf9a","name":"log","source":"2849fdffadbcaf9a.txt","type":"text/plain","size":1130}],"parameters":[],"stepsCount":0,"hasContent":true,"attachmentStep":false,"shouldDisplayMessage":true,"attachmentsCount":3},"afterStages":[{"name":"login_to_setting::0","time":{"start":1760368277805,"stop":1760368280057,"duration":2252},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false,"attachmentsCount":0}],"labels":[{"name":"story","value":"布局删除成功"},{"name":"feature","value":"标准应用设置测试用例"},{"name":"parentSuite","value":"Tests.test_items"},{"name":"suite","value":"test_setting"},{"name":"subSuite","value":"TestSettingPage"},{"name":"host","value":"WIN-20240820MJV"},{"name":"thread","value":"26508-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"Tests.test_items.test_setting"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[]}],"tags":[]},"source":"f3096cf68b53f684.json","parameterValues":[]}