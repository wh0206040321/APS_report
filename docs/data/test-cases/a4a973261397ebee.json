{"uid":"a4a973261397ebee","name":"test_item_addsuccess1","fullName":"Tests.test_material.test_materialDelUserMap.TestItemPage#test_item_addsuccess1","historyId":"99e0ff7e8a166eee5389b72ceb5d23ce","time":{"start":1755102209817,"stop":1755102282847,"duration":73030},"status":"broken","statusMessage":"selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id: session deleted as the browser has closed the connection\nfrom disconnected: Unable to receive message from renderer\n  (Session info: chrome=137.0.7151.69)\nStacktrace:\n\tGetHandleVerifier [0x0x7ff634466f65+78965]\n\tGetHandleVerifier [0x0x7ff634466fc0+79056]\n\t(No symbol) [0x0x7ff6341f9dda]\n\t(No symbol) [0x0x7ff6341e727c]\n\t(No symbol) [0x0x7ff6341e6f6a]\n\t(No symbol) [0x0x7ff6341e4b38]\n\t(No symbol) [0x0x7ff6341e559f]\n\t(No symbol) [0x0x7ff634201184]\n\t(No symbol) [0x0x7ff63420482c]\n\t(No symbol) [0x0x7ff6342048ff]\n\t(No symbol) [0x0x7ff63424fb97]\n\t(No symbol) [0x0x7ff63425059c]\n\t(No symbol) [0x0x7ff6342a3f37]\n\t(No symbol) [0x0x7ff6342786af]\n\t(No symbol) [0x0x7ff6342a0dbe]\n\t(No symbol) [0x0x7ff634278443]\n\t(No symbol) [0x0x7ff634241311]\n\t(No symbol) [0x0x7ff6342420a3]\n\tGetHandleVerifier [0x0x7ff63471e26d+2926461]\n\tGetHandleVerifier [0x0x7ff634718993+2903715]\n\tGetHandleVerifier [0x0x7ff634736aed+3026941]\n\tGetHandleVerifier [0x0x7ff6344816fe+187406]\n\tGetHandleVerifier [0x0x7ff6344896ef+220159]\n\tGetHandleVerifier [0x0x7ff63446faf4+114692]\n\tGetHandleVerifier [0x0x7ff63446fca9+115129]\n\tGetHandleVerifier [0x0x7ff6344564d8+10728]\n\tBaseThreadInitThunk [0x0x7ff992b87374+20]\n\tRtlUserThreadStart [0x0x7ff99357cc91+33]","statusTrace":"self = <test_material.test_materialDelUserMap.TestItemPage object at 0x0000023BD3F7AF20>\nlogin_to_item = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"5f1f22b7b641ac3276cb7e45258eae9a\")>\n\n    @allure.story(\"添加测试数据\")\n    # @pytest.mark.run(order=1)\n    def test_item_addsuccess1(self, login_to_item):\n>       self.item.click_add_button()\n\nTests\\test_material\\test_materialDelUserMap.py:170: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nPages\\materialPage\\warehouseLocation_page.py:17: in click_add_button\n    self.click(By.XPATH, '//p[text()=\"新增\"]')\nPages\\base_page.py:45: in click\n    element = WebDriverWait(self.driver, wait_time).until(\nmyenv\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:129: in until\n    value = method(self._driver)\nmyenv\\lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py:622: in _predicate\n    target = driver.find_element(*target)  # grab element at locator\nmyenv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:914: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\nmyenv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:447: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000023BD48FF880>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"invalid session id\",\"message\":\"invalid session id: session deleted as the...ff6344564d8+10728]\\\\n\\\\tBaseThreadInitThunk [0x0x7ff992b87374+20]\\\\n\\\\tRtlUserThreadStart [0x0x7ff99357cc91+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id: session deleted as the browser has closed the connection\nE       from disconnected: Unable to receive message from renderer\nE         (Session info: chrome=137.0.7151.69)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x7ff634466f65+78965]\nE       \tGetHandleVerifier [0x0x7ff634466fc0+79056]\nE       \t(No symbol) [0x0x7ff6341f9dda]\nE       \t(No symbol) [0x0x7ff6341e727c]\nE       \t(No symbol) [0x0x7ff6341e6f6a]\nE       \t(No symbol) [0x0x7ff6341e4b38]\nE       \t(No symbol) [0x0x7ff6341e559f]\nE       \t(No symbol) [0x0x7ff634201184]\nE       \t(No symbol) [0x0x7ff63420482c]\nE       \t(No symbol) [0x0x7ff6342048ff]\nE       \t(No symbol) [0x0x7ff63424fb97]\nE       \t(No symbol) [0x0x7ff63425059c]\nE       \t(No symbol) [0x0x7ff6342a3f37]\nE       \t(No symbol) [0x0x7ff6342786af]\nE       \t(No symbol) [0x0x7ff6342a0dbe]\nE       \t(No symbol) [0x0x7ff634278443]\nE       \t(No symbol) [0x0x7ff634241311]\nE       \t(No symbol) [0x0x7ff6342420a3]\nE       \tGetHandleVerifier [0x0x7ff63471e26d+2926461]\nE       \tGetHandleVerifier [0x0x7ff634718993+2903715]\nE       \tGetHandleVerifier [0x0x7ff634736aed+3026941]\nE       \tGetHandleVerifier [0x0x7ff6344816fe+187406]\nE       \tGetHandleVerifier [0x0x7ff6344896ef+220159]\nE       \tGetHandleVerifier [0x0x7ff63446faf4+114692]\nE       \tGetHandleVerifier [0x0x7ff63446fca9+115129]\nE       \tGetHandleVerifier [0x0x7ff6344564d8+10728]\nE       \tBaseThreadInitThunk [0x0x7ff992b87374+20]\nE       \tRtlUserThreadStart [0x0x7ff99357cc91+33]\n\nmyenv\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: InvalidSessionIdException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"login_to_item","time":{"start":1755102200996,"stop":1755102209811,"duration":8815},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentStep":false,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"setup","time":{"start":1755102209811,"stop":1755102209816,"duration":5},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentStep":false,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id: session deleted as the browser has closed the connection\nfrom disconnected: Unable to receive message from renderer\n  (Session info: chrome=137.0.7151.69)\nStacktrace:\n\tGetHandleVerifier [0x0x7ff634466f65+78965]\n\tGetHandleVerifier [0x0x7ff634466fc0+79056]\n\t(No symbol) [0x0x7ff6341f9dda]\n\t(No symbol) [0x0x7ff6341e727c]\n\t(No symbol) [0x0x7ff6341e6f6a]\n\t(No symbol) [0x0x7ff6341e4b38]\n\t(No symbol) [0x0x7ff6341e559f]\n\t(No symbol) [0x0x7ff634201184]\n\t(No symbol) [0x0x7ff63420482c]\n\t(No symbol) [0x0x7ff6342048ff]\n\t(No symbol) [0x0x7ff63424fb97]\n\t(No symbol) [0x0x7ff63425059c]\n\t(No symbol) [0x0x7ff6342a3f37]\n\t(No symbol) [0x0x7ff6342786af]\n\t(No symbol) [0x0x7ff6342a0dbe]\n\t(No symbol) [0x0x7ff634278443]\n\t(No symbol) [0x0x7ff634241311]\n\t(No symbol) [0x0x7ff6342420a3]\n\tGetHandleVerifier [0x0x7ff63471e26d+2926461]\n\tGetHandleVerifier [0x0x7ff634718993+2903715]\n\tGetHandleVerifier [0x0x7ff634736aed+3026941]\n\tGetHandleVerifier [0x0x7ff6344816fe+187406]\n\tGetHandleVerifier [0x0x7ff6344896ef+220159]\n\tGetHandleVerifier [0x0x7ff63446faf4+114692]\n\tGetHandleVerifier [0x0x7ff63446fca9+115129]\n\tGetHandleVerifier [0x0x7ff6344564d8+10728]\n\tBaseThreadInitThunk [0x0x7ff992b87374+20]\n\tRtlUserThreadStart [0x0x7ff99357cc91+33]","statusTrace":"self = <test_material.test_materialDelUserMap.TestItemPage object at 0x0000023BD3F7AF20>\nlogin_to_item = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"5f1f22b7b641ac3276cb7e45258eae9a\")>\n\n    @allure.story(\"添加测试数据\")\n    # @pytest.mark.run(order=1)\n    def test_item_addsuccess1(self, login_to_item):\n>       self.item.click_add_button()\n\nTests\\test_material\\test_materialDelUserMap.py:170: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nPages\\materialPage\\warehouseLocation_page.py:17: in click_add_button\n    self.click(By.XPATH, '//p[text()=\"新增\"]')\nPages\\base_page.py:45: in click\n    element = WebDriverWait(self.driver, wait_time).until(\nmyenv\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:129: in until\n    value = method(self._driver)\nmyenv\\lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py:622: in _predicate\n    target = driver.find_element(*target)  # grab element at locator\nmyenv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:914: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\nmyenv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:447: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000023BD48FF880>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"invalid session id\",\"message\":\"invalid session id: session deleted as the...ff6344564d8+10728]\\\\n\\\\tBaseThreadInitThunk [0x0x7ff992b87374+20]\\\\n\\\\tRtlUserThreadStart [0x0x7ff99357cc91+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id: session deleted as the browser has closed the connection\nE       from disconnected: Unable to receive message from renderer\nE         (Session info: chrome=137.0.7151.69)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x7ff634466f65+78965]\nE       \tGetHandleVerifier [0x0x7ff634466fc0+79056]\nE       \t(No symbol) [0x0x7ff6341f9dda]\nE       \t(No symbol) [0x0x7ff6341e727c]\nE       \t(No symbol) [0x0x7ff6341e6f6a]\nE       \t(No symbol) [0x0x7ff6341e4b38]\nE       \t(No symbol) [0x0x7ff6341e559f]\nE       \t(No symbol) [0x0x7ff634201184]\nE       \t(No symbol) [0x0x7ff63420482c]\nE       \t(No symbol) [0x0x7ff6342048ff]\nE       \t(No symbol) [0x0x7ff63424fb97]\nE       \t(No symbol) [0x0x7ff63425059c]\nE       \t(No symbol) [0x0x7ff6342a3f37]\nE       \t(No symbol) [0x0x7ff6342786af]\nE       \t(No symbol) [0x0x7ff6342a0dbe]\nE       \t(No symbol) [0x0x7ff634278443]\nE       \t(No symbol) [0x0x7ff634241311]\nE       \t(No symbol) [0x0x7ff6342420a3]\nE       \tGetHandleVerifier [0x0x7ff63471e26d+2926461]\nE       \tGetHandleVerifier [0x0x7ff634718993+2903715]\nE       \tGetHandleVerifier [0x0x7ff634736aed+3026941]\nE       \tGetHandleVerifier [0x0x7ff6344816fe+187406]\nE       \tGetHandleVerifier [0x0x7ff6344896ef+220159]\nE       \tGetHandleVerifier [0x0x7ff63446faf4+114692]\nE       \tGetHandleVerifier [0x0x7ff63446fca9+115129]\nE       \tGetHandleVerifier [0x0x7ff6344564d8+10728]\nE       \tBaseThreadInitThunk [0x0x7ff992b87374+20]\nE       \tRtlUserThreadStart [0x0x7ff99357cc91+33]\n\nmyenv\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: InvalidSessionIdException","steps":[],"attachments":[{"uid":"a6698458097b49eb","name":"test_item_addsuccess1_failure","source":"a6698458097b49eb.png","type":"image/png","size":30845},{"uid":"73dead97d1ecddba","name":"test_item_addsuccess1_source","source":"73dead97d1ecddba.html","type":"text/html","size":182301},{"uid":"ed53e2d854b171ea","name":"test_item_addsuccess1_failure","source":"ed53e2d854b171ea.png","type":"image/png","size":21324},{"uid":"54852adeeb43299f","name":"test_item_addsuccess1_source","source":"54852adeeb43299f.html","type":"text/html","size":179447},{"uid":"7a435e15dc46441e","name":"test_item_addsuccess1_failure","source":"7a435e15dc46441e.png","type":"image/png","size":21324},{"uid":"c0fabb1f0d58864b","name":"test_item_addsuccess1_source","source":"c0fabb1f0d58864b.html","type":"text/html","size":179447},{"uid":"2b065d4451e114d9","name":"test_item_addsuccess1_failure","source":"2b065d4451e114d9.png","type":"image/png","size":30845},{"uid":"bb2a86e414b554cb","name":"test_item_addsuccess1_source","source":"bb2a86e414b554cb.html","type":"text/html","size":182301},{"uid":"b681bf1a2674bc32","name":"test_item_addsuccess1_failure","source":"b681bf1a2674bc32.png","type":"image/png","size":22036},{"uid":"606e6b77444bbc98","name":"test_item_addsuccess1_source","source":"606e6b77444bbc98.html","type":"text/html","size":179437},{"uid":"710916408971cd9a","name":"test_item_addsuccess1_failure","source":"710916408971cd9a.png","type":"image/png","size":21324},{"uid":"7afbc3b8efd2b231","name":"test_item_addsuccess1_source","source":"7afbc3b8efd2b231.html","type":"text/html","size":179447},{"uid":"72cef2d1302647d1","name":"test_item_addsuccess1_failure","source":"72cef2d1302647d1.png","type":"image/png","size":30859},{"uid":"e29984d544fc17fd","name":"test_item_addsuccess1_source","source":"e29984d544fc17fd.html","type":"text/html","size":182301},{"uid":"933958bb163f17b0","name":"test_item_addsuccess1_failure","source":"933958bb163f17b0.png","type":"image/png","size":22036},{"uid":"dee861b37353b4d7","name":"test_item_addsuccess1_source","source":"dee861b37353b4d7.html","type":"text/html","size":179437},{"uid":"4866601c75990198","name":"test_item_addsuccess1_failure","source":"4866601c75990198.png","type":"image/png","size":30845},{"uid":"2432d0f73e1ba4fd","name":"test_item_addsuccess1_source","source":"2432d0f73e1ba4fd.html","type":"text/html","size":182301},{"uid":"66ae0be8736061f3","name":"test_item_addsuccess1_failure","source":"66ae0be8736061f3.png","type":"image/png","size":30845},{"uid":"1527843de3a8851b","name":"test_item_addsuccess1_source","source":"1527843de3a8851b.html","type":"text/html","size":182301},{"uid":"989c3c0f85a8eacd","name":"test_item_addsuccess1_failure","source":"989c3c0f85a8eacd.png","type":"image/png","size":22036},{"uid":"9a7bf084c3522419","name":"test_item_addsuccess1_source","source":"9a7bf084c3522419.html","type":"text/html","size":179437},{"uid":"24bdf95e856ff5b2","name":"test_item_addsuccess1_failure","source":"24bdf95e856ff5b2.png","type":"image/png","size":30845},{"uid":"9ca3beda246c4eae","name":"test_item_addsuccess1_source","source":"9ca3beda246c4eae.html","type":"text/html","size":182301},{"uid":"89c8a8f7a856232a","name":"test_item_addsuccess1_failure","source":"89c8a8f7a856232a.png","type":"image/png","size":30845},{"uid":"67efcb59921cce24","name":"test_item_addsuccess1_source","source":"67efcb59921cce24.html","type":"text/html","size":182301},{"uid":"9352617a65c59673","name":"test_item_addsuccess1_failure","source":"9352617a65c59673.png","type":"image/png","size":30845},{"uid":"e79af2f37bdaaad4","name":"test_item_addsuccess1_source","source":"e79af2f37bdaaad4.html","type":"text/html","size":182301},{"uid":"304822a0bfabad5f","name":"test_item_addsuccess1_failure","source":"304822a0bfabad5f.png","type":"image/png","size":30845},{"uid":"7ed29426e0f1e10f","name":"test_item_addsuccess1_source","source":"7ed29426e0f1e10f.html","type":"text/html","size":182301},{"uid":"a8131327bdce6ace","name":"test_item_addsuccess1_failure","source":"a8131327bdce6ace.png","type":"image/png","size":22036},{"uid":"7c5b6538c51e1f09","name":"test_item_addsuccess1_source","source":"7c5b6538c51e1f09.html","type":"text/html","size":179437},{"uid":"e6f9eccedaa8e548","name":"test_item_addsuccess1_failure","source":"e6f9eccedaa8e548.png","type":"image/png","size":22036},{"uid":"48cb5a15ba9a0c17","name":"test_item_addsuccess1_source","source":"48cb5a15ba9a0c17.html","type":"text/html","size":179437},{"uid":"9ecbaa0b1c8bc21b","name":"test_item_addsuccess1_failure","source":"9ecbaa0b1c8bc21b.png","type":"image/png","size":30859},{"uid":"1fa33864694395ce","name":"test_item_addsuccess1_source","source":"1fa33864694395ce.html","type":"text/html","size":182301},{"uid":"e58ed96ae42d2ba8","name":"test_item_addsuccess1_failure","source":"e58ed96ae42d2ba8.png","type":"image/png","size":30845},{"uid":"d8976fd57237022d","name":"test_item_addsuccess1_source","source":"d8976fd57237022d.html","type":"text/html","size":182301},{"uid":"b4f743b9c22102b0","name":"test_item_addsuccess1_failure","source":"b4f743b9c22102b0.png","type":"image/png","size":30845},{"uid":"b1c96af853f733f","name":"test_item_addsuccess1_source","source":"b1c96af853f733f.html","type":"text/html","size":182301},{"uid":"c80fbf79a6cc5fe9","name":"test_item_addsuccess1_failure","source":"c80fbf79a6cc5fe9.png","type":"image/png","size":22036},{"uid":"418e8d36b297d182","name":"test_item_addsuccess1_source","source":"418e8d36b297d182.html","type":"text/html","size":179437},{"uid":"7b20b00ed83a18d0","name":"log","source":"7b20b00ed83a18d0.txt","type":"text/plain","size":887}],"parameters":[],"stepsCount":0,"attachmentStep":false,"hasContent":true,"shouldDisplayMessage":true,"attachmentsCount":43},"afterStages":[{"name":"login_to_item::0","time":{"start":1755102770110,"stop":1755102772132,"duration":2022},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentStep":false,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0}],"labels":[{"name":"feature","value":"用户与物料员测试用例"},{"name":"story","value":"添加测试数据"},{"name":"parentSuite","value":"Tests.test_material"},{"name":"suite","value":"test_materialDelUserMap"},{"name":"subSuite","value":"TestItemPage"},{"name":"host","value":"WIN-20240820MJV"},{"name":"thread","value":"3232-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"Tests.test_material.test_materialDelUserMap"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":[]},"source":"a4a973261397ebee.json","parameterValues":[]}