{"uid":"685b37fae8379819","name":"test_process_selectsuccess3","fullName":"Tests.test_items.test_process.TestProcessPage#test_process_selectsuccess3","historyId":"05b6dc68b3d50d6e39ec52c64efef622","time":{"start":1756194320819,"stop":1756194338604,"duration":17785},"status":"failed","statusMessage":"AssertionError: 第 4 行不符合：td3=检查2, td8=1\nassert ('1' in '检查2' or 1 > 60)","statusTrace":"self = <test_items.test_process.TestProcessPage object at 0x000001DC53EBABF0>\nlogin_to_process = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"22b719ffba8fc07bc6b9972b3d52fbe9\")>\n\n    @allure.story(\"查询工序名包含1或表示顺序>60\")\n    # @pytest.mark.run(order=1)\n    def test_process_selectsuccess3(self, login_to_process):\n        driver = login_to_process  # WebDriver 实例\n        process = ProcessPage(driver)  # 用 driver 初始化 ProcessPage\n        name = \"1\"\n        num = 60\n        # 点击查询\n        process.click_sel_button()\n        sleep(1)\n    \n        # 定位名称输入框\n        element_to_double_click = driver.find_element(\n            By.XPATH,\n            '(//div[@class=\"vxe-table--render-wrapper\"])[3]/div[1]/div[2]//tr[1]/td[4]',\n        )\n        # 创建一个 ActionChains 对象\n        actions = ActionChains(driver)\n        # 双击命令\n        actions.double_click(element_to_double_click).perform()\n        sleep(1)\n        # 点击工序名\n        process.click_button('//div[text()=\"工序名\" and contains(@optid,\"opt_\")]')\n        sleep(1)\n        # 点击（\n        process.click_button(\n            '(//div[@class=\"vxe-table--render-wrapper\"])[3]/div[1]/div[2]//tr[1]/td[3]'\n        )\n        process.click_button('//div[text()=\"(\" and contains(@optid,\"opt_\")]')\n        # 点击比较关系框\n        process.click_button(\n            '(//div[@class=\"vxe-table--render-wrapper\"])[3]/div[1]/div[2]//tr[1]/td[5]//input'\n        )\n        sleep(1)\n        # 点击包含\n        process.click_button('//div[text()=\"包含\" and contains(@optid,\"opt_\")]')\n        sleep(1)\n        # 点击输入数值\n        process.enter_texts(\n            '(//div[@class=\"vxe-table--render-wrapper\"])[3]/div[1]/div[2]//tr[1]/td[6]//input',\n            \"检查\",\n        )\n    \n        # 点击（\n        process.click_button(\n            '(//div[@class=\"vxe-table--render-wrapper\"])[3]/div[1]/div[2]//tr[1]/td[7]'\n        )\n        process.click_button('//div[text()=\")\" and contains(@optid,\"opt_\")]')\n    \n        sleep(1)\n        double_click = driver.find_element(\n            By.XPATH,\n            '(//div[@class=\"vxe-table--render-wrapper\"])[3]/div[1]/div[2]//tr[2]/td[2]',\n        )\n        # 双击命令\n        actions.double_click(double_click).perform()\n    \n        # 定义or元素的XPath\n        or_xpath = '//div[text()=\"or\" and contains(@optid,\"opt_\")]'\n    \n        try:\n            # 首先尝试直接查找并点击and元素\n            and_element = WebDriverWait(driver, 2).until(\n                EC.presence_of_element_located((By.XPATH, or_xpath))\n            )\n            and_element.click()\n        except:\n            # 如果直接查找失败，进入循环双击操作\n            max_attempts = 5\n            attempt = 0\n            or_found = False\n    \n            while attempt < max_attempts and not or_found:\n                try:\n                    # 执行双击操作\n                    actions.double_click(double_click).perform()\n                    sleep(1)\n    \n                    # 再次尝试查找or元素\n                    or_element = WebDriverWait(driver, 2).until(\n                        EC.presence_of_element_located((By.XPATH, or_xpath))\n                    )\n                    or_element.click()\n                    or_found = True\n                except:\n                    attempt += 1\n                    sleep(1)\n    \n            if not or_found:\n                raise Exception(f\"在{max_attempts}次尝试后仍未找到并点击到'or'元素\")\n    \n        # 点击（\n        process.click_button(\n            '(//div[@class=\"vxe-table--render-wrapper\"])[3]/div[1]/div[2]//tr[2]/td[3]'\n        )\n        process.click_button('//div[text()=\"(\" and contains(@optid,\"opt_\")]')\n        # 点击物料优先度\n        process.click_button(\n            '(//div[@class=\"vxe-table--render-wrapper\"])[3]/div[1]/div[2]//tr[2]/td[4]'\n        )\n        process.click_button('//div[text()=\"表示顺序\" and contains(@optid,\"opt_\")]')\n        sleep(1)\n        # 点击比较关系框\n        process.click_button(\n            '(//div[@class=\"vxe-table--render-wrapper\"])[3]/div[1]/div[2]//tr[2]/td[5]//input'\n        )\n        # 点击>\n        sleep(1)\n        process.click_button('//div[text()=\">\" and contains(@optid,\"opt_\")]')\n        sleep(1)\n        # 点击输入数值70\n        process.enter_texts(\n            '(//div[@class=\"vxe-table--render-wrapper\"])[3]/div[1]/div[2]//tr[2]/td[6]//input',\n            \"70\",\n        )\n        # 点击（\n        process.click_button(\n            '(//div[@class=\"vxe-table--render-wrapper\"])[3]/div[1]/div[2]//tr[2]/td[7]'\n        )\n        process.click_button('//div[text()=\")\" and contains(@optid,\"opt_\")]')\n    \n        sleep(1)\n    \n        # 点击确认\n        process.click_button(\n            '(//div[@class=\"demo-drawer-footer\"]//span[text()=\"确定\"])[3]'\n        )\n        sleep(1)\n        # 获取目标表格第2个 vxe 表格中的所有数据行\n        xpath_rows = '(//table[contains(@class, \"vxe-table--body\")])[2]//tr[contains(@class,\"vxe-body--row\")]'\n    \n        # 先拿到总行数\n        base_rows = driver.find_elements(By.XPATH, xpath_rows)\n        total = len(base_rows)\n    \n        valid_count = 0\n        for idx in range(total):\n            try:\n                # 每次都按索引重新定位这一行\n                row = driver.find_elements(By.XPATH, xpath_rows)[idx]\n                tds = row.find_elements(By.TAG_NAME, \"td\")\n                td3 = tds[2].text.strip()\n                td5_raw = tds[4].text.strip()\n                td5_raw = int(td5_raw) if td5_raw else 0\n    \n>               assert name in td3 or td5_raw > num, f\"第 {idx + 1} 行不符合：td3={td3}, td8={td5_raw}\"\nE               AssertionError: 第 4 行不符合：td3=检查2, td8=1\nE               assert ('1' in '检查2' or 1 > 60)\n\nTests\\test_items\\test_process.py:864: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":1,"retriesStatusChange":true,"beforeStages":[{"name":"login_to_process","time":{"start":1756194310937,"stop":1756194320818,"duration":9881},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentStep":false,"hasContent":false,"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: 第 4 行不符合：td3=检查2, td8=1\nassert ('1' in '检查2' or 1 > 60)","statusTrace":"self = <test_items.test_process.TestProcessPage object at 0x000001DC53EBABF0>\nlogin_to_process = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"22b719ffba8fc07bc6b9972b3d52fbe9\")>\n\n    @allure.story(\"查询工序名包含1或表示顺序>60\")\n    # @pytest.mark.run(order=1)\n    def test_process_selectsuccess3(self, login_to_process):\n        driver = login_to_process  # WebDriver 实例\n        process = ProcessPage(driver)  # 用 driver 初始化 ProcessPage\n        name = \"1\"\n        num = 60\n        # 点击查询\n        process.click_sel_button()\n        sleep(1)\n    \n        # 定位名称输入框\n        element_to_double_click = driver.find_element(\n            By.XPATH,\n            '(//div[@class=\"vxe-table--render-wrapper\"])[3]/div[1]/div[2]//tr[1]/td[4]',\n        )\n        # 创建一个 ActionChains 对象\n        actions = ActionChains(driver)\n        # 双击命令\n        actions.double_click(element_to_double_click).perform()\n        sleep(1)\n        # 点击工序名\n        process.click_button('//div[text()=\"工序名\" and contains(@optid,\"opt_\")]')\n        sleep(1)\n        # 点击（\n        process.click_button(\n            '(//div[@class=\"vxe-table--render-wrapper\"])[3]/div[1]/div[2]//tr[1]/td[3]'\n        )\n        process.click_button('//div[text()=\"(\" and contains(@optid,\"opt_\")]')\n        # 点击比较关系框\n        process.click_button(\n            '(//div[@class=\"vxe-table--render-wrapper\"])[3]/div[1]/div[2]//tr[1]/td[5]//input'\n        )\n        sleep(1)\n        # 点击包含\n        process.click_button('//div[text()=\"包含\" and contains(@optid,\"opt_\")]')\n        sleep(1)\n        # 点击输入数值\n        process.enter_texts(\n            '(//div[@class=\"vxe-table--render-wrapper\"])[3]/div[1]/div[2]//tr[1]/td[6]//input',\n            \"检查\",\n        )\n    \n        # 点击（\n        process.click_button(\n            '(//div[@class=\"vxe-table--render-wrapper\"])[3]/div[1]/div[2]//tr[1]/td[7]'\n        )\n        process.click_button('//div[text()=\")\" and contains(@optid,\"opt_\")]')\n    \n        sleep(1)\n        double_click = driver.find_element(\n            By.XPATH,\n            '(//div[@class=\"vxe-table--render-wrapper\"])[3]/div[1]/div[2]//tr[2]/td[2]',\n        )\n        # 双击命令\n        actions.double_click(double_click).perform()\n    \n        # 定义or元素的XPath\n        or_xpath = '//div[text()=\"or\" and contains(@optid,\"opt_\")]'\n    \n        try:\n            # 首先尝试直接查找并点击and元素\n            and_element = WebDriverWait(driver, 2).until(\n                EC.presence_of_element_located((By.XPATH, or_xpath))\n            )\n            and_element.click()\n        except:\n            # 如果直接查找失败，进入循环双击操作\n            max_attempts = 5\n            attempt = 0\n            or_found = False\n    \n            while attempt < max_attempts and not or_found:\n                try:\n                    # 执行双击操作\n                    actions.double_click(double_click).perform()\n                    sleep(1)\n    \n                    # 再次尝试查找or元素\n                    or_element = WebDriverWait(driver, 2).until(\n                        EC.presence_of_element_located((By.XPATH, or_xpath))\n                    )\n                    or_element.click()\n                    or_found = True\n                except:\n                    attempt += 1\n                    sleep(1)\n    \n            if not or_found:\n                raise Exception(f\"在{max_attempts}次尝试后仍未找到并点击到'or'元素\")\n    \n        # 点击（\n        process.click_button(\n            '(//div[@class=\"vxe-table--render-wrapper\"])[3]/div[1]/div[2]//tr[2]/td[3]'\n        )\n        process.click_button('//div[text()=\"(\" and contains(@optid,\"opt_\")]')\n        # 点击物料优先度\n        process.click_button(\n            '(//div[@class=\"vxe-table--render-wrapper\"])[3]/div[1]/div[2]//tr[2]/td[4]'\n        )\n        process.click_button('//div[text()=\"表示顺序\" and contains(@optid,\"opt_\")]')\n        sleep(1)\n        # 点击比较关系框\n        process.click_button(\n            '(//div[@class=\"vxe-table--render-wrapper\"])[3]/div[1]/div[2]//tr[2]/td[5]//input'\n        )\n        # 点击>\n        sleep(1)\n        process.click_button('//div[text()=\">\" and contains(@optid,\"opt_\")]')\n        sleep(1)\n        # 点击输入数值70\n        process.enter_texts(\n            '(//div[@class=\"vxe-table--render-wrapper\"])[3]/div[1]/div[2]//tr[2]/td[6]//input',\n            \"70\",\n        )\n        # 点击（\n        process.click_button(\n            '(//div[@class=\"vxe-table--render-wrapper\"])[3]/div[1]/div[2]//tr[2]/td[7]'\n        )\n        process.click_button('//div[text()=\")\" and contains(@optid,\"opt_\")]')\n    \n        sleep(1)\n    \n        # 点击确认\n        process.click_button(\n            '(//div[@class=\"demo-drawer-footer\"]//span[text()=\"确定\"])[3]'\n        )\n        sleep(1)\n        # 获取目标表格第2个 vxe 表格中的所有数据行\n        xpath_rows = '(//table[contains(@class, \"vxe-table--body\")])[2]//tr[contains(@class,\"vxe-body--row\")]'\n    \n        # 先拿到总行数\n        base_rows = driver.find_elements(By.XPATH, xpath_rows)\n        total = len(base_rows)\n    \n        valid_count = 0\n        for idx in range(total):\n            try:\n                # 每次都按索引重新定位这一行\n                row = driver.find_elements(By.XPATH, xpath_rows)[idx]\n                tds = row.find_elements(By.TAG_NAME, \"td\")\n                td3 = tds[2].text.strip()\n                td5_raw = tds[4].text.strip()\n                td5_raw = int(td5_raw) if td5_raw else 0\n    \n>               assert name in td3 or td5_raw > num, f\"第 {idx + 1} 行不符合：td3={td3}, td8={td5_raw}\"\nE               AssertionError: 第 4 行不符合：td3=检查2, td8=1\nE               assert ('1' in '检查2' or 1 > 60)\n\nTests\\test_items\\test_process.py:864: AssertionError","steps":[],"attachments":[{"uid":"f5cf1403ceebe4a9","name":"test_process_selectsuccess3_failure","source":"f5cf1403ceebe4a9.png","type":"image/png","size":91139},{"uid":"d66ed1bf2c3ce2d2","name":"test_process_selectsuccess3_source","source":"d66ed1bf2c3ce2d2.html","type":"text/html","size":1310899},{"uid":"144269fa70a72e71","name":"log","source":"144269fa70a72e71.txt","type":"text/plain","size":3040}],"parameters":[],"attachmentStep":false,"hasContent":true,"stepsCount":0,"attachmentsCount":3,"shouldDisplayMessage":true},"afterStages":[{"name":"login_to_process::0","time":{"start":1756194338925,"stop":1756194341104,"duration":2179},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentStep":false,"hasContent":false,"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false}],"labels":[{"name":"feature","value":"工序表测试用例"},{"name":"story","value":"查询工序名包含1或表示顺序>60"},{"name":"parentSuite","value":"Tests.test_items"},{"name":"suite","value":"test_process"},{"name":"subSuite","value":"TestProcessPage"},{"name":"host","value":"WIN-20240820MJV"},{"name":"thread","value":"12016-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"Tests.test_items.test_process"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"a23b90dd58b45b96","status":"passed","time":{"start":1755781276871,"stop":1755781297580,"duration":20709}}],"categories":[{"name":"Product defects","matchedStatuses":[]}],"tags":[]},"source":"685b37fae8379819.json","parameterValues":[]}