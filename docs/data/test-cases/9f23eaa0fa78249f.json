{"uid":"9f23eaa0fa78249f","name":"test_setting_select_timeinput","fullName":"Tests.test_item.test_setting.TestSettingPage#test_setting_select_timeinput","historyId":"524dfdb5edeba4c78b39cfffd0b1b1eb","time":{"start":1752762642028,"stop":1752762657208,"duration":15180},"status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n\tGetHandleVerifier [0x0x7ff7445e6f65+78965]\n\tGetHandleVerifier [0x0x7ff7445e6fc0+79056]\n\t(No symbol) [0x0x7ff744379dda]\n\t(No symbol) [0x0x7ff7443d02ea]\n\t(No symbol) [0x0x7ff7443d059c]\n\t(No symbol) [0x0x7ff744423f37]\n\t(No symbol) [0x0x7ff7443f86af]\n\t(No symbol) [0x0x7ff744420dbe]\n\t(No symbol) [0x0x7ff7443f8443]\n\t(No symbol) [0x0x7ff7443c1311]\n\t(No symbol) [0x0x7ff7443c20a3]\n\tGetHandleVerifier [0x0x7ff74489e26d+2926461]\n\tGetHandleVerifier [0x0x7ff744898993+2903715]\n\tGetHandleVerifier [0x0x7ff7448b6aed+3026941]\n\tGetHandleVerifier [0x0x7ff7446016fe+187406]\n\tGetHandleVerifier [0x0x7ff7446096ef+220159]\n\tGetHandleVerifier [0x0x7ff7445efaf4+114692]\n\tGetHandleVerifier [0x0x7ff7445efca9+115129]\n\tGetHandleVerifier [0x0x7ff7445d64d8+10728]\n\tBaseThreadInitThunk [0x0x7ffa099e7374+20]\n\tRtlUserThreadStart [0x0x7ffa0b89cc91+33]","statusTrace":"self = <test_item.test_setting.TestSettingPage object at 0x000001FF3798CC70>\nlogin_to_setting = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"9d1fa197ea09df71460e98d3f47ab834\")>\n\n    @allure.story(\"设置表格布局-制造订单交货期查询-日期\")\n    # @pytest.mark.run(order=1)\n    def test_setting_select_timeinput(self, login_to_setting):\n        driver = login_to_setting  # WebDriver 实例\n        setting = SettingPage(driver)  # 用 driver 初始化 SettingPage\n        setting.click_button('(//span[text()=\"计划业务数据\"])[1]')\n        setting.click_button('(//span[text()=\"制造订单\"])[1]')\n        layout = \"测试布局A\"\n        code = \"交货期\"\n        sleep(1)\n        setting.add_layout()\n        setting.enter_texts(\n            '//div[text()=\"当前布局:\"]/following-sibling::div//input', f\"{layout}\"\n        )\n        setting.click_button('(//div[text()=\" 显示设置 \"])[2]')\n        # 获取是否可见选项的复选框元素\n        checkbox = setting.get_find_element_xpath(\n            '(//div[./div[text()=\"是否可见:\"]])[2]/label/span'\n        )\n        # 检查复选框是否未被选中\n        if checkbox.get_attribute(\"class\") == \"ivu-checkbox\":\n            # 如果未选中，则点击复选框进行选中\n            setting.click_button('(//div[./div[text()=\"是否可见:\"]])[2]/label/span')\n            # 点击确定按钮保存设置\n            setting.click_button('(//div[@class=\"demo-drawer-footer\"])[5]/button[2]')\n        else:\n            # 如果已选中，直接点击确定按钮保存设置\n            setting.click_button('(//div[@class=\"demo-drawer-footer\"])[5]/button[2]')\n    \n        # 获取布局名称的文本元素\n        name = setting.get_find_element_xpath(\n            f'//div[@class=\"tabsDivItemCon\"]/div[text()=\" {layout} \"]'\n        ).text\n    \n        setting.click_setting_button()\n        # 点击快速查询按钮\n        setting.click_button('(//div[text()=\" 快速查询 \"])[2]')\n        # 点击特定代码的行以选择\n        setting.click_button(\n            f'//tr[./td[3][.//span[text()=\"{code}\"]]]/td[4]//input[@placeholder=\"请选择\"]'\n        )\n        # 打开下拉框\n        setting.click_button('//div[text()=\"日期\"]')\n        setting.click_button('(//div[@class=\"demo-drawer-footer\"])[5]/button[2]')\n        # 断言布局名称与预期相符\n        time = setting.get_find_element_xpath(\n            '//div[@class=\"single-page\"]//table[@class=\"vxe-table--body\" and .//tr[@class=\"vxe-body--row\"]]//tr[2]/td[9]'\n        ).text\n>       setting.enter_texts('//div[@class=\"ivu-date-picker-rel\"]//input', time)\n\nTests\\test_item\\test_setting.py:1291: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nPages\\setting_page.py:18: in enter_texts\n    self.enter_text(By.XPATH, xpath, text)\nPages\\base_page.py:65: in enter_text\n    element = WebDriverWait(self.driver, wait_time).until(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"9d1fa197ea09df71460e98d3f47ab834\")>\nmethod = <function visibility_of_element_located.<locals>._predicate at 0x000001FF39238EE0>, message = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        -----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x7ff7445e6f65+78965]\nE       \tGetHandleVerifier [0x0x7ff7445e6fc0+79056]\nE       \t(No symbol) [0x0x7ff744379dda]\nE       \t(No symbol) [0x0x7ff7443d02ea]\nE       \t(No symbol) [0x0x7ff7443d059c]\nE       \t(No symbol) [0x0x7ff744423f37]\nE       \t(No symbol) [0x0x7ff7443f86af]\nE       \t(No symbol) [0x0x7ff744420dbe]\nE       \t(No symbol) [0x0x7ff7443f8443]\nE       \t(No symbol) [0x0x7ff7443c1311]\nE       \t(No symbol) [0x0x7ff7443c20a3]\nE       \tGetHandleVerifier [0x0x7ff74489e26d+2926461]\nE       \tGetHandleVerifier [0x0x7ff744898993+2903715]\nE       \tGetHandleVerifier [0x0x7ff7448b6aed+3026941]\nE       \tGetHandleVerifier [0x0x7ff7446016fe+187406]\nE       \tGetHandleVerifier [0x0x7ff7446096ef+220159]\nE       \tGetHandleVerifier [0x0x7ff7445efaf4+114692]\nE       \tGetHandleVerifier [0x0x7ff7445efca9+115129]\nE       \tGetHandleVerifier [0x0x7ff7445d64d8+10728]\nE       \tBaseThreadInitThunk [0x0x7ffa099e7374+20]\nE       \tRtlUserThreadStart [0x0x7ffa0b89cc91+33]\n\nmyenv\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:138: TimeoutException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":1,"retriesStatusChange":false,"beforeStages":[{"name":"login_to_setting","time":{"start":1752762632339,"stop":1752762642027,"duration":9688},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"stepsCount":0}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n\tGetHandleVerifier [0x0x7ff7445e6f65+78965]\n\tGetHandleVerifier [0x0x7ff7445e6fc0+79056]\n\t(No symbol) [0x0x7ff744379dda]\n\t(No symbol) [0x0x7ff7443d02ea]\n\t(No symbol) [0x0x7ff7443d059c]\n\t(No symbol) [0x0x7ff744423f37]\n\t(No symbol) [0x0x7ff7443f86af]\n\t(No symbol) [0x0x7ff744420dbe]\n\t(No symbol) [0x0x7ff7443f8443]\n\t(No symbol) [0x0x7ff7443c1311]\n\t(No symbol) [0x0x7ff7443c20a3]\n\tGetHandleVerifier [0x0x7ff74489e26d+2926461]\n\tGetHandleVerifier [0x0x7ff744898993+2903715]\n\tGetHandleVerifier [0x0x7ff7448b6aed+3026941]\n\tGetHandleVerifier [0x0x7ff7446016fe+187406]\n\tGetHandleVerifier [0x0x7ff7446096ef+220159]\n\tGetHandleVerifier [0x0x7ff7445efaf4+114692]\n\tGetHandleVerifier [0x0x7ff7445efca9+115129]\n\tGetHandleVerifier [0x0x7ff7445d64d8+10728]\n\tBaseThreadInitThunk [0x0x7ffa099e7374+20]\n\tRtlUserThreadStart [0x0x7ffa0b89cc91+33]","statusTrace":"self = <test_item.test_setting.TestSettingPage object at 0x000001FF3798CC70>\nlogin_to_setting = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"9d1fa197ea09df71460e98d3f47ab834\")>\n\n    @allure.story(\"设置表格布局-制造订单交货期查询-日期\")\n    # @pytest.mark.run(order=1)\n    def test_setting_select_timeinput(self, login_to_setting):\n        driver = login_to_setting  # WebDriver 实例\n        setting = SettingPage(driver)  # 用 driver 初始化 SettingPage\n        setting.click_button('(//span[text()=\"计划业务数据\"])[1]')\n        setting.click_button('(//span[text()=\"制造订单\"])[1]')\n        layout = \"测试布局A\"\n        code = \"交货期\"\n        sleep(1)\n        setting.add_layout()\n        setting.enter_texts(\n            '//div[text()=\"当前布局:\"]/following-sibling::div//input', f\"{layout}\"\n        )\n        setting.click_button('(//div[text()=\" 显示设置 \"])[2]')\n        # 获取是否可见选项的复选框元素\n        checkbox = setting.get_find_element_xpath(\n            '(//div[./div[text()=\"是否可见:\"]])[2]/label/span'\n        )\n        # 检查复选框是否未被选中\n        if checkbox.get_attribute(\"class\") == \"ivu-checkbox\":\n            # 如果未选中，则点击复选框进行选中\n            setting.click_button('(//div[./div[text()=\"是否可见:\"]])[2]/label/span')\n            # 点击确定按钮保存设置\n            setting.click_button('(//div[@class=\"demo-drawer-footer\"])[5]/button[2]')\n        else:\n            # 如果已选中，直接点击确定按钮保存设置\n            setting.click_button('(//div[@class=\"demo-drawer-footer\"])[5]/button[2]')\n    \n        # 获取布局名称的文本元素\n        name = setting.get_find_element_xpath(\n            f'//div[@class=\"tabsDivItemCon\"]/div[text()=\" {layout} \"]'\n        ).text\n    \n        setting.click_setting_button()\n        # 点击快速查询按钮\n        setting.click_button('(//div[text()=\" 快速查询 \"])[2]')\n        # 点击特定代码的行以选择\n        setting.click_button(\n            f'//tr[./td[3][.//span[text()=\"{code}\"]]]/td[4]//input[@placeholder=\"请选择\"]'\n        )\n        # 打开下拉框\n        setting.click_button('//div[text()=\"日期\"]')\n        setting.click_button('(//div[@class=\"demo-drawer-footer\"])[5]/button[2]')\n        # 断言布局名称与预期相符\n        time = setting.get_find_element_xpath(\n            '//div[@class=\"single-page\"]//table[@class=\"vxe-table--body\" and .//tr[@class=\"vxe-body--row\"]]//tr[2]/td[9]'\n        ).text\n>       setting.enter_texts('//div[@class=\"ivu-date-picker-rel\"]//input', time)\n\nTests\\test_item\\test_setting.py:1291: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nPages\\setting_page.py:18: in enter_texts\n    self.enter_text(By.XPATH, xpath, text)\nPages\\base_page.py:65: in enter_text\n    element = WebDriverWait(self.driver, wait_time).until(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"9d1fa197ea09df71460e98d3f47ab834\")>\nmethod = <function visibility_of_element_located.<locals>._predicate at 0x000001FF39238EE0>, message = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        -----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x7ff7445e6f65+78965]\nE       \tGetHandleVerifier [0x0x7ff7445e6fc0+79056]\nE       \t(No symbol) [0x0x7ff744379dda]\nE       \t(No symbol) [0x0x7ff7443d02ea]\nE       \t(No symbol) [0x0x7ff7443d059c]\nE       \t(No symbol) [0x0x7ff744423f37]\nE       \t(No symbol) [0x0x7ff7443f86af]\nE       \t(No symbol) [0x0x7ff744420dbe]\nE       \t(No symbol) [0x0x7ff7443f8443]\nE       \t(No symbol) [0x0x7ff7443c1311]\nE       \t(No symbol) [0x0x7ff7443c20a3]\nE       \tGetHandleVerifier [0x0x7ff74489e26d+2926461]\nE       \tGetHandleVerifier [0x0x7ff744898993+2903715]\nE       \tGetHandleVerifier [0x0x7ff7448b6aed+3026941]\nE       \tGetHandleVerifier [0x0x7ff7446016fe+187406]\nE       \tGetHandleVerifier [0x0x7ff7446096ef+220159]\nE       \tGetHandleVerifier [0x0x7ff7445efaf4+114692]\nE       \tGetHandleVerifier [0x0x7ff7445efca9+115129]\nE       \tGetHandleVerifier [0x0x7ff7445d64d8+10728]\nE       \tBaseThreadInitThunk [0x0x7ffa099e7374+20]\nE       \tRtlUserThreadStart [0x0x7ffa0b89cc91+33]\n\nmyenv\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:138: TimeoutException","steps":[],"attachments":[{"uid":"82ce32e339926293","name":"test_setting_select_timeinput_failure","source":"82ce32e339926293.png","type":"image/png","size":165824},{"uid":"355050f936e5c86a","name":"test_setting_select_timeinput_source","source":"355050f936e5c86a.html","type":"text/html","size":1491407},{"uid":"734e3f327f0b7d6d","name":"log","source":"734e3f327f0b7d6d.txt","type":"text/plain","size":4995}],"parameters":[],"shouldDisplayMessage":true,"attachmentsCount":3,"hasContent":true,"attachmentStep":false,"stepsCount":0},"afterStages":[{"name":"login_to_setting::0","time":{"start":1752762657429,"stop":1752762659544,"duration":2115},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"stepsCount":0}],"labels":[{"name":"story","value":"设置表格布局-制造订单交货期查询-日期"},{"name":"feature","value":"标准应用设置测试用例"},{"name":"parentSuite","value":"Tests.test_item"},{"name":"suite","value":"test_setting"},{"name":"subSuite","value":"TestSettingPage"},{"name":"host","value":"WIN-20240820MJV"},{"name":"thread","value":"11236-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"Tests.test_item.test_setting"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"f48a3a4cdeb9d7f4","status":"broken","statusDetails":"selenium.common.exceptions.TimeoutException: Message: 点击失败，找不到元素：xpath = (//div[text()=\" 快速查询 \"])[2]","time":{"start":1752762615416,"stop":1752762630181,"duration":14765}}],"categories":[{"name":"Test defects","matchedStatuses":[]}],"tags":[]},"source":"9f23eaa0fa78249f.json","parameterValues":[]}