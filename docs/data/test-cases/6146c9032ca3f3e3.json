{"uid":"6146c9032ca3f3e3","name":"test_setting_addfail1","fullName":"Tests.test_items.test_setting.TestSettingPage#test_setting_addfail1","historyId":"2e934fc75f124310aa468c319b4cf472","time":{"start":1761037369479,"stop":1761037369479,"duration":0},"status":"broken","statusMessage":"selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id: session deleted as the browser has closed the connection\nfrom disconnected: not connected to DevTools\n  (Session info: chrome=137.0.7151.69)\nStacktrace:\n\tGetHandleVerifier [0x0x7ff7b9af6f65+78965]\n\tGetHandleVerifier [0x0x7ff7b9af6fc0+79056]\n\t(No symbol) [0x0x7ff7b9889dda]\n\t(No symbol) [0x0x7ff7b9875bc5]\n\t(No symbol) [0x0x7ff7b989ac04]\n\t(No symbol) [0x0x7ff7b9910195]\n\t(No symbol) [0x0x7ff7b99306cd]\n\t(No symbol) [0x0x7ff7b9908443]\n\t(No symbol) [0x0x7ff7b98d1311]\n\t(No symbol) [0x0x7ff7b98d20a3]\n\tGetHandleVerifier [0x0x7ff7b9dae26d+2926461]\n\tGetHandleVerifier [0x0x7ff7b9da8993+2903715]\n\tGetHandleVerifier [0x0x7ff7b9dc6aed+3026941]\n\tGetHandleVerifier [0x0x7ff7b9b116fe+187406]\n\tGetHandleVerifier [0x0x7ff7b9b196ef+220159]\n\tGetHandleVerifier [0x0x7ff7b9affaf4+114692]\n\tGetHandleVerifier [0x0x7ff7b9affca9+115129]\n\tGetHandleVerifier [0x0x7ff7b9ae64d8+10728]\n\tBaseThreadInitThunk [0x0x7fff4faa7374+20]\n\tRtlUserThreadStart [0x0x7fff513dcc91+33]","statusTrace":"@pytest.fixture  # (scope=\"class\")这个参数表示整个测试类共用同一个浏览器，默认一个用例执行一次\n    def login_to_setting():\n        \"\"\"初始化并返回 driver\"\"\"\n        date_driver = DateDriver()\n        # 初始化 driver\n        driver = create_driver(date_driver.driver_path)\n        driver.implicitly_wait(3)\n    \n        # 初始化登录页面\n        page = LoginPage(driver)  # 初始化登录页面\n        url = date_driver.url\n        print(f\"[INFO] 正在导航到 URL: {url}\")\n        # 尝试访问 URL，捕获连接错误\n        for attempt in range(2):\n            try:\n                page.navigate_to(url)\n                break\n            except WebDriverException as e:\n                capture_screenshot(driver, f\"login_fail_{attempt + 1}\")\n                logging.warning(f\"第 {attempt + 1} 次连接失败: {e}\")\n                driver.refresh()\n                sleep(date_driver.URL_RETRY_WAIT)\n        else:\n            logging.error(\"连接失败多次，测试中止\")\n            safe_quit(driver)\n            raise RuntimeError(\"无法连接到登录页面\")\n    \n        page.login(date_driver.username, date_driver.password, date_driver.planning)\n        page.click_button('(//span[text()=\"计划管理\"])[1]')  # 点击计划管理\n        page.click_button('(//span[text()=\"计划基础数据\"])[1]')  # 点击计划基础数据\n>       page.click_button('(//span[text()=\"物品\"])[1]')  # 点击物品\n\nTests\\test_items\\test_setting.py:50: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nPages\\itemsPage\\login_page.py:24: in click_button\n    self.click(By.XPATH, xpath)\nPages\\base_page.py:45: in click\n    element = WebDriverWait(self.driver, wait_time).until(\nmyenv\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:129: in until\n    value = method(self._driver)\nmyenv\\lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py:622: in _predicate\n    target = driver.find_element(*target)  # grab element at locator\nmyenv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:914: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\nmyenv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:447: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000029D71A4B4C0>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"invalid session id\",\"message\":\"invalid session id: session deleted as the...ff7b9ae64d8+10728]\\\\n\\\\tBaseThreadInitThunk [0x0x7fff4faa7374+20]\\\\n\\\\tRtlUserThreadStart [0x0x7fff513dcc91+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id: session deleted as the browser has closed the connection\nE       from disconnected: not connected to DevTools\nE         (Session info: chrome=137.0.7151.69)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x7ff7b9af6f65+78965]\nE       \tGetHandleVerifier [0x0x7ff7b9af6fc0+79056]\nE       \t(No symbol) [0x0x7ff7b9889dda]\nE       \t(No symbol) [0x0x7ff7b9875bc5]\nE       \t(No symbol) [0x0x7ff7b989ac04]\nE       \t(No symbol) [0x0x7ff7b9910195]\nE       \t(No symbol) [0x0x7ff7b99306cd]\nE       \t(No symbol) [0x0x7ff7b9908443]\nE       \t(No symbol) [0x0x7ff7b98d1311]\nE       \t(No symbol) [0x0x7ff7b98d20a3]\nE       \tGetHandleVerifier [0x0x7ff7b9dae26d+2926461]\nE       \tGetHandleVerifier [0x0x7ff7b9da8993+2903715]\nE       \tGetHandleVerifier [0x0x7ff7b9dc6aed+3026941]\nE       \tGetHandleVerifier [0x0x7ff7b9b116fe+187406]\nE       \tGetHandleVerifier [0x0x7ff7b9b196ef+220159]\nE       \tGetHandleVerifier [0x0x7ff7b9affaf4+114692]\nE       \tGetHandleVerifier [0x0x7ff7b9affca9+115129]\nE       \tGetHandleVerifier [0x0x7ff7b9ae64d8+10728]\nE       \tBaseThreadInitThunk [0x0x7fff4faa7374+20]\nE       \tRtlUserThreadStart [0x0x7fff513dcc91+33]\n\nmyenv\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: InvalidSessionIdException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":1,"retriesStatusChange":true,"beforeStages":[{"name":"login_to_setting","time":{"start":1761037369482,"stop":1761037386641,"duration":17159},"status":"broken","statusMessage":"selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id: session deleted as the browser has closed the connection\nfrom disconnected: not connected to DevTools\n  (Session info: chrome=137.0.7151.69)\nStacktrace:\n\tGetHandleVerifier [0x0x7ff7b9af6f65+78965]\n\tGetHandleVerifier [0x0x7ff7b9af6fc0+79056]\n\t(No symbol) [0x0x7ff7b9889dda]\n\t(No symbol) [0x0x7ff7b9875bc5]\n\t(No symbol) [0x0x7ff7b989ac04]\n\t(No symbol) [0x0x7ff7b9910195]\n\t(No symbol) [0x0x7ff7b99306cd]\n\t(No symbol) [0x0x7ff7b9908443]\n\t(No symbol) [0x0x7ff7b98d1311]\n\t(No symbol) [0x0x7ff7b98d20a3]\n\tGetHandleVerifier [0x0x7ff7b9dae26d+2926461]\n\tGetHandleVerifier [0x0x7ff7b9da8993+2903715]\n\tGetHandleVerifier [0x0x7ff7b9dc6aed+3026941]\n\tGetHandleVerifier [0x0x7ff7b9b116fe+187406]\n\tGetHandleVerifier [0x0x7ff7b9b196ef+220159]\n\tGetHandleVerifier [0x0x7ff7b9affaf4+114692]\n\tGetHandleVerifier [0x0x7ff7b9affca9+115129]\n\tGetHandleVerifier [0x0x7ff7b9ae64d8+10728]\n\tBaseThreadInitThunk [0x0x7fff4faa7374+20]\n\tRtlUserThreadStart [0x0x7fff513dcc91+33]\n\n","statusTrace":"  File \"D:\\PycharmProjects\\APS\\myenv\\lib\\site-packages\\pluggy\\_callers.py\", line 38, in run_old_style_hookwrapper\n    res = yield\n  File \"D:\\PycharmProjects\\APS\\myenv\\lib\\site-packages\\pluggy\\_callers.py\", line 139, in _multicall\n    teardown.throw(exception)\n  File \"D:\\PycharmProjects\\APS\\myenv\\lib\\site-packages\\_pytest\\setuponly.py\", line 36, in pytest_fixture_setup\n    return (yield)\n  File \"D:\\PycharmProjects\\APS\\myenv\\lib\\site-packages\\pluggy\\_callers.py\", line 121, in _multicall\n    res = hook_impl.function(*args)\n  File \"D:\\PycharmProjects\\APS\\myenv\\lib\\site-packages\\_pytest\\fixtures.py\", line 1195, in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\n  File \"D:\\PycharmProjects\\APS\\myenv\\lib\\site-packages\\_pytest\\fixtures.py\", line 922, in call_fixture_func\n    fixture_result = next(generator)\n  File \"D:\\PycharmProjects\\APS\\Tests\\test_items\\test_setting.py\", line 50, in login_to_setting\n    page.click_button('(//span[text()=\"物品\"])[1]')  # 点击物品\n  File \"D:\\PycharmProjects\\APS\\Pages\\itemsPage\\login_page.py\", line 24, in click_button\n    self.click(By.XPATH, xpath)\n  File \"D:\\PycharmProjects\\APS\\Pages\\base_page.py\", line 45, in click\n    element = WebDriverWait(self.driver, wait_time).until(\n  File \"D:\\PycharmProjects\\APS\\myenv\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py\", line 129, in until\n    value = method(self._driver)\n  File \"D:\\PycharmProjects\\APS\\myenv\\lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py\", line 622, in _predicate\n    target = driver.find_element(*target)  # grab element at locator\n  File \"D:\\PycharmProjects\\APS\\myenv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 914, in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n  File \"D:\\PycharmProjects\\APS\\myenv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 447, in execute\n    self.error_handler.check_response(response)\n  File \"D:\\PycharmProjects\\APS\\myenv\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py\", line 232, in check_response\n    raise exception_class(message, screen, stacktrace)\n","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentStep":false,"hasContent":true,"attachmentsCount":0,"shouldDisplayMessage":true}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id: session deleted as the browser has closed the connection\nfrom disconnected: not connected to DevTools\n  (Session info: chrome=137.0.7151.69)\nStacktrace:\n\tGetHandleVerifier [0x0x7ff7b9af6f65+78965]\n\tGetHandleVerifier [0x0x7ff7b9af6fc0+79056]\n\t(No symbol) [0x0x7ff7b9889dda]\n\t(No symbol) [0x0x7ff7b9875bc5]\n\t(No symbol) [0x0x7ff7b989ac04]\n\t(No symbol) [0x0x7ff7b9910195]\n\t(No symbol) [0x0x7ff7b99306cd]\n\t(No symbol) [0x0x7ff7b9908443]\n\t(No symbol) [0x0x7ff7b98d1311]\n\t(No symbol) [0x0x7ff7b98d20a3]\n\tGetHandleVerifier [0x0x7ff7b9dae26d+2926461]\n\tGetHandleVerifier [0x0x7ff7b9da8993+2903715]\n\tGetHandleVerifier [0x0x7ff7b9dc6aed+3026941]\n\tGetHandleVerifier [0x0x7ff7b9b116fe+187406]\n\tGetHandleVerifier [0x0x7ff7b9b196ef+220159]\n\tGetHandleVerifier [0x0x7ff7b9affaf4+114692]\n\tGetHandleVerifier [0x0x7ff7b9affca9+115129]\n\tGetHandleVerifier [0x0x7ff7b9ae64d8+10728]\n\tBaseThreadInitThunk [0x0x7fff4faa7374+20]\n\tRtlUserThreadStart [0x0x7fff513dcc91+33]","statusTrace":"@pytest.fixture  # (scope=\"class\")这个参数表示整个测试类共用同一个浏览器，默认一个用例执行一次\n    def login_to_setting():\n        \"\"\"初始化并返回 driver\"\"\"\n        date_driver = DateDriver()\n        # 初始化 driver\n        driver = create_driver(date_driver.driver_path)\n        driver.implicitly_wait(3)\n    \n        # 初始化登录页面\n        page = LoginPage(driver)  # 初始化登录页面\n        url = date_driver.url\n        print(f\"[INFO] 正在导航到 URL: {url}\")\n        # 尝试访问 URL，捕获连接错误\n        for attempt in range(2):\n            try:\n                page.navigate_to(url)\n                break\n            except WebDriverException as e:\n                capture_screenshot(driver, f\"login_fail_{attempt + 1}\")\n                logging.warning(f\"第 {attempt + 1} 次连接失败: {e}\")\n                driver.refresh()\n                sleep(date_driver.URL_RETRY_WAIT)\n        else:\n            logging.error(\"连接失败多次，测试中止\")\n            safe_quit(driver)\n            raise RuntimeError(\"无法连接到登录页面\")\n    \n        page.login(date_driver.username, date_driver.password, date_driver.planning)\n        page.click_button('(//span[text()=\"计划管理\"])[1]')  # 点击计划管理\n        page.click_button('(//span[text()=\"计划基础数据\"])[1]')  # 点击计划基础数据\n>       page.click_button('(//span[text()=\"物品\"])[1]')  # 点击物品\n\nTests\\test_items\\test_setting.py:50: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nPages\\itemsPage\\login_page.py:24: in click_button\n    self.click(By.XPATH, xpath)\nPages\\base_page.py:45: in click\n    element = WebDriverWait(self.driver, wait_time).until(\nmyenv\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:129: in until\n    value = method(self._driver)\nmyenv\\lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py:622: in _predicate\n    target = driver.find_element(*target)  # grab element at locator\nmyenv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:914: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\nmyenv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:447: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000029D71A4B4C0>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"invalid session id\",\"message\":\"invalid session id: session deleted as the...ff7b9ae64d8+10728]\\\\n\\\\tBaseThreadInitThunk [0x0x7fff4faa7374+20]\\\\n\\\\tRtlUserThreadStart [0x0x7fff513dcc91+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id: session deleted as the browser has closed the connection\nE       from disconnected: not connected to DevTools\nE         (Session info: chrome=137.0.7151.69)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x7ff7b9af6f65+78965]\nE       \tGetHandleVerifier [0x0x7ff7b9af6fc0+79056]\nE       \t(No symbol) [0x0x7ff7b9889dda]\nE       \t(No symbol) [0x0x7ff7b9875bc5]\nE       \t(No symbol) [0x0x7ff7b989ac04]\nE       \t(No symbol) [0x0x7ff7b9910195]\nE       \t(No symbol) [0x0x7ff7b99306cd]\nE       \t(No symbol) [0x0x7ff7b9908443]\nE       \t(No symbol) [0x0x7ff7b98d1311]\nE       \t(No symbol) [0x0x7ff7b98d20a3]\nE       \tGetHandleVerifier [0x0x7ff7b9dae26d+2926461]\nE       \tGetHandleVerifier [0x0x7ff7b9da8993+2903715]\nE       \tGetHandleVerifier [0x0x7ff7b9dc6aed+3026941]\nE       \tGetHandleVerifier [0x0x7ff7b9b116fe+187406]\nE       \tGetHandleVerifier [0x0x7ff7b9b196ef+220159]\nE       \tGetHandleVerifier [0x0x7ff7b9affaf4+114692]\nE       \tGetHandleVerifier [0x0x7ff7b9affca9+115129]\nE       \tGetHandleVerifier [0x0x7ff7b9ae64d8+10728]\nE       \tBaseThreadInitThunk [0x0x7fff4faa7374+20]\nE       \tRtlUserThreadStart [0x0x7fff513dcc91+33]\n\nmyenv\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: InvalidSessionIdException","steps":[],"attachments":[{"uid":"a3e31a084791f660","name":"log","source":"a3e31a084791f660.txt","type":"text/plain","size":671}],"parameters":[],"stepsCount":0,"attachmentStep":false,"hasContent":true,"attachmentsCount":1,"shouldDisplayMessage":true},"afterStages":[],"labels":[{"name":"feature","value":"标准应用设置测试用例"},{"name":"story","value":"不填写布局名称，添加失败"},{"name":"parentSuite","value":"Tests.test_items"},{"name":"suite","value":"test_setting"},{"name":"subSuite","value":"TestSettingPage"},{"name":"host","value":"WIN-20240820MJV"},{"name":"thread","value":"7968-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"Tests.test_items.test_setting"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"6d80f4214585abe7","status":"passed","time":{"start":1760973351406,"stop":1760973357623,"duration":6217}}],"categories":[{"name":"Test defects","matchedStatuses":[]}],"tags":[]},"source":"6146c9032ca3f3e3.json","parameterValues":[]}