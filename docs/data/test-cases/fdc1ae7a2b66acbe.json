{"uid":"fdc1ae7a2b66acbe","name":"test_coverage_delsuccess","fullName":"Tests.test_items.test_coverage.TestCoveragePage#test_coverage_delsuccess","historyId":"ea34af7895ec18dbf9993ff718532263","time":{"start":1761141000491,"stop":1761141020774,"duration":20283},"status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message: 点击失败，找不到元素：xpath = //div[@class=\"ivu-modal-confirm-footer\"]//span[text()=\"确定\"]","statusTrace":"self = <Pages.itemsPage.coverage_page.Coverage object at 0x0000027FE5E611B0>, by_or_element = 'xpath', value = '//div[@class=\"ivu-modal-confirm-footer\"]//span[text()=\"确定\"]', wait_time = 10\n\n    def click(self, by_or_element, value=None, wait_time=10):\n        if value is not None:\n            by = by_or_element\n            logging.info(f\"点击元素：By = {by}, Value = {value}\")\n            try:\n>               element = WebDriverWait(self.driver, wait_time).until(\n                    EC.element_to_be_clickable((by, value))\n                )\n\nPages\\base_page.py:45: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"e3f25f033cd4332bb0d4e5c06fd45672\")>, method = <function element_to_be_clickable.<locals>._predicate at 0x0000027FE5E72200>, message = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        -----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x7ff6e4aa6f65+78965]\nE       \tGetHandleVerifier [0x0x7ff6e4aa6fc0+79056]\nE       \t(No symbol) [0x0x7ff6e4839dda]\nE       \t(No symbol) [0x0x7ff6e48902ea]\nE       \t(No symbol) [0x0x7ff6e489059c]\nE       \t(No symbol) [0x0x7ff6e48e3f37]\nE       \t(No symbol) [0x0x7ff6e48b86af]\nE       \t(No symbol) [0x0x7ff6e48e0dbe]\nE       \t(No symbol) [0x0x7ff6e48b8443]\nE       \t(No symbol) [0x0x7ff6e4881311]\nE       \t(No symbol) [0x0x7ff6e48820a3]\nE       \tGetHandleVerifier [0x0x7ff6e4d5e26d+2926461]\nE       \tGetHandleVerifier [0x0x7ff6e4d58993+2903715]\nE       \tGetHandleVerifier [0x0x7ff6e4d76aed+3026941]\nE       \tGetHandleVerifier [0x0x7ff6e4ac16fe+187406]\nE       \tGetHandleVerifier [0x0x7ff6e4ac96ef+220159]\nE       \tGetHandleVerifier [0x0x7ff6e4aafaf4+114692]\nE       \tGetHandleVerifier [0x0x7ff6e4aafca9+115129]\nE       \tGetHandleVerifier [0x0x7ff6e4a964d8+10728]\nE       \tBaseThreadInitThunk [0x0x7ffee1537374+20]\nE       \tRtlUserThreadStart [0x0x7ffee1a7cc91+33]\n\nmyenv\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:138: TimeoutException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_items.test_coverage.TestCoveragePage object at 0x0000027FE5CE52A0>, login_to_coverage = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"e3f25f033cd4332bb0d4e5c06fd45672\")>\n\n    @allure.story(\"删除数据成功，删除布局成功\")\n    # @pytest.mark.run(order=1)\n    def test_coverage_delsuccess(self, login_to_coverage):\n        driver = login_to_coverage  # WebDriver 实例\n        coverage = Coverage(driver)  # 用 driver 初始化 Coverage\n        layout = \"测试布局A\"\n        sleep(3)\n        # 定位第一行\n        coverage.click_button(\n            '(//div[@id=\"canvasGird0\"]//table[@class=\"vxe-table--body\"])[1]//tr[1]/td[2]'\n        )\n        coveragedata1 = coverage.get_find_element_xpath(\n            '(//span[contains(text(),\"条记录\")])[1]'\n        ).text\n        coverage.click_del_button()  # 点击删除\n        coverage.click_button('//div[@class=\"ivu-modal-confirm-footer\"]//span[text()=\"确定\"]')\n        # 定位第一行\n        sleep(1)\n        coveragedata = coverage.get_find_element_xpath(\n            '(//span[contains(text(),\"条记录\")])[1]'\n        ).text\n        # 获取目标 div 元素，这里的目标是具有特定文本的 div\n        target_div = coverage.get_find_element_xpath(\n            f'//div[@class=\"tabsDivItemCon\"]/div[text()=\" {layout} \"]'\n        )\n    \n        # 获取父容器下所有 div\n        # 这一步是为了确定目标 div 在其父容器中的位置\n        parent_div = coverage.get_find_element_xpath(\n            f'//div[@class=\"tabsDivItemCon\" and ./div[text()=\" {layout} \"]]'\n        )\n        all_children = parent_div.find_elements(By.XPATH, \"./div\")\n    \n        # 获取目标 div 的位置索引（从0开始）\n        # 这里是为了后续操作，比如点击目标 div 相关的按钮\n        index = all_children.index(target_div)\n        print(f\"目标 div 是第 {index + 1} 个 div\")  # 输出 3（如果从0开始则是2）\n        sleep(2)\n        coverage.click_button(\n            f'//div[@class=\"tabsDivItemCon\"]/div[text()=\" {layout} \"]//i'\n        )\n        # 根据目标 div 的位置，点击对应的“删除布局”按钮\n        coverage.click_button(f'(//li[text()=\"删除布局\"])[{index + 1}]')\n        sleep(2)\n        # 点击确认删除的按钮\n>       coverage.click_button('//div[@class=\"ivu-modal-confirm-footer\"]//span[text()=\"确定\"]')\n\nTests\\test_items\\test_coverage.py:1014: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nPages\\itemsPage\\coverage_page.py:41: in click_button\n    self.click(By.XPATH, xpath)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Pages.itemsPage.coverage_page.Coverage object at 0x0000027FE5E611B0>, by_or_element = 'xpath', value = '//div[@class=\"ivu-modal-confirm-footer\"]//span[text()=\"确定\"]', wait_time = 10\n\n    def click(self, by_or_element, value=None, wait_time=10):\n        if value is not None:\n            by = by_or_element\n            logging.info(f\"点击元素：By = {by}, Value = {value}\")\n            try:\n                element = WebDriverWait(self.driver, wait_time).until(\n                    EC.element_to_be_clickable((by, value))\n                )\n            except TimeoutException:\n                logging.warning(f\"❌ 点击超时：元素 {by} = {value} 未在 {wait_time} 秒内变为可点击\")\n>               raise TimeoutException(f\"点击失败，找不到元素：{by} = {value}\")\nE               selenium.common.exceptions.TimeoutException: Message: 点击失败，找不到元素：xpath = //div[@class=\"ivu-modal-confirm-footer\"]//span[text()=\"确定\"]\n\nPages\\base_page.py:50: TimeoutException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":1,"retriesStatusChange":false,"beforeStages":[{"name":"login_to_coverage","time":{"start":1761140987367,"stop":1761141000490,"duration":13123},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message: 点击失败，找不到元素：xpath = //div[@class=\"ivu-modal-confirm-footer\"]//span[text()=\"确定\"]","statusTrace":"self = <Pages.itemsPage.coverage_page.Coverage object at 0x0000027FE5E611B0>, by_or_element = 'xpath', value = '//div[@class=\"ivu-modal-confirm-footer\"]//span[text()=\"确定\"]', wait_time = 10\n\n    def click(self, by_or_element, value=None, wait_time=10):\n        if value is not None:\n            by = by_or_element\n            logging.info(f\"点击元素：By = {by}, Value = {value}\")\n            try:\n>               element = WebDriverWait(self.driver, wait_time).until(\n                    EC.element_to_be_clickable((by, value))\n                )\n\nPages\\base_page.py:45: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"e3f25f033cd4332bb0d4e5c06fd45672\")>, method = <function element_to_be_clickable.<locals>._predicate at 0x0000027FE5E72200>, message = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        -----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x7ff6e4aa6f65+78965]\nE       \tGetHandleVerifier [0x0x7ff6e4aa6fc0+79056]\nE       \t(No symbol) [0x0x7ff6e4839dda]\nE       \t(No symbol) [0x0x7ff6e48902ea]\nE       \t(No symbol) [0x0x7ff6e489059c]\nE       \t(No symbol) [0x0x7ff6e48e3f37]\nE       \t(No symbol) [0x0x7ff6e48b86af]\nE       \t(No symbol) [0x0x7ff6e48e0dbe]\nE       \t(No symbol) [0x0x7ff6e48b8443]\nE       \t(No symbol) [0x0x7ff6e4881311]\nE       \t(No symbol) [0x0x7ff6e48820a3]\nE       \tGetHandleVerifier [0x0x7ff6e4d5e26d+2926461]\nE       \tGetHandleVerifier [0x0x7ff6e4d58993+2903715]\nE       \tGetHandleVerifier [0x0x7ff6e4d76aed+3026941]\nE       \tGetHandleVerifier [0x0x7ff6e4ac16fe+187406]\nE       \tGetHandleVerifier [0x0x7ff6e4ac96ef+220159]\nE       \tGetHandleVerifier [0x0x7ff6e4aafaf4+114692]\nE       \tGetHandleVerifier [0x0x7ff6e4aafca9+115129]\nE       \tGetHandleVerifier [0x0x7ff6e4a964d8+10728]\nE       \tBaseThreadInitThunk [0x0x7ffee1537374+20]\nE       \tRtlUserThreadStart [0x0x7ffee1a7cc91+33]\n\nmyenv\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:138: TimeoutException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_items.test_coverage.TestCoveragePage object at 0x0000027FE5CE52A0>, login_to_coverage = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"e3f25f033cd4332bb0d4e5c06fd45672\")>\n\n    @allure.story(\"删除数据成功，删除布局成功\")\n    # @pytest.mark.run(order=1)\n    def test_coverage_delsuccess(self, login_to_coverage):\n        driver = login_to_coverage  # WebDriver 实例\n        coverage = Coverage(driver)  # 用 driver 初始化 Coverage\n        layout = \"测试布局A\"\n        sleep(3)\n        # 定位第一行\n        coverage.click_button(\n            '(//div[@id=\"canvasGird0\"]//table[@class=\"vxe-table--body\"])[1]//tr[1]/td[2]'\n        )\n        coveragedata1 = coverage.get_find_element_xpath(\n            '(//span[contains(text(),\"条记录\")])[1]'\n        ).text\n        coverage.click_del_button()  # 点击删除\n        coverage.click_button('//div[@class=\"ivu-modal-confirm-footer\"]//span[text()=\"确定\"]')\n        # 定位第一行\n        sleep(1)\n        coveragedata = coverage.get_find_element_xpath(\n            '(//span[contains(text(),\"条记录\")])[1]'\n        ).text\n        # 获取目标 div 元素，这里的目标是具有特定文本的 div\n        target_div = coverage.get_find_element_xpath(\n            f'//div[@class=\"tabsDivItemCon\"]/div[text()=\" {layout} \"]'\n        )\n    \n        # 获取父容器下所有 div\n        # 这一步是为了确定目标 div 在其父容器中的位置\n        parent_div = coverage.get_find_element_xpath(\n            f'//div[@class=\"tabsDivItemCon\" and ./div[text()=\" {layout} \"]]'\n        )\n        all_children = parent_div.find_elements(By.XPATH, \"./div\")\n    \n        # 获取目标 div 的位置索引（从0开始）\n        # 这里是为了后续操作，比如点击目标 div 相关的按钮\n        index = all_children.index(target_div)\n        print(f\"目标 div 是第 {index + 1} 个 div\")  # 输出 3（如果从0开始则是2）\n        sleep(2)\n        coverage.click_button(\n            f'//div[@class=\"tabsDivItemCon\"]/div[text()=\" {layout} \"]//i'\n        )\n        # 根据目标 div 的位置，点击对应的“删除布局”按钮\n        coverage.click_button(f'(//li[text()=\"删除布局\"])[{index + 1}]')\n        sleep(2)\n        # 点击确认删除的按钮\n>       coverage.click_button('//div[@class=\"ivu-modal-confirm-footer\"]//span[text()=\"确定\"]')\n\nTests\\test_items\\test_coverage.py:1014: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nPages\\itemsPage\\coverage_page.py:41: in click_button\n    self.click(By.XPATH, xpath)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Pages.itemsPage.coverage_page.Coverage object at 0x0000027FE5E611B0>, by_or_element = 'xpath', value = '//div[@class=\"ivu-modal-confirm-footer\"]//span[text()=\"确定\"]', wait_time = 10\n\n    def click(self, by_or_element, value=None, wait_time=10):\n        if value is not None:\n            by = by_or_element\n            logging.info(f\"点击元素：By = {by}, Value = {value}\")\n            try:\n                element = WebDriverWait(self.driver, wait_time).until(\n                    EC.element_to_be_clickable((by, value))\n                )\n            except TimeoutException:\n                logging.warning(f\"❌ 点击超时：元素 {by} = {value} 未在 {wait_time} 秒内变为可点击\")\n>               raise TimeoutException(f\"点击失败，找不到元素：{by} = {value}\")\nE               selenium.common.exceptions.TimeoutException: Message: 点击失败，找不到元素：xpath = //div[@class=\"ivu-modal-confirm-footer\"]//span[text()=\"确定\"]\n\nPages\\base_page.py:50: TimeoutException","steps":[],"attachments":[{"uid":"2416247c577b3820","name":"test_coverage_delsuccess_failure","source":"2416247c577b3820.png","type":"image/png","size":76665},{"uid":"5f6dd34f7862f20b","name":"test_coverage_delsuccess_source","source":"5f6dd34f7862f20b.html","type":"text/html","size":1243068},{"uid":"bf76d2bc55e3c7be","name":"log","source":"bf76d2bc55e3c7be.txt","type":"text/plain","size":4351}],"parameters":[],"attachmentsCount":3,"shouldDisplayMessage":true,"stepsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"login_to_coverage::0","time":{"start":1761141021108,"stop":1761141023363,"duration":2255},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"story","value":"删除数据成功，删除布局成功"},{"name":"feature","value":"覆盖日历表测试用例"},{"name":"parentSuite","value":"Tests.test_items"},{"name":"suite","value":"test_coverage"},{"name":"subSuite","value":"TestCoveragePage"},{"name":"host","value":"WIN-20240820MJV"},{"name":"thread","value":"25856-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"Tests.test_items.test_coverage"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"a982b9f672ad7270","status":"broken","statusDetails":"selenium.common.exceptions.TimeoutException: Message: 点击失败，找不到元素：xpath = //div[@class=\"ivu-modal-confirm-footer\"]//span[text()=\"确定\"]","time":{"start":1761140965258,"stop":1761140984437,"duration":19179}}],"categories":[{"name":"Test defects","matchedStatuses":[]}],"tags":[]},"source":"fdc1ae7a2b66acbe.json","parameterValues":[]}