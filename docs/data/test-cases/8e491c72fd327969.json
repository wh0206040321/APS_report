{"uid":"8e491c72fd327969","name":"test_start","fullName":"Tests.test_items.test_start.TestStartPage#test_start","historyId":"baaad2989c73e6bc842eb5e8b6f66690","time":{"start":1761147487829,"stop":1761147518724,"duration":30895},"description":"初始化并返回 driver","descriptionHtml":"<p>初始化并返回 driver</p>\n","status":"broken","statusMessage":"Exception: 点击失败：Message: element not interactable\n  (Session info: chrome=137.0.7151.69)\nStacktrace:\n\tGetHandleVerifier [0x0x7ff6e4aa6f65+78965]\n\tGetHandleVerifier [0x0x7ff6e4aa6fc0+79056]\n\t(No symbol) [0x0x7ff6e4839c0c]\n\t(No symbol) [0x0x7ff6e48917fd]\n\t(No symbol) [0x0x7ff6e48832a4]\n\t(No symbol) [0x0x7ff6e48b866a]\n\t(No symbol) [0x0x7ff6e4882b56]\n\t(No symbol) [0x0x7ff6e48b8880]\n\t(No symbol) [0x0x7ff6e48e0dbe]\n\t(No symbol) [0x0x7ff6e48b8443]\n\t(No symbol) [0x0x7ff6e4881311]\n\t(No symbol) [0x0x7ff6e48820a3]\n\tGetHandleVerifier [0x0x7ff6e4d5e26d+2926461]\n\tGetHandleVerifier [0x0x7ff6e4d58993+2903715]\n\tGetHandleVerifier [0x0x7ff6e4d76aed+3026941]\n\tGetHandleVerifier [0x0x7ff6e4ac16fe+187406]\n\tGetHandleVerifier [0x0x7ff6e4ac96ef+220159]\n\tGetHandleVerifier [0x0x7ff6e4aafaf4+114692]\n\tGetHandleVerifier [0x0x7ff6e4aafca9+115129]\n\tGetHandleVerifier [0x0x7ff6e4a964d8+10728]\n\tBaseThreadInitThunk [0x0x7ffee1537374+20]\n\tRtlUserThreadStart [0x0x7ffee1a7cc91+33]","statusTrace":"self = <Pages.itemsPage.login_page.LoginPage object at 0x0000027FE60A7B50>, by_or_element = 'xpath', value = '(//span[text()=\"计划计算\"])[1]', wait_time = 10\n\n    def click(self, by_or_element, value=None, wait_time=10):\n        if value is not None:\n            by = by_or_element\n            logging.info(f\"点击元素：By = {by}, Value = {value}\")\n            try:\n                element = WebDriverWait(self.driver, wait_time).until(\n                    EC.element_to_be_clickable((by, value))\n                )\n            except TimeoutException:\n                logging.warning(f\"❌ 点击超时：元素 {by} = {value} 未在 {wait_time} 秒内变为可点击\")\n                raise TimeoutException(f\"点击失败，找不到元素：{by} = {value}\")\n        else:\n            logging.info(\"点击元素：WebElement 对象\")\n            element = by_or_element\n    \n        try:\n>           element.click()\n\nPages\\base_page.py:56: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nmyenv\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:121: in click\n    self._execute(Command.CLICK_ELEMENT)\nmyenv\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:574: in _execute\n    return self._parent.execute(command, params)\nmyenv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:447: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000027FE60A5660>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element not interactable\",\"message\":\"element not interactable\\\\n  (Sessio...ff6e4a964d8+10728]\\\\n\\\\tBaseThreadInitThunk [0x0x7ffee1537374+20]\\\\n\\\\tRtlUserThreadStart [0x0x7ffee1a7cc91+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\nE         (Session info: chrome=137.0.7151.69)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x7ff6e4aa6f65+78965]\nE       \tGetHandleVerifier [0x0x7ff6e4aa6fc0+79056]\nE       \t(No symbol) [0x0x7ff6e4839c0c]\nE       \t(No symbol) [0x0x7ff6e48917fd]\nE       \t(No symbol) [0x0x7ff6e48832a4]\nE       \t(No symbol) [0x0x7ff6e48b866a]\nE       \t(No symbol) [0x0x7ff6e4882b56]\nE       \t(No symbol) [0x0x7ff6e48b8880]\nE       \t(No symbol) [0x0x7ff6e48e0dbe]\nE       \t(No symbol) [0x0x7ff6e48b8443]\nE       \t(No symbol) [0x0x7ff6e4881311]\nE       \t(No symbol) [0x0x7ff6e48820a3]\nE       \tGetHandleVerifier [0x0x7ff6e4d5e26d+2926461]\nE       \tGetHandleVerifier [0x0x7ff6e4d58993+2903715]\nE       \tGetHandleVerifier [0x0x7ff6e4d76aed+3026941]\nE       \tGetHandleVerifier [0x0x7ff6e4ac16fe+187406]\nE       \tGetHandleVerifier [0x0x7ff6e4ac96ef+220159]\nE       \tGetHandleVerifier [0x0x7ff6e4aafaf4+114692]\nE       \tGetHandleVerifier [0x0x7ff6e4aafca9+115129]\nE       \tGetHandleVerifier [0x0x7ff6e4a964d8+10728]\nE       \tBaseThreadInitThunk [0x0x7ffee1537374+20]\nE       \tRtlUserThreadStart [0x0x7ffee1a7cc91+33]\n\nmyenv\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: ElementNotInteractableException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_items.test_start.TestStartPage object at 0x0000027FE5B11E70>\n\n    @allure.story(\"添加物品，添加工艺产能，添加制造订单进行排产\")\n    # @pytest.mark.run(order=1)\n    def test_start(self):\n        \"\"\"初始化并返回 driver\"\"\"\n        date_driver = DateDriver()\n        # 初始化 driver\n        driver = create_driver(date_driver.driver_path)\n        driver.implicitly_wait(3)\n    \n        # 初始化登录页面\n        page = LoginPage(driver)  # 初始化登录页面\n        url = date_driver.url\n        print(f\"[INFO] 正在导航到 URL: {url}\")\n        # 尝试访问 URL，捕获连接错误\n        for attempt in range(2):\n            try:\n                page.navigate_to(url)\n                break\n            except WebDriverException as e:\n                capture_screenshot(driver, f\"login_fail_{attempt + 1}\")\n                logging.warning(f\"第 {attempt + 1} 次连接失败: {e}\")\n                driver.refresh()\n                sleep(date_driver.URL_RETRY_WAIT)\n        else:\n            logging.error(\"连接失败多次，测试中止\")\n            safe_quit(driver)\n            raise RuntimeError(\"无法连接到登录页面\")\n    \n        page.login(date_driver.username, date_driver.password, date_driver.planning)\n    \n        item = ItemPage(driver)  # 用 driver 初始化 ItemPage\n        # 初始化登录页面\n        page = LoginPage(driver)  # 初始化登录页面\n        # 清空之前的共享数据\n        SharedDataUtil.clear_data()\n        item.go_item()\n    \n        # 检查并添加物品（如果不存在）\n        item_names = [\"1测试A\", \"1测试B\", \"1测试C\"]\n        for name in item_names:\n            if not item.check_item_exists(name):\n                item.add_item(name, name)\n            else:\n                print(f\"物品 {name} 已存在，跳过添加\")\n    \n        page.click_button('(//span[text()=\"工艺产能\"])[1]')  # 点击工艺产能\n        master = MasterPage(driver)  # 用 driver 初始化 MasterPage\n        sleep(1)\n        # 检查工艺产能是否存在\n        if not master.check_master_exists(\"1测试C\"):\n            master.click_add_button()  # 检查点击添加\n            # 放大页面\n            master.click_button('(//div[text()=\"新增工艺产能\"])[2]/parent::div//i[1]')\n    \n            master.go_item_dialog(\"1测试C\")\n            sleep(1)\n    \n            # 点击工序选定器\n            master.click_button(\n                '//table[.//div[@class=\"vxe-input type--text size--mini is--controls\"]]//tr[1]/td[2]//input'\n            )\n    \n            # 点击新增工序编号\n            master.add_serial2()\n            # 填写工序编号\n            master.enter_texts(\n                '//table[.//div[@class=\"vxe-input type--number size--mini\"]]//tr[1]/td[2]//input',\n                \"1\",\n            )\n            # 点击下拉框\n            master.click_button(\n                '//table[@class=\"vxe-table--body\"]//tr[1]/td[3]//input[@placeholder=\"请选择\"]'\n            )\n            random_sel1 = random.randint(1, 4)\n            sleep(1)\n            # 输入工序代码\n            master.click_button(\n                f'(//div[@class=\"vxe-select-option--wrapper\"])[1]/div[{random_sel1}]'\n            )\n    \n            # 点击新增输入指令\n            master.add_serial3()\n            # 获取物料名称\n            master.click_button('(//table[.//div[@class=\"vxe-input type--number size--mini\"]])[2]//tr[1]/td[2]//i')\n            sleep(1)\n            master.click_button(\n                '(//table[.//span[@class=\"vxe-cell--label\"]])[2]//tr[.//span[text()=\"1测试A\"]]/td[2]//span[text()=\"1测试A\"]'\n            )\n            master.click_button('(//button[@class=\"ivu-btn ivu-btn-primary\"])[last()]')\n            # 获取物料数量\n            random_num1 = random.randint(1, 100)\n            master.enter_texts(\n                '(//table[.//div[@class=\"vxe-input type--number size--mini\"]])[2]//tr[1]/td[3]//input',\n                f\"{random_num1}\",\n            )\n    \n            # 点击使用指令\n            master.click_button(\n                '//div[.//div[text()=\" 使用指令 \"] and @class=\"ivu-tabs-nav\"]//div[text()=\" 使用指令 \"]'\n            )\n            master.add_serial4()\n    \n            # 使用指令 点击对话框按钮 获取资源名称\n            master.click_button('(//table[.//div[@class=\"vxe-input type--text size--mini is--controls\"]])[3]//tr[1]/td[5]//i')\n            random_int1 = random.randint(1, 8)\n            master.click_button(\n                f'//tr[{random_int1}]/td//span[@class=\"vxe-cell--checkbox\"]'\n            )\n    \n            # 点击对话框按钮\n            master.click_button('(//button[@class=\"ivu-btn ivu-btn-primary\"])[last()]')\n            sleep(2)\n            master_res1 = master.get_find_element_xpath(\n                '(//table[.//div[@class=\"vxe-input type--text size--mini is--controls\"]])[3]//tr[1]/td[5]//input'\n            ).get_attribute(\"value\")\n    \n            # 获取资源能力\n            random_n = random.randint(1, 10)\n            master.enter_texts(\n                '(//table[.//div[@class=\"vxe-input type--text size--mini is--controls\"]])[3]//tr[1]/td[7]//input',\n                f\"{random_n}pm\",\n            )\n    \n            # 点击新增工序编号\n            master.add_serial2()\n            # 填写工序编号\n            master.enter_texts(\n                '//table[.//div[@class=\"vxe-input type--number size--mini\"]]//tr[2]/td[2]//input',\n                \"2\",\n            )\n            # 点击下拉框\n            master.click_button(\n                '//table[@class=\"vxe-table--body\"]//tr[2]/td[3]//input[@placeholder=\"请选择\"]'\n            )\n            random_sel2 = random.randint(1, 4)\n            sleep(1)\n            # 输入工序代码\n            master.click_button(\n                f'(//div[@class=\"vxe-select-option--wrapper\"])[2]/div[{random_sel2}]'\n            )\n    \n            # 点击新增输入指令\n            master.click_button(\n                '//div[.//div[text()=\" 输入指令 \"] and @class=\"ivu-tabs-nav\"]//div[text()=\" 输入指令 \"]'\n            )\n            master.add_serial3()\n            # 获取物料名称\n            master.click_button('(//table[.//div[@class=\"vxe-input type--number size--mini\"]])[2]//tr[1]/td[2]//i')\n            sleep(1)\n            master.click_button(\n                '(//table[.//span[@class=\"vxe-cell--label\"]])[2]//tr[.//span[text()=\"1测试B\"]]/td[2]//span[text()=\"1测试B\"]'\n            )\n            try:\n                master.click_button('(//div[@class=\"h-40px flex-justify-end flex-align-items-end b-t-s-d9e3f3\"])[3]/button[1]')\n            except:\n                master.click_button('(//div[@class=\"h-40px flex-justify-end flex-align-items-end b-t-s-d9e3f3\"])[2]/button[1]')\n    \n            # 获取物料数量\n            random_num2 = random.randint(1, 100)\n            master.enter_texts(\n                '(//table[.//div[@class=\"vxe-input type--number size--mini\"]])[2]//tr[1]/td[3]//input',\n                f\"{random_num2}\",\n            )\n    \n            # 点击使用指令 放大按钮\n            master.click_button(\n                '//div[.//div[text()=\" 使用指令 \"] and @class=\"ivu-tabs-nav\"]//div[text()=\" 使用指令 \"]'\n            )\n            master.add_serial4()\n    \n            # 使用指令 点击对话框按钮 获取资源名称\n            master.click_button('(//table[.//div[@class=\"vxe-input type--text size--mini is--controls\"]])[3]//tr[1]/td[5]//i')\n            random_int2 = random.randint(1, 8)\n            while random_int2 == random_int1:\n                random_int2 = random.randint(1, 8)\n    \n            sleep(2)\n            master.click_button(\n                f'//tr[{random_int2}]/td//span[@class=\"vxe-cell--checkbox\"]'\n            )\n            sleep(1)\n            # 点击对话框按钮\n            master.click_button('(//button[@class=\"ivu-btn ivu-btn-primary\"])[last()]')\n            sleep(2)\n            master_res2 = master.get_find_element_xpath(\n                '(//table[.//div[@class=\"vxe-input type--text size--mini is--controls\"]])[3]//tr[1]/td[5]//input'\n            ).get_attribute(\"value\")\n    \n            SharedDataUtil.save_data(\n                {\"master_res1\": master_res1, \"master_res2\": master_res2}\n            )\n    \n            # 获取资源能力\n            random_n2 = random.randint(1, 10)\n            master.enter_texts(\n                '(//table[.//div[@class=\"vxe-input type--text size--mini is--controls\"]])[3]//tr[1]/td[7]//input',\n                f\"{random_n2}pm\",\n            )\n    \n            # 点击确定\n            confirm_xpath = '(//div[@class=\"h-40px flex-justify-end flex-align-items-end b-t-s-d9e3f3\"])[1]/button[1]'\n            backup_xpath = '(//div[@class=\"h-40px flex-justify-end flex-align-items-end b-t-s-d9e3f3\"])[2]/button[1]'\n    \n            if master.is_clickable(confirm_xpath):\n                master.click_button(confirm_xpath)\n            elif master.is_clickable(backup_xpath):\n                master.click_button(backup_xpath)\n            else:\n                raise Exception(\"主按钮和备用按钮都不可点击，请检查页面状态\")\n    \n        else:\n            eles = driver.find_elements(\n                By.XPATH,\n                '//tr[.//td[2]//span[text()=\"1测试C\"] and .//td[9]//div[text()=\" 使用指令 \"]]//td[12]',\n            )\n            master_res1 = eles[0].text\n            master_res2 = eles[1].text\n            SharedDataUtil.save_data(\n                {\"master_res1\": master_res1, \"master_res2\": master_res2}\n            )\n            print(\"工艺产能 1测试C 已存在，跳过创建\")\n    \n        order = OrderPage(driver)  # 用 driver 初始化 OrderPage\n        list_ = [\"计划业务数据\", \"制造订单\"]\n        for v in list_:\n            page.click_button(f'(//span[text()=\"{v}\"])[1]')\n    \n        # 检查制造订单是否存在\n        if not order.check_order_exists(\"1测试C订单\"):\n            order.add_order(\"1测试C订单\", \"1测试C\")\n        else:\n            print(\"制造订单 1测试C订单 已存在，跳过创建\")\n    \n        plan = PlanPage(driver)\n        wait = WebDriverWait(driver, 60)\n        list_ = [\"计划运行\", \"计算工作台\", \"计划计算\"]\n        for v in list_:\n>           page.click_button(f'(//span[text()=\"{v}\"])[1]')\n\nTests\\test_items\\test_start.py:262: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nPages\\itemsPage\\login_page.py:24: in click_button\n    self.click(By.XPATH, xpath)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Pages.itemsPage.login_page.LoginPage object at 0x0000027FE60A7B50>, by_or_element = 'xpath', value = '(//span[text()=\"计划计算\"])[1]', wait_time = 10\n\n    def click(self, by_or_element, value=None, wait_time=10):\n        if value is not None:\n            by = by_or_element\n            logging.info(f\"点击元素：By = {by}, Value = {value}\")\n            try:\n                element = WebDriverWait(self.driver, wait_time).until(\n                    EC.element_to_be_clickable((by, value))\n                )\n            except TimeoutException:\n                logging.warning(f\"❌ 点击超时：元素 {by} = {value} 未在 {wait_time} 秒内变为可点击\")\n                raise TimeoutException(f\"点击失败，找不到元素：{by} = {value}\")\n        else:\n            logging.info(\"点击元素：WebElement 对象\")\n            element = by_or_element\n    \n        try:\n            element.click()\n        except ElementClickInterceptedException:\n            logging.warning(\"⚠️ 原生点击被拦截，尝试使用 JS 点击\")\n            self.driver.execute_script(\"arguments[0].click();\", element)\n        except Exception as e:\n            logging.warning(f\"点击失败：{e}\")\n>           raise Exception(f\"点击失败：{e}\")\nE           Exception: 点击失败：Message: element not interactable\nE             (Session info: chrome=137.0.7151.69)\nE           Stacktrace:\nE           \tGetHandleVerifier [0x0x7ff6e4aa6f65+78965]\nE           \tGetHandleVerifier [0x0x7ff6e4aa6fc0+79056]\nE           \t(No symbol) [0x0x7ff6e4839c0c]\nE           \t(No symbol) [0x0x7ff6e48917fd]\nE           \t(No symbol) [0x0x7ff6e48832a4]\nE           \t(No symbol) [0x0x7ff6e48b866a]\nE           \t(No symbol) [0x0x7ff6e4882b56]\nE           \t(No symbol) [0x0x7ff6e48b8880]\nE           \t(No symbol) [0x0x7ff6e48e0dbe]\nE           \t(No symbol) [0x0x7ff6e48b8443]\nE           \t(No symbol) [0x0x7ff6e4881311]\nE           \t(No symbol) [0x0x7ff6e48820a3]\nE           \tGetHandleVerifier [0x0x7ff6e4d5e26d+2926461]\nE           \tGetHandleVerifier [0x0x7ff6e4d58993+2903715]\nE           \tGetHandleVerifier [0x0x7ff6e4d76aed+3026941]\nE           \tGetHandleVerifier [0x0x7ff6e4ac16fe+187406]\nE           \tGetHandleVerifier [0x0x7ff6e4ac96ef+220159]\nE           \tGetHandleVerifier [0x0x7ff6e4aafaf4+114692]\nE           \tGetHandleVerifier [0x0x7ff6e4aafca9+115129]\nE           \tGetHandleVerifier [0x0x7ff6e4a964d8+10728]\nE           \tBaseThreadInitThunk [0x0x7ffee1537374+20]\nE           \tRtlUserThreadStart [0x0x7ffee1a7cc91+33]\n\nPages\\base_page.py:62: Exception","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"description":"初始化并返回 driver","status":"broken","statusMessage":"Exception: 点击失败：Message: element not interactable\n  (Session info: chrome=137.0.7151.69)\nStacktrace:\n\tGetHandleVerifier [0x0x7ff6e4aa6f65+78965]\n\tGetHandleVerifier [0x0x7ff6e4aa6fc0+79056]\n\t(No symbol) [0x0x7ff6e4839c0c]\n\t(No symbol) [0x0x7ff6e48917fd]\n\t(No symbol) [0x0x7ff6e48832a4]\n\t(No symbol) [0x0x7ff6e48b866a]\n\t(No symbol) [0x0x7ff6e4882b56]\n\t(No symbol) [0x0x7ff6e48b8880]\n\t(No symbol) [0x0x7ff6e48e0dbe]\n\t(No symbol) [0x0x7ff6e48b8443]\n\t(No symbol) [0x0x7ff6e4881311]\n\t(No symbol) [0x0x7ff6e48820a3]\n\tGetHandleVerifier [0x0x7ff6e4d5e26d+2926461]\n\tGetHandleVerifier [0x0x7ff6e4d58993+2903715]\n\tGetHandleVerifier [0x0x7ff6e4d76aed+3026941]\n\tGetHandleVerifier [0x0x7ff6e4ac16fe+187406]\n\tGetHandleVerifier [0x0x7ff6e4ac96ef+220159]\n\tGetHandleVerifier [0x0x7ff6e4aafaf4+114692]\n\tGetHandleVerifier [0x0x7ff6e4aafca9+115129]\n\tGetHandleVerifier [0x0x7ff6e4a964d8+10728]\n\tBaseThreadInitThunk [0x0x7ffee1537374+20]\n\tRtlUserThreadStart [0x0x7ffee1a7cc91+33]","statusTrace":"self = <Pages.itemsPage.login_page.LoginPage object at 0x0000027FE60A7B50>, by_or_element = 'xpath', value = '(//span[text()=\"计划计算\"])[1]', wait_time = 10\n\n    def click(self, by_or_element, value=None, wait_time=10):\n        if value is not None:\n            by = by_or_element\n            logging.info(f\"点击元素：By = {by}, Value = {value}\")\n            try:\n                element = WebDriverWait(self.driver, wait_time).until(\n                    EC.element_to_be_clickable((by, value))\n                )\n            except TimeoutException:\n                logging.warning(f\"❌ 点击超时：元素 {by} = {value} 未在 {wait_time} 秒内变为可点击\")\n                raise TimeoutException(f\"点击失败，找不到元素：{by} = {value}\")\n        else:\n            logging.info(\"点击元素：WebElement 对象\")\n            element = by_or_element\n    \n        try:\n>           element.click()\n\nPages\\base_page.py:56: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nmyenv\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:121: in click\n    self._execute(Command.CLICK_ELEMENT)\nmyenv\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:574: in _execute\n    return self._parent.execute(command, params)\nmyenv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:447: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000027FE60A5660>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element not interactable\",\"message\":\"element not interactable\\\\n  (Sessio...ff6e4a964d8+10728]\\\\n\\\\tBaseThreadInitThunk [0x0x7ffee1537374+20]\\\\n\\\\tRtlUserThreadStart [0x0x7ffee1a7cc91+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\nE         (Session info: chrome=137.0.7151.69)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x7ff6e4aa6f65+78965]\nE       \tGetHandleVerifier [0x0x7ff6e4aa6fc0+79056]\nE       \t(No symbol) [0x0x7ff6e4839c0c]\nE       \t(No symbol) [0x0x7ff6e48917fd]\nE       \t(No symbol) [0x0x7ff6e48832a4]\nE       \t(No symbol) [0x0x7ff6e48b866a]\nE       \t(No symbol) [0x0x7ff6e4882b56]\nE       \t(No symbol) [0x0x7ff6e48b8880]\nE       \t(No symbol) [0x0x7ff6e48e0dbe]\nE       \t(No symbol) [0x0x7ff6e48b8443]\nE       \t(No symbol) [0x0x7ff6e4881311]\nE       \t(No symbol) [0x0x7ff6e48820a3]\nE       \tGetHandleVerifier [0x0x7ff6e4d5e26d+2926461]\nE       \tGetHandleVerifier [0x0x7ff6e4d58993+2903715]\nE       \tGetHandleVerifier [0x0x7ff6e4d76aed+3026941]\nE       \tGetHandleVerifier [0x0x7ff6e4ac16fe+187406]\nE       \tGetHandleVerifier [0x0x7ff6e4ac96ef+220159]\nE       \tGetHandleVerifier [0x0x7ff6e4aafaf4+114692]\nE       \tGetHandleVerifier [0x0x7ff6e4aafca9+115129]\nE       \tGetHandleVerifier [0x0x7ff6e4a964d8+10728]\nE       \tBaseThreadInitThunk [0x0x7ffee1537374+20]\nE       \tRtlUserThreadStart [0x0x7ffee1a7cc91+33]\n\nmyenv\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: ElementNotInteractableException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_items.test_start.TestStartPage object at 0x0000027FE5B11E70>\n\n    @allure.story(\"添加物品，添加工艺产能，添加制造订单进行排产\")\n    # @pytest.mark.run(order=1)\n    def test_start(self):\n        \"\"\"初始化并返回 driver\"\"\"\n        date_driver = DateDriver()\n        # 初始化 driver\n        driver = create_driver(date_driver.driver_path)\n        driver.implicitly_wait(3)\n    \n        # 初始化登录页面\n        page = LoginPage(driver)  # 初始化登录页面\n        url = date_driver.url\n        print(f\"[INFO] 正在导航到 URL: {url}\")\n        # 尝试访问 URL，捕获连接错误\n        for attempt in range(2):\n            try:\n                page.navigate_to(url)\n                break\n            except WebDriverException as e:\n                capture_screenshot(driver, f\"login_fail_{attempt + 1}\")\n                logging.warning(f\"第 {attempt + 1} 次连接失败: {e}\")\n                driver.refresh()\n                sleep(date_driver.URL_RETRY_WAIT)\n        else:\n            logging.error(\"连接失败多次，测试中止\")\n            safe_quit(driver)\n            raise RuntimeError(\"无法连接到登录页面\")\n    \n        page.login(date_driver.username, date_driver.password, date_driver.planning)\n    \n        item = ItemPage(driver)  # 用 driver 初始化 ItemPage\n        # 初始化登录页面\n        page = LoginPage(driver)  # 初始化登录页面\n        # 清空之前的共享数据\n        SharedDataUtil.clear_data()\n        item.go_item()\n    \n        # 检查并添加物品（如果不存在）\n        item_names = [\"1测试A\", \"1测试B\", \"1测试C\"]\n        for name in item_names:\n            if not item.check_item_exists(name):\n                item.add_item(name, name)\n            else:\n                print(f\"物品 {name} 已存在，跳过添加\")\n    \n        page.click_button('(//span[text()=\"工艺产能\"])[1]')  # 点击工艺产能\n        master = MasterPage(driver)  # 用 driver 初始化 MasterPage\n        sleep(1)\n        # 检查工艺产能是否存在\n        if not master.check_master_exists(\"1测试C\"):\n            master.click_add_button()  # 检查点击添加\n            # 放大页面\n            master.click_button('(//div[text()=\"新增工艺产能\"])[2]/parent::div//i[1]')\n    \n            master.go_item_dialog(\"1测试C\")\n            sleep(1)\n    \n            # 点击工序选定器\n            master.click_button(\n                '//table[.//div[@class=\"vxe-input type--text size--mini is--controls\"]]//tr[1]/td[2]//input'\n            )\n    \n            # 点击新增工序编号\n            master.add_serial2()\n            # 填写工序编号\n            master.enter_texts(\n                '//table[.//div[@class=\"vxe-input type--number size--mini\"]]//tr[1]/td[2]//input',\n                \"1\",\n            )\n            # 点击下拉框\n            master.click_button(\n                '//table[@class=\"vxe-table--body\"]//tr[1]/td[3]//input[@placeholder=\"请选择\"]'\n            )\n            random_sel1 = random.randint(1, 4)\n            sleep(1)\n            # 输入工序代码\n            master.click_button(\n                f'(//div[@class=\"vxe-select-option--wrapper\"])[1]/div[{random_sel1}]'\n            )\n    \n            # 点击新增输入指令\n            master.add_serial3()\n            # 获取物料名称\n            master.click_button('(//table[.//div[@class=\"vxe-input type--number size--mini\"]])[2]//tr[1]/td[2]//i')\n            sleep(1)\n            master.click_button(\n                '(//table[.//span[@class=\"vxe-cell--label\"]])[2]//tr[.//span[text()=\"1测试A\"]]/td[2]//span[text()=\"1测试A\"]'\n            )\n            master.click_button('(//button[@class=\"ivu-btn ivu-btn-primary\"])[last()]')\n            # 获取物料数量\n            random_num1 = random.randint(1, 100)\n            master.enter_texts(\n                '(//table[.//div[@class=\"vxe-input type--number size--mini\"]])[2]//tr[1]/td[3]//input',\n                f\"{random_num1}\",\n            )\n    \n            # 点击使用指令\n            master.click_button(\n                '//div[.//div[text()=\" 使用指令 \"] and @class=\"ivu-tabs-nav\"]//div[text()=\" 使用指令 \"]'\n            )\n            master.add_serial4()\n    \n            # 使用指令 点击对话框按钮 获取资源名称\n            master.click_button('(//table[.//div[@class=\"vxe-input type--text size--mini is--controls\"]])[3]//tr[1]/td[5]//i')\n            random_int1 = random.randint(1, 8)\n            master.click_button(\n                f'//tr[{random_int1}]/td//span[@class=\"vxe-cell--checkbox\"]'\n            )\n    \n            # 点击对话框按钮\n            master.click_button('(//button[@class=\"ivu-btn ivu-btn-primary\"])[last()]')\n            sleep(2)\n            master_res1 = master.get_find_element_xpath(\n                '(//table[.//div[@class=\"vxe-input type--text size--mini is--controls\"]])[3]//tr[1]/td[5]//input'\n            ).get_attribute(\"value\")\n    \n            # 获取资源能力\n            random_n = random.randint(1, 10)\n            master.enter_texts(\n                '(//table[.//div[@class=\"vxe-input type--text size--mini is--controls\"]])[3]//tr[1]/td[7]//input',\n                f\"{random_n}pm\",\n            )\n    \n            # 点击新增工序编号\n            master.add_serial2()\n            # 填写工序编号\n            master.enter_texts(\n                '//table[.//div[@class=\"vxe-input type--number size--mini\"]]//tr[2]/td[2]//input',\n                \"2\",\n            )\n            # 点击下拉框\n            master.click_button(\n                '//table[@class=\"vxe-table--body\"]//tr[2]/td[3]//input[@placeholder=\"请选择\"]'\n            )\n            random_sel2 = random.randint(1, 4)\n            sleep(1)\n            # 输入工序代码\n            master.click_button(\n                f'(//div[@class=\"vxe-select-option--wrapper\"])[2]/div[{random_sel2}]'\n            )\n    \n            # 点击新增输入指令\n            master.click_button(\n                '//div[.//div[text()=\" 输入指令 \"] and @class=\"ivu-tabs-nav\"]//div[text()=\" 输入指令 \"]'\n            )\n            master.add_serial3()\n            # 获取物料名称\n            master.click_button('(//table[.//div[@class=\"vxe-input type--number size--mini\"]])[2]//tr[1]/td[2]//i')\n            sleep(1)\n            master.click_button(\n                '(//table[.//span[@class=\"vxe-cell--label\"]])[2]//tr[.//span[text()=\"1测试B\"]]/td[2]//span[text()=\"1测试B\"]'\n            )\n            try:\n                master.click_button('(//div[@class=\"h-40px flex-justify-end flex-align-items-end b-t-s-d9e3f3\"])[3]/button[1]')\n            except:\n                master.click_button('(//div[@class=\"h-40px flex-justify-end flex-align-items-end b-t-s-d9e3f3\"])[2]/button[1]')\n    \n            # 获取物料数量\n            random_num2 = random.randint(1, 100)\n            master.enter_texts(\n                '(//table[.//div[@class=\"vxe-input type--number size--mini\"]])[2]//tr[1]/td[3]//input',\n                f\"{random_num2}\",\n            )\n    \n            # 点击使用指令 放大按钮\n            master.click_button(\n                '//div[.//div[text()=\" 使用指令 \"] and @class=\"ivu-tabs-nav\"]//div[text()=\" 使用指令 \"]'\n            )\n            master.add_serial4()\n    \n            # 使用指令 点击对话框按钮 获取资源名称\n            master.click_button('(//table[.//div[@class=\"vxe-input type--text size--mini is--controls\"]])[3]//tr[1]/td[5]//i')\n            random_int2 = random.randint(1, 8)\n            while random_int2 == random_int1:\n                random_int2 = random.randint(1, 8)\n    \n            sleep(2)\n            master.click_button(\n                f'//tr[{random_int2}]/td//span[@class=\"vxe-cell--checkbox\"]'\n            )\n            sleep(1)\n            # 点击对话框按钮\n            master.click_button('(//button[@class=\"ivu-btn ivu-btn-primary\"])[last()]')\n            sleep(2)\n            master_res2 = master.get_find_element_xpath(\n                '(//table[.//div[@class=\"vxe-input type--text size--mini is--controls\"]])[3]//tr[1]/td[5]//input'\n            ).get_attribute(\"value\")\n    \n            SharedDataUtil.save_data(\n                {\"master_res1\": master_res1, \"master_res2\": master_res2}\n            )\n    \n            # 获取资源能力\n            random_n2 = random.randint(1, 10)\n            master.enter_texts(\n                '(//table[.//div[@class=\"vxe-input type--text size--mini is--controls\"]])[3]//tr[1]/td[7]//input',\n                f\"{random_n2}pm\",\n            )\n    \n            # 点击确定\n            confirm_xpath = '(//div[@class=\"h-40px flex-justify-end flex-align-items-end b-t-s-d9e3f3\"])[1]/button[1]'\n            backup_xpath = '(//div[@class=\"h-40px flex-justify-end flex-align-items-end b-t-s-d9e3f3\"])[2]/button[1]'\n    \n            if master.is_clickable(confirm_xpath):\n                master.click_button(confirm_xpath)\n            elif master.is_clickable(backup_xpath):\n                master.click_button(backup_xpath)\n            else:\n                raise Exception(\"主按钮和备用按钮都不可点击，请检查页面状态\")\n    \n        else:\n            eles = driver.find_elements(\n                By.XPATH,\n                '//tr[.//td[2]//span[text()=\"1测试C\"] and .//td[9]//div[text()=\" 使用指令 \"]]//td[12]',\n            )\n            master_res1 = eles[0].text\n            master_res2 = eles[1].text\n            SharedDataUtil.save_data(\n                {\"master_res1\": master_res1, \"master_res2\": master_res2}\n            )\n            print(\"工艺产能 1测试C 已存在，跳过创建\")\n    \n        order = OrderPage(driver)  # 用 driver 初始化 OrderPage\n        list_ = [\"计划业务数据\", \"制造订单\"]\n        for v in list_:\n            page.click_button(f'(//span[text()=\"{v}\"])[1]')\n    \n        # 检查制造订单是否存在\n        if not order.check_order_exists(\"1测试C订单\"):\n            order.add_order(\"1测试C订单\", \"1测试C\")\n        else:\n            print(\"制造订单 1测试C订单 已存在，跳过创建\")\n    \n        plan = PlanPage(driver)\n        wait = WebDriverWait(driver, 60)\n        list_ = [\"计划运行\", \"计算工作台\", \"计划计算\"]\n        for v in list_:\n>           page.click_button(f'(//span[text()=\"{v}\"])[1]')\n\nTests\\test_items\\test_start.py:262: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nPages\\itemsPage\\login_page.py:24: in click_button\n    self.click(By.XPATH, xpath)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Pages.itemsPage.login_page.LoginPage object at 0x0000027FE60A7B50>, by_or_element = 'xpath', value = '(//span[text()=\"计划计算\"])[1]', wait_time = 10\n\n    def click(self, by_or_element, value=None, wait_time=10):\n        if value is not None:\n            by = by_or_element\n            logging.info(f\"点击元素：By = {by}, Value = {value}\")\n            try:\n                element = WebDriverWait(self.driver, wait_time).until(\n                    EC.element_to_be_clickable((by, value))\n                )\n            except TimeoutException:\n                logging.warning(f\"❌ 点击超时：元素 {by} = {value} 未在 {wait_time} 秒内变为可点击\")\n                raise TimeoutException(f\"点击失败，找不到元素：{by} = {value}\")\n        else:\n            logging.info(\"点击元素：WebElement 对象\")\n            element = by_or_element\n    \n        try:\n            element.click()\n        except ElementClickInterceptedException:\n            logging.warning(\"⚠️ 原生点击被拦截，尝试使用 JS 点击\")\n            self.driver.execute_script(\"arguments[0].click();\", element)\n        except Exception as e:\n            logging.warning(f\"点击失败：{e}\")\n>           raise Exception(f\"点击失败：{e}\")\nE           Exception: 点击失败：Message: element not interactable\nE             (Session info: chrome=137.0.7151.69)\nE           Stacktrace:\nE           \tGetHandleVerifier [0x0x7ff6e4aa6f65+78965]\nE           \tGetHandleVerifier [0x0x7ff6e4aa6fc0+79056]\nE           \t(No symbol) [0x0x7ff6e4839c0c]\nE           \t(No symbol) [0x0x7ff6e48917fd]\nE           \t(No symbol) [0x0x7ff6e48832a4]\nE           \t(No symbol) [0x0x7ff6e48b866a]\nE           \t(No symbol) [0x0x7ff6e4882b56]\nE           \t(No symbol) [0x0x7ff6e48b8880]\nE           \t(No symbol) [0x0x7ff6e48e0dbe]\nE           \t(No symbol) [0x0x7ff6e48b8443]\nE           \t(No symbol) [0x0x7ff6e4881311]\nE           \t(No symbol) [0x0x7ff6e48820a3]\nE           \tGetHandleVerifier [0x0x7ff6e4d5e26d+2926461]\nE           \tGetHandleVerifier [0x0x7ff6e4d58993+2903715]\nE           \tGetHandleVerifier [0x0x7ff6e4d76aed+3026941]\nE           \tGetHandleVerifier [0x0x7ff6e4ac16fe+187406]\nE           \tGetHandleVerifier [0x0x7ff6e4ac96ef+220159]\nE           \tGetHandleVerifier [0x0x7ff6e4aafaf4+114692]\nE           \tGetHandleVerifier [0x0x7ff6e4aafca9+115129]\nE           \tGetHandleVerifier [0x0x7ff6e4a964d8+10728]\nE           \tBaseThreadInitThunk [0x0x7ffee1537374+20]\nE           \tRtlUserThreadStart [0x0x7ffee1a7cc91+33]\n\nPages\\base_page.py:62: Exception","steps":[],"attachments":[{"uid":"c1316308ab87cbc2","name":"test_start_failure","source":"c1316308ab87cbc2.png","type":"image/png","size":131354},{"uid":"af3af4b14be8abe3","name":"test_start_source","source":"af3af4b14be8abe3.html","type":"text/html","size":1455818},{"uid":"2dcc2094a73fdf31","name":"log","source":"2dcc2094a73fdf31.txt","type":"text/plain","size":14053}],"parameters":[],"shouldDisplayMessage":true,"attachmentsCount":3,"stepsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"story","value":"添加物品，添加工艺产能，添加制造订单进行排产"},{"name":"feature","value":"添加物品，添加工艺产能，添加制造订单测试用例"},{"name":"parentSuite","value":"Tests.test_items"},{"name":"suite","value":"test_start"},{"name":"subSuite","value":"TestStartPage"},{"name":"host","value":"WIN-20240820MJV"},{"name":"thread","value":"25856-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"Tests.test_items.test_start"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":[]},"source":"8e491c72fd327969.json","parameterValues":[]}