{"uid":"25fce3d38d64568b","name":"test_coverage_delcancel","fullName":"Tests.test_items.test_coverage.TestCoveragePage#test_coverage_delcancel","historyId":"cb1b39823405845fcad276bb3167aa3a","time":{"start":1756278102129,"stop":1756278108317,"duration":6188},"status":"broken","statusMessage":"selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\n  (Session info: chrome=137.0.7151.69)\nStacktrace:\n\tGetHandleVerifier [0x0x7ff79bb46f65+78965]\n\tGetHandleVerifier [0x0x7ff79bb46fc0+79056]\n\t(No symbol) [0x0x7ff79b8d9c0c]\n\t(No symbol) [0x0x7ff79b9317fd]\n\t(No symbol) [0x0x7ff79b9232a4]\n\t(No symbol) [0x0x7ff79b95866a]\n\t(No symbol) [0x0x7ff79b922b56]\n\t(No symbol) [0x0x7ff79b958880]\n\t(No symbol) [0x0x7ff79b980dbe]\n\t(No symbol) [0x0x7ff79b958443]\n\t(No symbol) [0x0x7ff79b921311]\n\t(No symbol) [0x0x7ff79b9220a3]\n\tGetHandleVerifier [0x0x7ff79bdfe26d+2926461]\n\tGetHandleVerifier [0x0x7ff79bdf8993+2903715]\n\tGetHandleVerifier [0x0x7ff79be16aed+3026941]\n\tGetHandleVerifier [0x0x7ff79bb616fe+187406]\n\tGetHandleVerifier [0x0x7ff79bb696ef+220159]\n\tGetHandleVerifier [0x0x7ff79bb4faf4+114692]\n\tGetHandleVerifier [0x0x7ff79bb4fca9+115129]\n\tGetHandleVerifier [0x0x7ff79bb364d8+10728]\n\tBaseThreadInitThunk [0x0x7ffe01a57374+20]\n\tRtlUserThreadStart [0x0x7ffe0239cc91+33]","statusTrace":"self = <test_items.test_coverage.TestCoveragePage object at 0x00000185F1A7A110>\nlogin_to_coverage = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"1d8faa8639ff1af2881c7f2edbac9969\")>\n\n    @allure.story(\"取消删除数据\")\n    # @pytest.mark.run(order=1)\n    def test_coverage_delcancel(self, login_to_coverage):\n        driver = login_to_coverage  # WebDriver 实例\n        coverage = Coverage(driver)  # 用 driver 初始化 Coverage\n    \n        # 定位第一行\n        coverage.click_button(\n            '(//div[@id=\"canvasGird0\"]//table[@class=\"vxe-table--body\"])[1]//tr[1]/td[2]'\n        )\n        coveragedata1 = coverage.get_find_element_xpath(\n            '(//div[@id=\"canvasGird0\"]//table[@class=\"vxe-table--body\"])[1]//tr[1]/td[2]'\n        ).text\n        coverage.click_del_button()  # 点击删除\n        sleep(1)\n        # 点击取消\n>       coverage.get_find_element_class(\"ivu-btn-text\").click()\n\nTests\\test_items\\test_coverage.py:755: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nmyenv\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:121: in click\n    self._execute(Command.CLICK_ELEMENT)\nmyenv\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:574: in _execute\n    return self._parent.execute(command, params)\nmyenv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:447: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000185F1A776A0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element not interactable\",\"message\":\"element not interactable\\\\n  (Sessio...ff79bb364d8+10728]\\\\n\\\\tBaseThreadInitThunk [0x0x7ffe01a57374+20]\\\\n\\\\tRtlUserThreadStart [0x0x7ffe0239cc91+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\nE         (Session info: chrome=137.0.7151.69)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x7ff79bb46f65+78965]\nE       \tGetHandleVerifier [0x0x7ff79bb46fc0+79056]\nE       \t(No symbol) [0x0x7ff79b8d9c0c]\nE       \t(No symbol) [0x0x7ff79b9317fd]\nE       \t(No symbol) [0x0x7ff79b9232a4]\nE       \t(No symbol) [0x0x7ff79b95866a]\nE       \t(No symbol) [0x0x7ff79b922b56]\nE       \t(No symbol) [0x0x7ff79b958880]\nE       \t(No symbol) [0x0x7ff79b980dbe]\nE       \t(No symbol) [0x0x7ff79b958443]\nE       \t(No symbol) [0x0x7ff79b921311]\nE       \t(No symbol) [0x0x7ff79b9220a3]\nE       \tGetHandleVerifier [0x0x7ff79bdfe26d+2926461]\nE       \tGetHandleVerifier [0x0x7ff79bdf8993+2903715]\nE       \tGetHandleVerifier [0x0x7ff79be16aed+3026941]\nE       \tGetHandleVerifier [0x0x7ff79bb616fe+187406]\nE       \tGetHandleVerifier [0x0x7ff79bb696ef+220159]\nE       \tGetHandleVerifier [0x0x7ff79bb4faf4+114692]\nE       \tGetHandleVerifier [0x0x7ff79bb4fca9+115129]\nE       \tGetHandleVerifier [0x0x7ff79bb364d8+10728]\nE       \tBaseThreadInitThunk [0x0x7ffe01a57374+20]\nE       \tRtlUserThreadStart [0x0x7ffe0239cc91+33]\n\nmyenv\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: ElementNotInteractableException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":1,"retriesStatusChange":true,"beforeStages":[{"name":"login_to_coverage","time":{"start":1756278093550,"stop":1756278102129,"duration":8579},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"attachmentStep":false,"hasContent":false,"stepsCount":0}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\n  (Session info: chrome=137.0.7151.69)\nStacktrace:\n\tGetHandleVerifier [0x0x7ff79bb46f65+78965]\n\tGetHandleVerifier [0x0x7ff79bb46fc0+79056]\n\t(No symbol) [0x0x7ff79b8d9c0c]\n\t(No symbol) [0x0x7ff79b9317fd]\n\t(No symbol) [0x0x7ff79b9232a4]\n\t(No symbol) [0x0x7ff79b95866a]\n\t(No symbol) [0x0x7ff79b922b56]\n\t(No symbol) [0x0x7ff79b958880]\n\t(No symbol) [0x0x7ff79b980dbe]\n\t(No symbol) [0x0x7ff79b958443]\n\t(No symbol) [0x0x7ff79b921311]\n\t(No symbol) [0x0x7ff79b9220a3]\n\tGetHandleVerifier [0x0x7ff79bdfe26d+2926461]\n\tGetHandleVerifier [0x0x7ff79bdf8993+2903715]\n\tGetHandleVerifier [0x0x7ff79be16aed+3026941]\n\tGetHandleVerifier [0x0x7ff79bb616fe+187406]\n\tGetHandleVerifier [0x0x7ff79bb696ef+220159]\n\tGetHandleVerifier [0x0x7ff79bb4faf4+114692]\n\tGetHandleVerifier [0x0x7ff79bb4fca9+115129]\n\tGetHandleVerifier [0x0x7ff79bb364d8+10728]\n\tBaseThreadInitThunk [0x0x7ffe01a57374+20]\n\tRtlUserThreadStart [0x0x7ffe0239cc91+33]","statusTrace":"self = <test_items.test_coverage.TestCoveragePage object at 0x00000185F1A7A110>\nlogin_to_coverage = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"1d8faa8639ff1af2881c7f2edbac9969\")>\n\n    @allure.story(\"取消删除数据\")\n    # @pytest.mark.run(order=1)\n    def test_coverage_delcancel(self, login_to_coverage):\n        driver = login_to_coverage  # WebDriver 实例\n        coverage = Coverage(driver)  # 用 driver 初始化 Coverage\n    \n        # 定位第一行\n        coverage.click_button(\n            '(//div[@id=\"canvasGird0\"]//table[@class=\"vxe-table--body\"])[1]//tr[1]/td[2]'\n        )\n        coveragedata1 = coverage.get_find_element_xpath(\n            '(//div[@id=\"canvasGird0\"]//table[@class=\"vxe-table--body\"])[1]//tr[1]/td[2]'\n        ).text\n        coverage.click_del_button()  # 点击删除\n        sleep(1)\n        # 点击取消\n>       coverage.get_find_element_class(\"ivu-btn-text\").click()\n\nTests\\test_items\\test_coverage.py:755: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nmyenv\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:121: in click\n    self._execute(Command.CLICK_ELEMENT)\nmyenv\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:574: in _execute\n    return self._parent.execute(command, params)\nmyenv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:447: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000185F1A776A0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element not interactable\",\"message\":\"element not interactable\\\\n  (Sessio...ff79bb364d8+10728]\\\\n\\\\tBaseThreadInitThunk [0x0x7ffe01a57374+20]\\\\n\\\\tRtlUserThreadStart [0x0x7ffe0239cc91+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\nE         (Session info: chrome=137.0.7151.69)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x7ff79bb46f65+78965]\nE       \tGetHandleVerifier [0x0x7ff79bb46fc0+79056]\nE       \t(No symbol) [0x0x7ff79b8d9c0c]\nE       \t(No symbol) [0x0x7ff79b9317fd]\nE       \t(No symbol) [0x0x7ff79b9232a4]\nE       \t(No symbol) [0x0x7ff79b95866a]\nE       \t(No symbol) [0x0x7ff79b922b56]\nE       \t(No symbol) [0x0x7ff79b958880]\nE       \t(No symbol) [0x0x7ff79b980dbe]\nE       \t(No symbol) [0x0x7ff79b958443]\nE       \t(No symbol) [0x0x7ff79b921311]\nE       \t(No symbol) [0x0x7ff79b9220a3]\nE       \tGetHandleVerifier [0x0x7ff79bdfe26d+2926461]\nE       \tGetHandleVerifier [0x0x7ff79bdf8993+2903715]\nE       \tGetHandleVerifier [0x0x7ff79be16aed+3026941]\nE       \tGetHandleVerifier [0x0x7ff79bb616fe+187406]\nE       \tGetHandleVerifier [0x0x7ff79bb696ef+220159]\nE       \tGetHandleVerifier [0x0x7ff79bb4faf4+114692]\nE       \tGetHandleVerifier [0x0x7ff79bb4fca9+115129]\nE       \tGetHandleVerifier [0x0x7ff79bb364d8+10728]\nE       \tBaseThreadInitThunk [0x0x7ffe01a57374+20]\nE       \tRtlUserThreadStart [0x0x7ffe0239cc91+33]\n\nmyenv\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: ElementNotInteractableException","steps":[],"attachments":[{"uid":"a7f6f8f6e3298e4b","name":"test_coverage_delcancel_failure","source":"a7f6f8f6e3298e4b.png","type":"image/png","size":85364},{"uid":"587325d5ce3c48ef","name":"test_coverage_delcancel_source","source":"587325d5ce3c48ef.html","type":"text/html","size":1232124},{"uid":"32ce9b13b20cb258","name":"log","source":"32ce9b13b20cb258.txt","type":"text/plain","size":1243}],"parameters":[],"shouldDisplayMessage":true,"attachmentsCount":3,"attachmentStep":false,"hasContent":true,"stepsCount":0},"afterStages":[{"name":"login_to_coverage::0","time":{"start":1756278108506,"stop":1756278110667,"duration":2161},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"attachmentStep":false,"hasContent":false,"stepsCount":0}],"labels":[{"name":"feature","value":"覆盖日历表测试用例"},{"name":"story","value":"取消删除数据"},{"name":"parentSuite","value":"Tests.test_items"},{"name":"suite","value":"test_coverage"},{"name":"subSuite","value":"TestCoveragePage"},{"name":"host","value":"WIN-20240820MJV"},{"name":"thread","value":"11852-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"Tests.test_items.test_coverage"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"bfae804759cb4d2a","status":"passed","time":{"start":1755782221604,"stop":1755782229012,"duration":7408}}],"categories":[{"name":"Test defects","matchedStatuses":[]}],"tags":[]},"source":"25fce3d38d64568b.json","parameterValues":[]}