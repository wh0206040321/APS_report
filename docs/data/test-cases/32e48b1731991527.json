{"uid":"32e48b1731991527","name":"test_item_selectsuccess3","fullName":"Tests.test_items.test_item.TestItemPage#test_item_selectsuccess3","historyId":"6252ae76858d530b4279869fe0294473","time":{"start":1756179755376,"stop":1756179768842,"duration":13466},"status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message: 点击失败，找不到元素：xpath = //div[text()=\"物料组名称\" and contains(@optid,\"opt_\")]","statusTrace":"self = <Pages.itemsPage.item_page.ItemPage object at 0x000002205A89A770>, by_or_element = 'xpath', value = '//div[text()=\"物料组名称\" and contains(@optid,\"opt_\")]', wait_time = 10\n\n    def click(self, by_or_element, value=None, wait_time=10):\n        if value is not None:\n            by = by_or_element\n            logging.info(f\"点击元素：By = {by}, Value = {value}\")\n            try:\n>               element = WebDriverWait(self.driver, wait_time).until(\n                    EC.element_to_be_clickable((by, value))\n                )\n\nPages\\base_page.py:45: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"c758775a03008779d8e2558168203fc2\")>\nmethod = <function element_to_be_clickable.<locals>._predicate at 0x000002205A685000>, message = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        -----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x7ff7453d6f65+78965]\nE       \tGetHandleVerifier [0x0x7ff7453d6fc0+79056]\nE       \t(No symbol) [0x0x7ff745169dda]\nE       \t(No symbol) [0x0x7ff7451c02ea]\nE       \t(No symbol) [0x0x7ff7451c059c]\nE       \t(No symbol) [0x0x7ff745213f37]\nE       \t(No symbol) [0x0x7ff7451e86af]\nE       \t(No symbol) [0x0x7ff745210dbe]\nE       \t(No symbol) [0x0x7ff7451e8443]\nE       \t(No symbol) [0x0x7ff7451b1311]\nE       \t(No symbol) [0x0x7ff7451b20a3]\nE       \tGetHandleVerifier [0x0x7ff74568e26d+2926461]\nE       \tGetHandleVerifier [0x0x7ff745688993+2903715]\nE       \tGetHandleVerifier [0x0x7ff7456a6aed+3026941]\nE       \tGetHandleVerifier [0x0x7ff7453f16fe+187406]\nE       \tGetHandleVerifier [0x0x7ff7453f96ef+220159]\nE       \tGetHandleVerifier [0x0x7ff7453dfaf4+114692]\nE       \tGetHandleVerifier [0x0x7ff7453dfca9+115129]\nE       \tGetHandleVerifier [0x0x7ff7453c64d8+10728]\nE       \tBaseThreadInitThunk [0x0x7ffe01a57374+20]\nE       \tRtlUserThreadStart [0x0x7ffe0239cc91+33]\n\nmyenv\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:138: TimeoutException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_items.test_item.TestItemPage object at 0x000002205A886DD0>, login_to_item = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"c758775a03008779d8e2558168203fc2\")>\n\n    @allure.story(\"查询物料名称包含A或物料优先度≥1\")\n    # @pytest.mark.run(order=1)\n    def test_item_selectsuccess3(self, login_to_item):\n        driver = login_to_item  # WebDriver 实例\n        item = ItemPage(driver)  # 用 driver 初始化 ItemPage\n    \n        name = \"A\"\n        num = 1\n        # 点击查询\n        item.click_sel_button()\n        sleep(1)\n    \n        # 定位名称输入框\n        element_to_double_click = driver.find_element(\n            By.XPATH,\n            '(//div[@class=\"vxe-table--render-wrapper\"])[3]/div[1]/div[2]//tr[1]/td[4]',\n        )\n        # 创建一个 ActionChains 对象\n        actions = ActionChains(driver)\n        # 双击命令\n        actions.double_click(element_to_double_click).perform()\n        sleep(1)\n        # 点击物料名称\n>       item.click_button('//div[text()=\"物料组名称\" and contains(@optid,\"opt_\")]')\n\nTests\\test_items\\test_item.py:805: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nPages\\itemsPage\\item_page.py:42: in click_button\n    self.click(By.XPATH, xpath)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Pages.itemsPage.item_page.ItemPage object at 0x000002205A89A770>, by_or_element = 'xpath', value = '//div[text()=\"物料组名称\" and contains(@optid,\"opt_\")]', wait_time = 10\n\n    def click(self, by_or_element, value=None, wait_time=10):\n        if value is not None:\n            by = by_or_element\n            logging.info(f\"点击元素：By = {by}, Value = {value}\")\n            try:\n                element = WebDriverWait(self.driver, wait_time).until(\n                    EC.element_to_be_clickable((by, value))\n                )\n            except TimeoutException:\n                logging.warning(f\"❌ 点击超时：元素 {by} = {value} 未在 {wait_time} 秒内变为可点击\")\n>               raise TimeoutException(f\"点击失败，找不到元素：{by} = {value}\")\nE               selenium.common.exceptions.TimeoutException: Message: 点击失败，找不到元素：xpath = //div[text()=\"物料组名称\" and contains(@optid,\"opt_\")]\n\nPages\\base_page.py:50: TimeoutException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":1,"retriesStatusChange":true,"beforeStages":[{"name":"login_to_item","time":{"start":1756179747223,"stop":1756179755375,"duration":8152},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"stepsCount":0,"attachmentStep":false,"shouldDisplayMessage":false,"attachmentsCount":0}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message: 点击失败，找不到元素：xpath = //div[text()=\"物料组名称\" and contains(@optid,\"opt_\")]","statusTrace":"self = <Pages.itemsPage.item_page.ItemPage object at 0x000002205A89A770>, by_or_element = 'xpath', value = '//div[text()=\"物料组名称\" and contains(@optid,\"opt_\")]', wait_time = 10\n\n    def click(self, by_or_element, value=None, wait_time=10):\n        if value is not None:\n            by = by_or_element\n            logging.info(f\"点击元素：By = {by}, Value = {value}\")\n            try:\n>               element = WebDriverWait(self.driver, wait_time).until(\n                    EC.element_to_be_clickable((by, value))\n                )\n\nPages\\base_page.py:45: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"c758775a03008779d8e2558168203fc2\")>\nmethod = <function element_to_be_clickable.<locals>._predicate at 0x000002205A685000>, message = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        -----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x7ff7453d6f65+78965]\nE       \tGetHandleVerifier [0x0x7ff7453d6fc0+79056]\nE       \t(No symbol) [0x0x7ff745169dda]\nE       \t(No symbol) [0x0x7ff7451c02ea]\nE       \t(No symbol) [0x0x7ff7451c059c]\nE       \t(No symbol) [0x0x7ff745213f37]\nE       \t(No symbol) [0x0x7ff7451e86af]\nE       \t(No symbol) [0x0x7ff745210dbe]\nE       \t(No symbol) [0x0x7ff7451e8443]\nE       \t(No symbol) [0x0x7ff7451b1311]\nE       \t(No symbol) [0x0x7ff7451b20a3]\nE       \tGetHandleVerifier [0x0x7ff74568e26d+2926461]\nE       \tGetHandleVerifier [0x0x7ff745688993+2903715]\nE       \tGetHandleVerifier [0x0x7ff7456a6aed+3026941]\nE       \tGetHandleVerifier [0x0x7ff7453f16fe+187406]\nE       \tGetHandleVerifier [0x0x7ff7453f96ef+220159]\nE       \tGetHandleVerifier [0x0x7ff7453dfaf4+114692]\nE       \tGetHandleVerifier [0x0x7ff7453dfca9+115129]\nE       \tGetHandleVerifier [0x0x7ff7453c64d8+10728]\nE       \tBaseThreadInitThunk [0x0x7ffe01a57374+20]\nE       \tRtlUserThreadStart [0x0x7ffe0239cc91+33]\n\nmyenv\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:138: TimeoutException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_items.test_item.TestItemPage object at 0x000002205A886DD0>, login_to_item = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"c758775a03008779d8e2558168203fc2\")>\n\n    @allure.story(\"查询物料名称包含A或物料优先度≥1\")\n    # @pytest.mark.run(order=1)\n    def test_item_selectsuccess3(self, login_to_item):\n        driver = login_to_item  # WebDriver 实例\n        item = ItemPage(driver)  # 用 driver 初始化 ItemPage\n    \n        name = \"A\"\n        num = 1\n        # 点击查询\n        item.click_sel_button()\n        sleep(1)\n    \n        # 定位名称输入框\n        element_to_double_click = driver.find_element(\n            By.XPATH,\n            '(//div[@class=\"vxe-table--render-wrapper\"])[3]/div[1]/div[2]//tr[1]/td[4]',\n        )\n        # 创建一个 ActionChains 对象\n        actions = ActionChains(driver)\n        # 双击命令\n        actions.double_click(element_to_double_click).perform()\n        sleep(1)\n        # 点击物料名称\n>       item.click_button('//div[text()=\"物料组名称\" and contains(@optid,\"opt_\")]')\n\nTests\\test_items\\test_item.py:805: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nPages\\itemsPage\\item_page.py:42: in click_button\n    self.click(By.XPATH, xpath)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Pages.itemsPage.item_page.ItemPage object at 0x000002205A89A770>, by_or_element = 'xpath', value = '//div[text()=\"物料组名称\" and contains(@optid,\"opt_\")]', wait_time = 10\n\n    def click(self, by_or_element, value=None, wait_time=10):\n        if value is not None:\n            by = by_or_element\n            logging.info(f\"点击元素：By = {by}, Value = {value}\")\n            try:\n                element = WebDriverWait(self.driver, wait_time).until(\n                    EC.element_to_be_clickable((by, value))\n                )\n            except TimeoutException:\n                logging.warning(f\"❌ 点击超时：元素 {by} = {value} 未在 {wait_time} 秒内变为可点击\")\n>               raise TimeoutException(f\"点击失败，找不到元素：{by} = {value}\")\nE               selenium.common.exceptions.TimeoutException: Message: 点击失败，找不到元素：xpath = //div[text()=\"物料组名称\" and contains(@optid,\"opt_\")]\n\nPages\\base_page.py:50: TimeoutException","steps":[],"attachments":[{"uid":"9af1f953c636c9bd","name":"test_item_selectsuccess3_failure","source":"9af1f953c636c9bd.png","type":"image/png","size":117828},{"uid":"1dd59801eb5490e5","name":"test_item_selectsuccess3_source","source":"1dd59801eb5490e5.html","type":"text/html","size":1379678},{"uid":"9373896b4739d455","name":"log","source":"9373896b4739d455.txt","type":"text/plain","size":1168}],"parameters":[],"hasContent":true,"stepsCount":0,"attachmentStep":false,"shouldDisplayMessage":true,"attachmentsCount":3},"afterStages":[{"name":"login_to_item::0","time":{"start":1756179769027,"stop":1756179771177,"duration":2150},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"stepsCount":0,"attachmentStep":false,"shouldDisplayMessage":false,"attachmentsCount":0}],"labels":[{"name":"story","value":"查询物料名称包含A或物料优先度≥1"},{"name":"feature","value":"物料表测试用例"},{"name":"parentSuite","value":"Tests.test_items"},{"name":"suite","value":"test_item"},{"name":"subSuite","value":"TestItemPage"},{"name":"host","value":"WIN-20240820MJV"},{"name":"thread","value":"14880-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"Tests.test_items.test_item"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"2481f4026cd763fb","status":"passed","time":{"start":1755778891412,"stop":1755778912287,"duration":20875}}],"categories":[{"name":"Test defects","matchedStatuses":[]}],"tags":[]},"source":"32e48b1731991527.json","parameterValues":[]}