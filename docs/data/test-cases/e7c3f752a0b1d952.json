{"uid":"e7c3f752a0b1d952","name":"test_setting_displaynum1","fullName":"Tests.test_item.test_setting.TestSettingPage#test_setting_displaynum1","historyId":"f32be1acfd6ca8d865323c332d45fa17","time":{"start":1752762055158,"stop":1752762059332,"duration":4174},"status":"broken","statusMessage":"selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\n  (Session info: chrome=137.0.7151.69)\nStacktrace:\n\tGetHandleVerifier [0x0x7ff7445e6f65+78965]\n\tGetHandleVerifier [0x0x7ff7445e6fc0+79056]\n\t(No symbol) [0x0x7ff744379c0c]\n\t(No symbol) [0x0x7ff7443c9932]\n\t(No symbol) [0x0x7ff7443c7799]\n\t(No symbol) [0x0x7ff7443f866a]\n\t(No symbol) [0x0x7ff7443c2b56]\n\t(No symbol) [0x0x7ff7443f8880]\n\t(No symbol) [0x0x7ff744420dbe]\n\t(No symbol) [0x0x7ff7443f8443]\n\t(No symbol) [0x0x7ff7443c1311]\n\t(No symbol) [0x0x7ff7443c20a3]\n\tGetHandleVerifier [0x0x7ff74489e26d+2926461]\n\tGetHandleVerifier [0x0x7ff744898993+2903715]\n\tGetHandleVerifier [0x0x7ff7448b6aed+3026941]\n\tGetHandleVerifier [0x0x7ff7446016fe+187406]\n\tGetHandleVerifier [0x0x7ff7446096ef+220159]\n\tGetHandleVerifier [0x0x7ff7445efaf4+114692]\n\tGetHandleVerifier [0x0x7ff7445efca9+115129]\n\tGetHandleVerifier [0x0x7ff7445d64d8+10728]\n\tBaseThreadInitThunk [0x0x7ffa099e7374+20]\n\tRtlUserThreadStart [0x0x7ffa0b89cc91+33]","statusTrace":"self = <test_item.test_setting.TestSettingPage object at 0x000001FF37973CA0>\nlogin_to_setting = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"2dd4e4134d5279c505998e11c7073c40\")>\n\n    @allure.story(\"设置表格布局-设置一页显示数据为5\")\n    # @pytest.mark.run(order=1)\n    def test_setting_displaynum1(self, login_to_setting):\n        driver = login_to_setting  # WebDriver 实例\n        setting = SettingPage(driver)  # 用 driver 初始化 SettingPage\n        layout = \"测试布局A\"\n        setting.click_button(f'//div[@class=\"tabsDivItemCon\"]/div[text()=\" {layout} \"]')\n        setting.click_setting_button()\n        num = 5\n        inupt_number = setting.get_find_element_xpath(\n            '//div[text()=\"一页显示条数:\"]/following-sibling::div//input'\n        )\n>       inupt_number.send_keys(Keys.CONTROL, \"a\")\n\nTests\\test_item\\test_setting.py:540: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nmyenv\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:305: in send_keys\n    self._execute(\nmyenv\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:574: in _execute\n    return self._parent.execute(command, params)\nmyenv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:447: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001FF37BE5900>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element not interactable\",\"message\":\"element not interactable\\\\n  (Sessio...ff7445d64d8+10728]\\\\n\\\\tBaseThreadInitThunk [0x0x7ffa099e7374+20]\\\\n\\\\tRtlUserThreadStart [0x0x7ffa0b89cc91+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\nE         (Session info: chrome=137.0.7151.69)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x7ff7445e6f65+78965]\nE       \tGetHandleVerifier [0x0x7ff7445e6fc0+79056]\nE       \t(No symbol) [0x0x7ff744379c0c]\nE       \t(No symbol) [0x0x7ff7443c9932]\nE       \t(No symbol) [0x0x7ff7443c7799]\nE       \t(No symbol) [0x0x7ff7443f866a]\nE       \t(No symbol) [0x0x7ff7443c2b56]\nE       \t(No symbol) [0x0x7ff7443f8880]\nE       \t(No symbol) [0x0x7ff744420dbe]\nE       \t(No symbol) [0x0x7ff7443f8443]\nE       \t(No symbol) [0x0x7ff7443c1311]\nE       \t(No symbol) [0x0x7ff7443c20a3]\nE       \tGetHandleVerifier [0x0x7ff74489e26d+2926461]\nE       \tGetHandleVerifier [0x0x7ff744898993+2903715]\nE       \tGetHandleVerifier [0x0x7ff7448b6aed+3026941]\nE       \tGetHandleVerifier [0x0x7ff7446016fe+187406]\nE       \tGetHandleVerifier [0x0x7ff7446096ef+220159]\nE       \tGetHandleVerifier [0x0x7ff7445efaf4+114692]\nE       \tGetHandleVerifier [0x0x7ff7445efca9+115129]\nE       \tGetHandleVerifier [0x0x7ff7445d64d8+10728]\nE       \tBaseThreadInitThunk [0x0x7ffa099e7374+20]\nE       \tRtlUserThreadStart [0x0x7ffa0b89cc91+33]\n\nmyenv\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: ElementNotInteractableException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":1,"retriesStatusChange":false,"beforeStages":[{"name":"login_to_setting","time":{"start":1752762047470,"stop":1752762055157,"duration":7687},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentStep":false,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\n  (Session info: chrome=137.0.7151.69)\nStacktrace:\n\tGetHandleVerifier [0x0x7ff7445e6f65+78965]\n\tGetHandleVerifier [0x0x7ff7445e6fc0+79056]\n\t(No symbol) [0x0x7ff744379c0c]\n\t(No symbol) [0x0x7ff7443c9932]\n\t(No symbol) [0x0x7ff7443c7799]\n\t(No symbol) [0x0x7ff7443f866a]\n\t(No symbol) [0x0x7ff7443c2b56]\n\t(No symbol) [0x0x7ff7443f8880]\n\t(No symbol) [0x0x7ff744420dbe]\n\t(No symbol) [0x0x7ff7443f8443]\n\t(No symbol) [0x0x7ff7443c1311]\n\t(No symbol) [0x0x7ff7443c20a3]\n\tGetHandleVerifier [0x0x7ff74489e26d+2926461]\n\tGetHandleVerifier [0x0x7ff744898993+2903715]\n\tGetHandleVerifier [0x0x7ff7448b6aed+3026941]\n\tGetHandleVerifier [0x0x7ff7446016fe+187406]\n\tGetHandleVerifier [0x0x7ff7446096ef+220159]\n\tGetHandleVerifier [0x0x7ff7445efaf4+114692]\n\tGetHandleVerifier [0x0x7ff7445efca9+115129]\n\tGetHandleVerifier [0x0x7ff7445d64d8+10728]\n\tBaseThreadInitThunk [0x0x7ffa099e7374+20]\n\tRtlUserThreadStart [0x0x7ffa0b89cc91+33]","statusTrace":"self = <test_item.test_setting.TestSettingPage object at 0x000001FF37973CA0>\nlogin_to_setting = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"2dd4e4134d5279c505998e11c7073c40\")>\n\n    @allure.story(\"设置表格布局-设置一页显示数据为5\")\n    # @pytest.mark.run(order=1)\n    def test_setting_displaynum1(self, login_to_setting):\n        driver = login_to_setting  # WebDriver 实例\n        setting = SettingPage(driver)  # 用 driver 初始化 SettingPage\n        layout = \"测试布局A\"\n        setting.click_button(f'//div[@class=\"tabsDivItemCon\"]/div[text()=\" {layout} \"]')\n        setting.click_setting_button()\n        num = 5\n        inupt_number = setting.get_find_element_xpath(\n            '//div[text()=\"一页显示条数:\"]/following-sibling::div//input'\n        )\n>       inupt_number.send_keys(Keys.CONTROL, \"a\")\n\nTests\\test_item\\test_setting.py:540: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nmyenv\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:305: in send_keys\n    self._execute(\nmyenv\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:574: in _execute\n    return self._parent.execute(command, params)\nmyenv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:447: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001FF37BE5900>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element not interactable\",\"message\":\"element not interactable\\\\n  (Sessio...ff7445d64d8+10728]\\\\n\\\\tBaseThreadInitThunk [0x0x7ffa099e7374+20]\\\\n\\\\tRtlUserThreadStart [0x0x7ffa0b89cc91+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\nE         (Session info: chrome=137.0.7151.69)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x7ff7445e6f65+78965]\nE       \tGetHandleVerifier [0x0x7ff7445e6fc0+79056]\nE       \t(No symbol) [0x0x7ff744379c0c]\nE       \t(No symbol) [0x0x7ff7443c9932]\nE       \t(No symbol) [0x0x7ff7443c7799]\nE       \t(No symbol) [0x0x7ff7443f866a]\nE       \t(No symbol) [0x0x7ff7443c2b56]\nE       \t(No symbol) [0x0x7ff7443f8880]\nE       \t(No symbol) [0x0x7ff744420dbe]\nE       \t(No symbol) [0x0x7ff7443f8443]\nE       \t(No symbol) [0x0x7ff7443c1311]\nE       \t(No symbol) [0x0x7ff7443c20a3]\nE       \tGetHandleVerifier [0x0x7ff74489e26d+2926461]\nE       \tGetHandleVerifier [0x0x7ff744898993+2903715]\nE       \tGetHandleVerifier [0x0x7ff7448b6aed+3026941]\nE       \tGetHandleVerifier [0x0x7ff7446016fe+187406]\nE       \tGetHandleVerifier [0x0x7ff7446096ef+220159]\nE       \tGetHandleVerifier [0x0x7ff7445efaf4+114692]\nE       \tGetHandleVerifier [0x0x7ff7445efca9+115129]\nE       \tGetHandleVerifier [0x0x7ff7445d64d8+10728]\nE       \tBaseThreadInitThunk [0x0x7ffa099e7374+20]\nE       \tRtlUserThreadStart [0x0x7ffa0b89cc91+33]\n\nmyenv\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: ElementNotInteractableException","steps":[],"attachments":[{"uid":"91310f7956f69fcb","name":"test_setting_displaynum1_failure","source":"91310f7956f69fcb.png","type":"image/png","size":126527},{"uid":"4b544ab2fe4ccf50","name":"test_setting_displaynum1_source","source":"4b544ab2fe4ccf50.html","type":"text/html","size":1264800},{"uid":"7a4c47446fbfbb2c","name":"log","source":"7a4c47446fbfbb2c.txt","type":"text/plain","size":2301}],"parameters":[],"stepsCount":0,"attachmentStep":false,"hasContent":true,"shouldDisplayMessage":true,"attachmentsCount":3},"afterStages":[{"name":"login_to_setting::0","time":{"start":1752762059550,"stop":1752762061665,"duration":2115},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentStep":false,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0}],"labels":[{"name":"feature","value":"标准应用设置测试用例"},{"name":"story","value":"设置表格布局-设置一页显示数据为5"},{"name":"parentSuite","value":"Tests.test_item"},{"name":"suite","value":"test_setting"},{"name":"subSuite","value":"TestSettingPage"},{"name":"host","value":"WIN-20240820MJV"},{"name":"thread","value":"11236-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"Tests.test_item.test_setting"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"1a8de5c1f6a01bae","status":"broken","statusDetails":"selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\n  (Session info: chrome=137.0.7151.69)\nStacktrace:\n\tGetHandleVerifier [0x0x7ff7445e6f65+78965]\n\tGetHandleVerifier [0x0x7ff7445e6fc0+79056]\n\t(No symbol) [0x0x7ff744379c0c]\n\t(No symbol) [0x0x7ff7443c9932]\n\t(No symbol) [0x0x7ff7443c7799]\n\t(No symbol) [0x0x7ff7443f866a]\n\t(No symbol) [0x0x7ff7443c2b56]\n\t(No symbol) [0x0x7ff7443f8880]\n\t(No symbol) [0x0x7ff744420dbe]\n\t(No symbol) [0x0x7ff7443f8443]\n\t(No symbol) [0x0x7ff7443c1311]\n\t(No symbol) [0x0x7ff7443c20a3]\n\tGetHandleVerifier [0x0x7ff74489e26d+2926461]\n\tGetHandleVerifier [0x0x7ff744898993+2903715]\n\tGetHandleVerifier [0x0x7ff7448b6aed+3026941]\n\tGetHandleVerifier [0x0x7ff7446016fe+187406]\n\tGetHandleVerifier [0x0x7ff7446096ef+220159]\n\tGetHandleVerifier [0x0x7ff7445efaf4+114692]\n\tGetHandleVerifier [0x0x7ff7445efca9+115129]\n\tGetHandleVerifier [0x0x7ff7445d64d8+10728]\n\tBaseThreadInitThunk [0x0x7ffa099e7374+20]\n\tRtlUserThreadStart [0x0x7ffa0b89cc91+33]","time":{"start":1752762040984,"stop":1752762045096,"duration":4112}}],"categories":[{"name":"Test defects","matchedStatuses":[]}],"tags":[]},"source":"e7c3f752a0b1d952.json","parameterValues":[]}