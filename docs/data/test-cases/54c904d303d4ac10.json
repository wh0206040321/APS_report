{"uid":"54c904d303d4ac10","name":"test_coverage_addweeksuccess1","fullName":"Tests.test_items.test_coverage.TestCoveragePage#test_coverage_addweeksuccess1","historyId":"9631c0e6ce5fc85dc1bc888ed223ffd9","time":{"start":1756818319066,"stop":1756818343385,"duration":24319},"status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n\tGetHandleVerifier [0x0x7ff7cf066f65+78965]\n\tGetHandleVerifier [0x0x7ff7cf066fc0+79056]\n\t(No symbol) [0x0x7ff7cedf9dda]\n\t(No symbol) [0x0x7ff7cee502ea]\n\t(No symbol) [0x0x7ff7cee5059c]\n\t(No symbol) [0x0x7ff7ceea3f37]\n\t(No symbol) [0x0x7ff7cee786af]\n\t(No symbol) [0x0x7ff7ceea0dbe]\n\t(No symbol) [0x0x7ff7cee78443]\n\t(No symbol) [0x0x7ff7cee41311]\n\t(No symbol) [0x0x7ff7cee420a3]\n\tGetHandleVerifier [0x0x7ff7cf31e26d+2926461]\n\tGetHandleVerifier [0x0x7ff7cf318993+2903715]\n\tGetHandleVerifier [0x0x7ff7cf336aed+3026941]\n\tGetHandleVerifier [0x0x7ff7cf0816fe+187406]\n\tGetHandleVerifier [0x0x7ff7cf0896ef+220159]\n\tGetHandleVerifier [0x0x7ff7cf06faf4+114692]\n\tGetHandleVerifier [0x0x7ff7cf06fca9+115129]\n\tGetHandleVerifier [0x0x7ff7cf0564d8+10728]\n\tBaseThreadInitThunk [0x0x7ff835d07374+20]\n\tRtlUserThreadStart [0x0x7ff836dfcc91+33]","statusTrace":"self = <test_items.test_coverage.TestCoveragePage object at 0x000001E265E7E260>\nlogin_to_coverage = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"869715a8414d356cfeed9a35b1a0e382\")>\n\n    @allure.story(\"添加数据成功\")\n    # @pytest.mark.run(order=1)\n    def test_coverage_addweeksuccess1(self, login_to_coverage):\n        driver = login_to_coverage  # WebDriver 实例\n        coverage = Coverage(driver)  # 用 driver 初始化 Coverage\n        start = \"2027/08/21 00:00:00\"\n        end = \"2028/07/21 00:00:00\"\n        coverage.click_add_button()\n    \n        # 点击资源\n        coverage.click_button(\n            '//div[@id=\"2ssy7pog-1nb7\"]//i'\n        )\n        # 勾选框\n        random_int = random.randint(1, 8)\n        sleep(1)\n        coverage.click_button(f'(//span[@class=\"vxe-cell--checkbox\"])[{random_int}]')\n        sleep(1)\n        coverage.click_button(\n            '(//div[@class=\"h-40px flex-justify-end vxe-modal-footer1 flex-align-items-end b-t-s-d9e3f3\"])[2]/button[1]'\n        )\n        sleep(1)\n        # 获取勾选的资源代码\n        resource = coverage.get_find_element_xpath(\n            '//div[@id=\"2ssy7pog-1nb7\"]//input'\n        ).get_attribute(\"value\")\n    \n        coverage.enter_texts(f'(//input[@class=\"ivu-input ivu-input-default\"])[2]', 3)\n    \n        # 时序\n        coverage.enter_texts(\n            '//div[@id=\"tg89jocr-6to2\"]//input', f\"{start};{end}\"\n        )\n        chronology = coverage.get_find_element_xpath(\n            '//div[@id=\"tg89jocr-6to2\"]//input'\n        ).get_attribute(\"value\")\n    \n        # 资源量\n        coverage.enter_texts('//div[@id=\"k0z05daz-8tok\"]//input', \"4\")\n        resources = coverage.get_find_element_xpath(\n            '//div[@id=\"k0z05daz-8tok\"]//input'\n        ).get_attribute(\"value\")\n    \n        sleep(1)\n        coverage.click_button(\n            '(//div[@class=\"h-40px flex-justify-end vxe-modal-footer1 flex-align-items-end b-t-s-d9e3f3\"])[1]/button[1]'\n        )\n        sleep(1)\n        coverage.click_button(\n            '//span[text()=\" 更新时间\"]/following-sibling::div'\n        )\n        sleep(1)\n        coverage.click_button(\n            '//span[text()=\" 更新时间\"]/following-sibling::div'\n        )\n        sleep(1)\n>       addcoverage = coverage.get_find_element_xpath(\n            f'(//span[text()=\"{resource}\"])[1]/ancestor::tr[1]/td[2]'\n        ).text\n\nTests\\test_items\\test_coverage.py:468: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nPages\\itemsPage\\coverage_page.py:46: in get_find_element_xpath\n    return self.find_element(By.XPATH, xpath)\nPages\\base_page.py:28: in find_element\n    return WebDriverWait(self.driver, wait_time).until(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"869715a8414d356cfeed9a35b1a0e382\")>\nmethod = <function presence_of_element_located.<locals>._predicate at 0x000001E2661BE830>, message = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        -----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x7ff7cf066f65+78965]\nE       \tGetHandleVerifier [0x0x7ff7cf066fc0+79056]\nE       \t(No symbol) [0x0x7ff7cedf9dda]\nE       \t(No symbol) [0x0x7ff7cee502ea]\nE       \t(No symbol) [0x0x7ff7cee5059c]\nE       \t(No symbol) [0x0x7ff7ceea3f37]\nE       \t(No symbol) [0x0x7ff7cee786af]\nE       \t(No symbol) [0x0x7ff7ceea0dbe]\nE       \t(No symbol) [0x0x7ff7cee78443]\nE       \t(No symbol) [0x0x7ff7cee41311]\nE       \t(No symbol) [0x0x7ff7cee420a3]\nE       \tGetHandleVerifier [0x0x7ff7cf31e26d+2926461]\nE       \tGetHandleVerifier [0x0x7ff7cf318993+2903715]\nE       \tGetHandleVerifier [0x0x7ff7cf336aed+3026941]\nE       \tGetHandleVerifier [0x0x7ff7cf0816fe+187406]\nE       \tGetHandleVerifier [0x0x7ff7cf0896ef+220159]\nE       \tGetHandleVerifier [0x0x7ff7cf06faf4+114692]\nE       \tGetHandleVerifier [0x0x7ff7cf06fca9+115129]\nE       \tGetHandleVerifier [0x0x7ff7cf0564d8+10728]\nE       \tBaseThreadInitThunk [0x0x7ff835d07374+20]\nE       \tRtlUserThreadStart [0x0x7ff836dfcc91+33]\n\nmyenv\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:138: TimeoutException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"login_to_coverage","time":{"start":1756818310646,"stop":1756818319065,"duration":8419},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentStep":false,"stepsCount":0,"hasContent":false,"attachmentsCount":0,"shouldDisplayMessage":false}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n\tGetHandleVerifier [0x0x7ff7cf066f65+78965]\n\tGetHandleVerifier [0x0x7ff7cf066fc0+79056]\n\t(No symbol) [0x0x7ff7cedf9dda]\n\t(No symbol) [0x0x7ff7cee502ea]\n\t(No symbol) [0x0x7ff7cee5059c]\n\t(No symbol) [0x0x7ff7ceea3f37]\n\t(No symbol) [0x0x7ff7cee786af]\n\t(No symbol) [0x0x7ff7ceea0dbe]\n\t(No symbol) [0x0x7ff7cee78443]\n\t(No symbol) [0x0x7ff7cee41311]\n\t(No symbol) [0x0x7ff7cee420a3]\n\tGetHandleVerifier [0x0x7ff7cf31e26d+2926461]\n\tGetHandleVerifier [0x0x7ff7cf318993+2903715]\n\tGetHandleVerifier [0x0x7ff7cf336aed+3026941]\n\tGetHandleVerifier [0x0x7ff7cf0816fe+187406]\n\tGetHandleVerifier [0x0x7ff7cf0896ef+220159]\n\tGetHandleVerifier [0x0x7ff7cf06faf4+114692]\n\tGetHandleVerifier [0x0x7ff7cf06fca9+115129]\n\tGetHandleVerifier [0x0x7ff7cf0564d8+10728]\n\tBaseThreadInitThunk [0x0x7ff835d07374+20]\n\tRtlUserThreadStart [0x0x7ff836dfcc91+33]","statusTrace":"self = <test_items.test_coverage.TestCoveragePage object at 0x000001E265E7E260>\nlogin_to_coverage = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"869715a8414d356cfeed9a35b1a0e382\")>\n\n    @allure.story(\"添加数据成功\")\n    # @pytest.mark.run(order=1)\n    def test_coverage_addweeksuccess1(self, login_to_coverage):\n        driver = login_to_coverage  # WebDriver 实例\n        coverage = Coverage(driver)  # 用 driver 初始化 Coverage\n        start = \"2027/08/21 00:00:00\"\n        end = \"2028/07/21 00:00:00\"\n        coverage.click_add_button()\n    \n        # 点击资源\n        coverage.click_button(\n            '//div[@id=\"2ssy7pog-1nb7\"]//i'\n        )\n        # 勾选框\n        random_int = random.randint(1, 8)\n        sleep(1)\n        coverage.click_button(f'(//span[@class=\"vxe-cell--checkbox\"])[{random_int}]')\n        sleep(1)\n        coverage.click_button(\n            '(//div[@class=\"h-40px flex-justify-end vxe-modal-footer1 flex-align-items-end b-t-s-d9e3f3\"])[2]/button[1]'\n        )\n        sleep(1)\n        # 获取勾选的资源代码\n        resource = coverage.get_find_element_xpath(\n            '//div[@id=\"2ssy7pog-1nb7\"]//input'\n        ).get_attribute(\"value\")\n    \n        coverage.enter_texts(f'(//input[@class=\"ivu-input ivu-input-default\"])[2]', 3)\n    \n        # 时序\n        coverage.enter_texts(\n            '//div[@id=\"tg89jocr-6to2\"]//input', f\"{start};{end}\"\n        )\n        chronology = coverage.get_find_element_xpath(\n            '//div[@id=\"tg89jocr-6to2\"]//input'\n        ).get_attribute(\"value\")\n    \n        # 资源量\n        coverage.enter_texts('//div[@id=\"k0z05daz-8tok\"]//input', \"4\")\n        resources = coverage.get_find_element_xpath(\n            '//div[@id=\"k0z05daz-8tok\"]//input'\n        ).get_attribute(\"value\")\n    \n        sleep(1)\n        coverage.click_button(\n            '(//div[@class=\"h-40px flex-justify-end vxe-modal-footer1 flex-align-items-end b-t-s-d9e3f3\"])[1]/button[1]'\n        )\n        sleep(1)\n        coverage.click_button(\n            '//span[text()=\" 更新时间\"]/following-sibling::div'\n        )\n        sleep(1)\n        coverage.click_button(\n            '//span[text()=\" 更新时间\"]/following-sibling::div'\n        )\n        sleep(1)\n>       addcoverage = coverage.get_find_element_xpath(\n            f'(//span[text()=\"{resource}\"])[1]/ancestor::tr[1]/td[2]'\n        ).text\n\nTests\\test_items\\test_coverage.py:468: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nPages\\itemsPage\\coverage_page.py:46: in get_find_element_xpath\n    return self.find_element(By.XPATH, xpath)\nPages\\base_page.py:28: in find_element\n    return WebDriverWait(self.driver, wait_time).until(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"869715a8414d356cfeed9a35b1a0e382\")>\nmethod = <function presence_of_element_located.<locals>._predicate at 0x000001E2661BE830>, message = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        -----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x7ff7cf066f65+78965]\nE       \tGetHandleVerifier [0x0x7ff7cf066fc0+79056]\nE       \t(No symbol) [0x0x7ff7cedf9dda]\nE       \t(No symbol) [0x0x7ff7cee502ea]\nE       \t(No symbol) [0x0x7ff7cee5059c]\nE       \t(No symbol) [0x0x7ff7ceea3f37]\nE       \t(No symbol) [0x0x7ff7cee786af]\nE       \t(No symbol) [0x0x7ff7ceea0dbe]\nE       \t(No symbol) [0x0x7ff7cee78443]\nE       \t(No symbol) [0x0x7ff7cee41311]\nE       \t(No symbol) [0x0x7ff7cee420a3]\nE       \tGetHandleVerifier [0x0x7ff7cf31e26d+2926461]\nE       \tGetHandleVerifier [0x0x7ff7cf318993+2903715]\nE       \tGetHandleVerifier [0x0x7ff7cf336aed+3026941]\nE       \tGetHandleVerifier [0x0x7ff7cf0816fe+187406]\nE       \tGetHandleVerifier [0x0x7ff7cf0896ef+220159]\nE       \tGetHandleVerifier [0x0x7ff7cf06faf4+114692]\nE       \tGetHandleVerifier [0x0x7ff7cf06fca9+115129]\nE       \tGetHandleVerifier [0x0x7ff7cf0564d8+10728]\nE       \tBaseThreadInitThunk [0x0x7ff835d07374+20]\nE       \tRtlUserThreadStart [0x0x7ff836dfcc91+33]\n\nmyenv\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:138: TimeoutException","steps":[],"attachments":[{"uid":"f45c4e3a68e65c92","name":"test_coverage_addweeksuccess1_failure","source":"f45c4e3a68e65c92.png","type":"image/png","size":101261},{"uid":"a8d14662cf8959d6","name":"test_coverage_addweeksuccess1_source","source":"a8d14662cf8959d6.html","type":"text/html","size":1271732},{"uid":"5921fde04a50d1f","name":"log","source":"5921fde04a50d1f.txt","type":"text/plain","size":3376}],"parameters":[],"attachmentStep":false,"stepsCount":0,"hasContent":true,"attachmentsCount":3,"shouldDisplayMessage":true},"afterStages":[{"name":"login_to_coverage::0","time":{"start":1756818343560,"stop":1756818345719,"duration":2159},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentStep":false,"stepsCount":0,"hasContent":false,"attachmentsCount":0,"shouldDisplayMessage":false}],"labels":[{"name":"story","value":"添加数据成功"},{"name":"feature","value":"覆盖日历表测试用例"},{"name":"parentSuite","value":"Tests.test_items"},{"name":"suite","value":"test_coverage"},{"name":"subSuite","value":"TestCoveragePage"},{"name":"host","value":"WIN-20240820MJV"},{"name":"thread","value":"31324-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"Tests.test_items.test_coverage"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":[]},"source":"54c904d303d4ac10.json","parameterValues":[]}