{"uid":"a23a77fcaae909ee","name":"test_item_add_success","fullName":"Tests.test_material.test_materialShift.TestItemPage#test_item_add_success","historyId":"cc269782acfab160856f0f63edae8c89","time":{"start":1754933592322,"stop":1754933608058,"duration":15736},"status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message: 点击失败，找不到元素：xpath = //label[text()='显示颜色']/following-sibling::div/div//li[@class='ivu-select-item'][1]","statusTrace":"self = <Pages.materialPage.warehouseLocation_page.WarehouseLocationPage object at 0x000001C1E0BA02B0>, by_or_element = 'xpath'\nvalue = \"//label[text()='显示颜色']/following-sibling::div/div//li[@class='ivu-select-item'][1]\", wait_time = 10\n\n    def click(self, by_or_element, value=None, wait_time=10):\n        if value is not None:\n            by = by_or_element\n            logging.info(f\"点击元素：By = {by}, Value = {value}\")\n            try:\n>               element = WebDriverWait(self.driver, wait_time).until(\n                    EC.element_to_be_clickable((by, value))\n                )\n\nPages\\base_page.py:45: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"61dc22a81b3b8f0bb90dfad79673dbe8\")>\nmethod = <function element_to_be_clickable.<locals>._predicate at 0x000001C1E0DC8DC0>, message = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        -----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\nmyenv\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:138: TimeoutException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_material.test_materialShift.TestItemPage object at 0x000001C1DEA922C0>\nlogin_to_item = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"61dc22a81b3b8f0bb90dfad79673dbe8\")>\n\n    @allure.story(\"新增全部数据测试\")\n    # @pytest.mark.run(order=1)\n    def test_item_add_success(self, login_to_item):\n    \n    \n        self.item.click_add_button()  # 点击添加\n    \n        # 输入框要修改的值\n        text_str = \"11\"\n        # 输入框的xpath\n        input_xpath_list = [\n            \"//label[text()='代码']/following-sibling::div//input\",\n            \"//label[text()='备注']/following-sibling::div//input\",\n            \"(//label[text()='时间']/following-sibling::div//input)[1]\",\n            \"(//label[text()='时间']/following-sibling::div//input)[2]\",\n            \"(//label[text()='时间']/following-sibling::div//input)[3]\",\n            \"(//label[text()='时间']/following-sibling::div//input)[4]\",\n            \"(//label[text()='时间']/following-sibling::div//input)[5]\",\n            \"(//label[text()='时间']/following-sibling::div//input)[6]\"\n        ]\n    \n        # 选中编辑数据\n        self.item.click_button('//tr[./td[2][.//span[text()=\"333\"]]]/td[2]')\n        # 点击修改按钮\n        self.item.click_edi_button()\n        sleep(1)\n    \n        # 点击显示颜色下拉\n        self.item.click_button(\"//label[text()='显示颜色']/following-sibling::div/div\")\n>       self.item.click_button(\"//label[text()='显示颜色']/following-sibling::div/div//li[@class='ivu-select-item'][1]\")\n\nTests\\test_material\\test_materialShift.py:324: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nPages\\materialPage\\warehouseLocation_page.py:60: in click_button\n    self.click(By.XPATH, xpath)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Pages.materialPage.warehouseLocation_page.WarehouseLocationPage object at 0x000001C1E0BA02B0>, by_or_element = 'xpath'\nvalue = \"//label[text()='显示颜色']/following-sibling::div/div//li[@class='ivu-select-item'][1]\", wait_time = 10\n\n    def click(self, by_or_element, value=None, wait_time=10):\n        if value is not None:\n            by = by_or_element\n            logging.info(f\"点击元素：By = {by}, Value = {value}\")\n            try:\n                element = WebDriverWait(self.driver, wait_time).until(\n                    EC.element_to_be_clickable((by, value))\n                )\n            except TimeoutException:\n                logging.warning(f\"❌ 点击超时：元素 {by} = {value} 未在 {wait_time} 秒内变为可点击\")\n>               raise TimeoutException(f\"点击失败，找不到元素：{by} = {value}\")\nE               selenium.common.exceptions.TimeoutException: Message: 点击失败，找不到元素：xpath = //label[text()='显示颜色']/following-sibling::div/div//li[@class='ivu-select-item'][1]\n\nPages\\base_page.py:50: TimeoutException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"login_to_item","time":{"start":1754933399793,"stop":1754933408534,"duration":8741},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"attachmentStep":false,"hasContent":false,"stepsCount":0},{"name":"setup","time":{"start":1754933592320,"stop":1754933592322,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"attachmentStep":false,"hasContent":false,"stepsCount":0}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message: 点击失败，找不到元素：xpath = //label[text()='显示颜色']/following-sibling::div/div//li[@class='ivu-select-item'][1]","statusTrace":"self = <Pages.materialPage.warehouseLocation_page.WarehouseLocationPage object at 0x000001C1E0BA02B0>, by_or_element = 'xpath'\nvalue = \"//label[text()='显示颜色']/following-sibling::div/div//li[@class='ivu-select-item'][1]\", wait_time = 10\n\n    def click(self, by_or_element, value=None, wait_time=10):\n        if value is not None:\n            by = by_or_element\n            logging.info(f\"点击元素：By = {by}, Value = {value}\")\n            try:\n>               element = WebDriverWait(self.driver, wait_time).until(\n                    EC.element_to_be_clickable((by, value))\n                )\n\nPages\\base_page.py:45: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"61dc22a81b3b8f0bb90dfad79673dbe8\")>\nmethod = <function element_to_be_clickable.<locals>._predicate at 0x000001C1E0DC8DC0>, message = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        -----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\nmyenv\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:138: TimeoutException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_material.test_materialShift.TestItemPage object at 0x000001C1DEA922C0>\nlogin_to_item = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"61dc22a81b3b8f0bb90dfad79673dbe8\")>\n\n    @allure.story(\"新增全部数据测试\")\n    # @pytest.mark.run(order=1)\n    def test_item_add_success(self, login_to_item):\n    \n    \n        self.item.click_add_button()  # 点击添加\n    \n        # 输入框要修改的值\n        text_str = \"11\"\n        # 输入框的xpath\n        input_xpath_list = [\n            \"//label[text()='代码']/following-sibling::div//input\",\n            \"//label[text()='备注']/following-sibling::div//input\",\n            \"(//label[text()='时间']/following-sibling::div//input)[1]\",\n            \"(//label[text()='时间']/following-sibling::div//input)[2]\",\n            \"(//label[text()='时间']/following-sibling::div//input)[3]\",\n            \"(//label[text()='时间']/following-sibling::div//input)[4]\",\n            \"(//label[text()='时间']/following-sibling::div//input)[5]\",\n            \"(//label[text()='时间']/following-sibling::div//input)[6]\"\n        ]\n    \n        # 选中编辑数据\n        self.item.click_button('//tr[./td[2][.//span[text()=\"333\"]]]/td[2]')\n        # 点击修改按钮\n        self.item.click_edi_button()\n        sleep(1)\n    \n        # 点击显示颜色下拉\n        self.item.click_button(\"//label[text()='显示颜色']/following-sibling::div/div\")\n>       self.item.click_button(\"//label[text()='显示颜色']/following-sibling::div/div//li[@class='ivu-select-item'][1]\")\n\nTests\\test_material\\test_materialShift.py:324: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nPages\\materialPage\\warehouseLocation_page.py:60: in click_button\n    self.click(By.XPATH, xpath)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Pages.materialPage.warehouseLocation_page.WarehouseLocationPage object at 0x000001C1E0BA02B0>, by_or_element = 'xpath'\nvalue = \"//label[text()='显示颜色']/following-sibling::div/div//li[@class='ivu-select-item'][1]\", wait_time = 10\n\n    def click(self, by_or_element, value=None, wait_time=10):\n        if value is not None:\n            by = by_or_element\n            logging.info(f\"点击元素：By = {by}, Value = {value}\")\n            try:\n                element = WebDriverWait(self.driver, wait_time).until(\n                    EC.element_to_be_clickable((by, value))\n                )\n            except TimeoutException:\n                logging.warning(f\"❌ 点击超时：元素 {by} = {value} 未在 {wait_time} 秒内变为可点击\")\n>               raise TimeoutException(f\"点击失败，找不到元素：{by} = {value}\")\nE               selenium.common.exceptions.TimeoutException: Message: 点击失败，找不到元素：xpath = //label[text()='显示颜色']/following-sibling::div/div//li[@class='ivu-select-item'][1]\n\nPages\\base_page.py:50: TimeoutException","steps":[],"attachments":[{"uid":"fb49b11ed93fca4d","name":"log","source":"fb49b11ed93fca4d.txt","type":"text/plain","size":1171}],"parameters":[],"shouldDisplayMessage":true,"attachmentsCount":1,"attachmentStep":false,"hasContent":true,"stepsCount":0},"afterStages":[{"name":"login_to_item::0","time":{"start":1754933698536,"stop":1754933700686,"duration":2150},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"attachmentStep":false,"hasContent":false,"stepsCount":0}],"labels":[{"name":"feature","value":"收货班次测试用例"},{"name":"story","value":"新增全部数据测试"},{"name":"parentSuite","value":"Tests.test_material"},{"name":"suite","value":"test_materialShift"},{"name":"subSuite","value":"TestItemPage"},{"name":"host","value":"WIN-20240820MJV"},{"name":"thread","value":"24412-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"Tests.test_material.test_materialShift"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":[]},"source":"a23a77fcaae909ee.json","parameterValues":[]}