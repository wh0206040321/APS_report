{"uid":"90088cae50a03d27","name":"test_order_addall","fullName":"Tests.test_items.test_order.TestOrderPage#test_order_addall","historyId":"234d4fa2c78d00cf81411c8808857971","time":{"start":1758721289064,"stop":1758721466164,"duration":177100},"status":"broken","statusMessage":"selenium.common.exceptions.NoSuchElementException: Message: 元素未找到（XPath列表第2个）: //label[text()=\"指定产线\"]/following-sibling::div//input; For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception","statusTrace":"self = <Pages.itemsPage.adds_page.AddsPages object at 0x00000271F3913430>\nxpath_list = ['//label[text()=\"订单代码\"]/following-sibling::div//input', '//label[text()=\"指定产线\"]/following-sibling::div//input', '//la...//label[text()=\"自定义字符1\"]/following-sibling::div//input', '//label[text()=\"自定义字符2\"]/following-sibling::div//input', ...]\ntext_value = ''\n\n    def batch_acquisition_input(self, xpath_list=[], text_value=\"\"):\n        \"\"\"批量获取输入框\"\"\"\n        values = []\n        for index, xpath in enumerate(xpath_list, 1):\n            try:\n>               value = self.get_find_element_xpath(xpath).get_attribute(\"value\")\n\nPages\\itemsPage\\adds_page.py:91: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nPages\\itemsPage\\adds_page.py:27: in get_find_element_xpath\n    return self.find_element(By.XPATH, xpath)\nPages\\base_page.py:28: in find_element\n    return WebDriverWait(self.driver, wait_time).until(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"b49dc39d7a0e36c505f39076bd7fc0a4\")>, method = <function presence_of_element_located.<locals>._predicate at 0x00000271F3C5F010>, message = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        -----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x7ff7ee406f65+78965]\nE       \tGetHandleVerifier [0x0x7ff7ee406fc0+79056]\nE       \t(No symbol) [0x0x7ff7ee199dda]\nE       \t(No symbol) [0x0x7ff7ee1f02ea]\nE       \t(No symbol) [0x0x7ff7ee1f059c]\nE       \t(No symbol) [0x0x7ff7ee243f37]\nE       \t(No symbol) [0x0x7ff7ee2186af]\nE       \t(No symbol) [0x0x7ff7ee240dbe]\nE       \t(No symbol) [0x0x7ff7ee218443]\nE       \t(No symbol) [0x0x7ff7ee1e1311]\nE       \t(No symbol) [0x0x7ff7ee1e20a3]\nE       \tGetHandleVerifier [0x0x7ff7ee6be26d+2926461]\nE       \tGetHandleVerifier [0x0x7ff7ee6b8993+2903715]\nE       \tGetHandleVerifier [0x0x7ff7ee6d6aed+3026941]\nE       \tGetHandleVerifier [0x0x7ff7ee4216fe+187406]\nE       \tGetHandleVerifier [0x0x7ff7ee4296ef+220159]\nE       \tGetHandleVerifier [0x0x7ff7ee40faf4+114692]\nE       \tGetHandleVerifier [0x0x7ff7ee40fca9+115129]\nE       \tGetHandleVerifier [0x0x7ff7ee3f64d8+10728]\nE       \tBaseThreadInitThunk [0x0x7ffcefb37374+20]\nE       \tRtlUserThreadStart [0x0x7ffcf06bcc91+33]\n\nmyenv\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:138: TimeoutException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_items.test_order.TestOrderPage object at 0x00000271F3421810>, login_to_order = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"b49dc39d7a0e36c505f39076bd7fc0a4\")>\n\n    @allure.story(\"输入全部数据，添加保存成功\")\n    # @pytest.mark.run(order=1)\n    def test_order_addall(self, login_to_order):\n        driver = login_to_order  # WebDriver 实例\n        order = OrderPage(driver)  # 用 driver 初始化 OrderPage\n        adds = AddsPages(driver)\n        input_value = '11测试全部数据'\n        order.click_add_button()\n        custom_xpath_list = [\n            f'//label[text()=\"自定义字符{i}\"]/following-sibling::div//input'\n            for i in range(1, 51) if i != 3\n        ]\n        text_list = [\n            '//label[text()=\"订单代码\"]/following-sibling::div//input',\n            '//label[text()=\"指定产线\"]/following-sibling::div//input',\n            '//label[text()=\"关联订单组\"]/following-sibling::div//input',\n            '//label[text()=\"备注\"]/following-sibling::div//input',\n        ]\n        text_list.extend(custom_xpath_list)\n        adds.batch_modify_input(text_list, input_value)\n    \n        value_bos = '//div[@class=\"vxe-modal--body\"]//table[@class=\"vxe-table--body\"]//tr[1]/td[3]'\n        spe_xpath_list = [\n            f'//label[text()=\"生产特征{i}\"]/following-sibling::div//i'\n            for i in range(1, 11)\n        ]\n        box_list = [\n            '//label[text()=\"物料\"]/following-sibling::div//i',\n            '//label[text()=\"BASE物料\"]/following-sibling::div//i',\n            '//label[text()=\"客户\"]/following-sibling::div//i',\n            '//label[text()=\"一对一关联指定料号\"]/following-sibling::div//i',\n            '//label[text()=\"后订单\"]/following-sibling::div//i',\n            '//label[text()=\"用户指定资源\"]/following-sibling::div//i',\n            '//label[text()=\"首工序资源\"]/following-sibling::div//i',\n        ]\n        box_list.extend(spe_xpath_list)\n        adds.batch_modify_dialog_box(box_list, value_bos)\n    \n        select_list = [\n            {\"select\": '//label[text()=\"订单区分\"]/following-sibling::div//i', \"value\": '//li[text()=\"补充\"]'},\n            {\"select\": '//label[text()=\"显示颜色\"]/following-sibling::div//i',\n             \"value\": '//span[text()=\"RGB(128,128,255)\"]'},\n            {\"select\": '//label[text()=\"分派方向\"]/following-sibling::div//i', \"value\": '//li[text()=\"遵从优先度\"]'},\n            {\"select\": '//label[text()=\"订单状态\"]/following-sibling::div//i', \"value\": '//li[text()=\"开始生产\"]'},\n        ]\n        adds.batch_modify_select_input(select_list)\n    \n        input_num_value = '1'\n        num_xpath_list1 = [\n            f'//label[text()=\"数值特征{i}\"]/following-sibling::div//input'\n            for i in range(1, 6)\n        ]\n        num_xpath_list2 = [\n            f'//label[text()=\"自定义数字{i}\"]/following-sibling::div//input'\n            for i in range(1, 51)\n        ]\n    \n        num_list = [\n            '//label[text()=\"计划数量\"]/following-sibling::div//input',\n            '//label[text()=\"用户指定订单数量固定级别\"]/following-sibling::div//input',\n            '//label[text()=\"优先度\"]/following-sibling::div//input',\n            '//label[text()=\"显示顺序\"]/following-sibling::div//input',\n            '//label[text()=\"制造效率\"]/following-sibling::div//input',\n            '//label[text()=\"实绩数量\"]/following-sibling::div//input',\n            '//label[text()=\"系统内部资源计划顺序\"]/following-sibling::div//input',\n            '//label[text()=\"用户调整计划顺序\"]/following-sibling::div//input',\n        ]\n        num_list.extend(num_xpath_list1 + num_xpath_list2)\n        adds.batch_modify_input(num_list, input_num_value)\n    \n        time_xpath_list = [\n            f'//label[text()=\"自定义日期{i}\"]/following-sibling::div//input'\n            for i in range(1, 21)\n        ]\n        time_list = [\n            '//label[text()=\"订货时间\"]/following-sibling::div//input',\n            '//label[text()=\"最早开始时间\"]/following-sibling::div//input',\n            '//label[text()=\"交货期\"]/following-sibling::div//input',\n            '//label[text()=\"实绩结束时间\"]/following-sibling::div//input',\n        ]\n        time_list.extend(time_xpath_list)\n        adds.batch_order_time_input(time_list)\n    \n        box_input_list = [xpath.replace(\"//i\", \"//input\") for xpath in box_list]\n        select_input_list = [item[\"select\"].replace(\"//i\", \"//input\") for item in select_list]\n    \n        checked = order.get_find_element_xpath('//label[text()=\"非分派对象标志\"]/following-sibling::div//label/span')\n        if checked.get_attribute(\"class\") == \"ivu-checkbox\":\n            checked.click()\n        before_checked = order.get_find_element_xpath(\n            '//label[text()=\"非分派对象标志\"]/following-sibling::div//label/span').get_attribute(\"class\")\n    \n        all_value = text_list + box_input_list + select_input_list + num_list + time_list\n        len_num = len(all_value)\n>       before_all_value = adds.batch_acquisition_input(all_value)\n\nTests\\test_items\\test_order.py:1199: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Pages.itemsPage.adds_page.AddsPages object at 0x00000271F3913430>\nxpath_list = ['//label[text()=\"订单代码\"]/following-sibling::div//input', '//label[text()=\"指定产线\"]/following-sibling::div//input', '//la...//label[text()=\"自定义字符1\"]/following-sibling::div//input', '//label[text()=\"自定义字符2\"]/following-sibling::div//input', ...]\ntext_value = ''\n\n    def batch_acquisition_input(self, xpath_list=[], text_value=\"\"):\n        \"\"\"批量获取输入框\"\"\"\n        values = []\n        for index, xpath in enumerate(xpath_list, 1):\n            try:\n                value = self.get_find_element_xpath(xpath).get_attribute(\"value\")\n                values.append(value)\n    \n            except TimeoutException:\n>               raise NoSuchElementException(\n                    f\"元素未找到（XPath列表第{index}个）: {xpath}\"\n                )\nE               selenium.common.exceptions.NoSuchElementException: Message: 元素未找到（XPath列表第2个）: //label[text()=\"指定产线\"]/following-sibling::div//input; For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception\n\nPages\\itemsPage\\adds_page.py:95: NoSuchElementException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"login_to_order","time":{"start":1758721279951,"stop":1758721289063,"duration":9112},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentStep":false,"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.NoSuchElementException: Message: 元素未找到（XPath列表第2个）: //label[text()=\"指定产线\"]/following-sibling::div//input; For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception","statusTrace":"self = <Pages.itemsPage.adds_page.AddsPages object at 0x00000271F3913430>\nxpath_list = ['//label[text()=\"订单代码\"]/following-sibling::div//input', '//label[text()=\"指定产线\"]/following-sibling::div//input', '//la...//label[text()=\"自定义字符1\"]/following-sibling::div//input', '//label[text()=\"自定义字符2\"]/following-sibling::div//input', ...]\ntext_value = ''\n\n    def batch_acquisition_input(self, xpath_list=[], text_value=\"\"):\n        \"\"\"批量获取输入框\"\"\"\n        values = []\n        for index, xpath in enumerate(xpath_list, 1):\n            try:\n>               value = self.get_find_element_xpath(xpath).get_attribute(\"value\")\n\nPages\\itemsPage\\adds_page.py:91: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nPages\\itemsPage\\adds_page.py:27: in get_find_element_xpath\n    return self.find_element(By.XPATH, xpath)\nPages\\base_page.py:28: in find_element\n    return WebDriverWait(self.driver, wait_time).until(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"b49dc39d7a0e36c505f39076bd7fc0a4\")>, method = <function presence_of_element_located.<locals>._predicate at 0x00000271F3C5F010>, message = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        -----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x7ff7ee406f65+78965]\nE       \tGetHandleVerifier [0x0x7ff7ee406fc0+79056]\nE       \t(No symbol) [0x0x7ff7ee199dda]\nE       \t(No symbol) [0x0x7ff7ee1f02ea]\nE       \t(No symbol) [0x0x7ff7ee1f059c]\nE       \t(No symbol) [0x0x7ff7ee243f37]\nE       \t(No symbol) [0x0x7ff7ee2186af]\nE       \t(No symbol) [0x0x7ff7ee240dbe]\nE       \t(No symbol) [0x0x7ff7ee218443]\nE       \t(No symbol) [0x0x7ff7ee1e1311]\nE       \t(No symbol) [0x0x7ff7ee1e20a3]\nE       \tGetHandleVerifier [0x0x7ff7ee6be26d+2926461]\nE       \tGetHandleVerifier [0x0x7ff7ee6b8993+2903715]\nE       \tGetHandleVerifier [0x0x7ff7ee6d6aed+3026941]\nE       \tGetHandleVerifier [0x0x7ff7ee4216fe+187406]\nE       \tGetHandleVerifier [0x0x7ff7ee4296ef+220159]\nE       \tGetHandleVerifier [0x0x7ff7ee40faf4+114692]\nE       \tGetHandleVerifier [0x0x7ff7ee40fca9+115129]\nE       \tGetHandleVerifier [0x0x7ff7ee3f64d8+10728]\nE       \tBaseThreadInitThunk [0x0x7ffcefb37374+20]\nE       \tRtlUserThreadStart [0x0x7ffcf06bcc91+33]\n\nmyenv\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:138: TimeoutException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_items.test_order.TestOrderPage object at 0x00000271F3421810>, login_to_order = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"b49dc39d7a0e36c505f39076bd7fc0a4\")>\n\n    @allure.story(\"输入全部数据，添加保存成功\")\n    # @pytest.mark.run(order=1)\n    def test_order_addall(self, login_to_order):\n        driver = login_to_order  # WebDriver 实例\n        order = OrderPage(driver)  # 用 driver 初始化 OrderPage\n        adds = AddsPages(driver)\n        input_value = '11测试全部数据'\n        order.click_add_button()\n        custom_xpath_list = [\n            f'//label[text()=\"自定义字符{i}\"]/following-sibling::div//input'\n            for i in range(1, 51) if i != 3\n        ]\n        text_list = [\n            '//label[text()=\"订单代码\"]/following-sibling::div//input',\n            '//label[text()=\"指定产线\"]/following-sibling::div//input',\n            '//label[text()=\"关联订单组\"]/following-sibling::div//input',\n            '//label[text()=\"备注\"]/following-sibling::div//input',\n        ]\n        text_list.extend(custom_xpath_list)\n        adds.batch_modify_input(text_list, input_value)\n    \n        value_bos = '//div[@class=\"vxe-modal--body\"]//table[@class=\"vxe-table--body\"]//tr[1]/td[3]'\n        spe_xpath_list = [\n            f'//label[text()=\"生产特征{i}\"]/following-sibling::div//i'\n            for i in range(1, 11)\n        ]\n        box_list = [\n            '//label[text()=\"物料\"]/following-sibling::div//i',\n            '//label[text()=\"BASE物料\"]/following-sibling::div//i',\n            '//label[text()=\"客户\"]/following-sibling::div//i',\n            '//label[text()=\"一对一关联指定料号\"]/following-sibling::div//i',\n            '//label[text()=\"后订单\"]/following-sibling::div//i',\n            '//label[text()=\"用户指定资源\"]/following-sibling::div//i',\n            '//label[text()=\"首工序资源\"]/following-sibling::div//i',\n        ]\n        box_list.extend(spe_xpath_list)\n        adds.batch_modify_dialog_box(box_list, value_bos)\n    \n        select_list = [\n            {\"select\": '//label[text()=\"订单区分\"]/following-sibling::div//i', \"value\": '//li[text()=\"补充\"]'},\n            {\"select\": '//label[text()=\"显示颜色\"]/following-sibling::div//i',\n             \"value\": '//span[text()=\"RGB(128,128,255)\"]'},\n            {\"select\": '//label[text()=\"分派方向\"]/following-sibling::div//i', \"value\": '//li[text()=\"遵从优先度\"]'},\n            {\"select\": '//label[text()=\"订单状态\"]/following-sibling::div//i', \"value\": '//li[text()=\"开始生产\"]'},\n        ]\n        adds.batch_modify_select_input(select_list)\n    \n        input_num_value = '1'\n        num_xpath_list1 = [\n            f'//label[text()=\"数值特征{i}\"]/following-sibling::div//input'\n            for i in range(1, 6)\n        ]\n        num_xpath_list2 = [\n            f'//label[text()=\"自定义数字{i}\"]/following-sibling::div//input'\n            for i in range(1, 51)\n        ]\n    \n        num_list = [\n            '//label[text()=\"计划数量\"]/following-sibling::div//input',\n            '//label[text()=\"用户指定订单数量固定级别\"]/following-sibling::div//input',\n            '//label[text()=\"优先度\"]/following-sibling::div//input',\n            '//label[text()=\"显示顺序\"]/following-sibling::div//input',\n            '//label[text()=\"制造效率\"]/following-sibling::div//input',\n            '//label[text()=\"实绩数量\"]/following-sibling::div//input',\n            '//label[text()=\"系统内部资源计划顺序\"]/following-sibling::div//input',\n            '//label[text()=\"用户调整计划顺序\"]/following-sibling::div//input',\n        ]\n        num_list.extend(num_xpath_list1 + num_xpath_list2)\n        adds.batch_modify_input(num_list, input_num_value)\n    \n        time_xpath_list = [\n            f'//label[text()=\"自定义日期{i}\"]/following-sibling::div//input'\n            for i in range(1, 21)\n        ]\n        time_list = [\n            '//label[text()=\"订货时间\"]/following-sibling::div//input',\n            '//label[text()=\"最早开始时间\"]/following-sibling::div//input',\n            '//label[text()=\"交货期\"]/following-sibling::div//input',\n            '//label[text()=\"实绩结束时间\"]/following-sibling::div//input',\n        ]\n        time_list.extend(time_xpath_list)\n        adds.batch_order_time_input(time_list)\n    \n        box_input_list = [xpath.replace(\"//i\", \"//input\") for xpath in box_list]\n        select_input_list = [item[\"select\"].replace(\"//i\", \"//input\") for item in select_list]\n    \n        checked = order.get_find_element_xpath('//label[text()=\"非分派对象标志\"]/following-sibling::div//label/span')\n        if checked.get_attribute(\"class\") == \"ivu-checkbox\":\n            checked.click()\n        before_checked = order.get_find_element_xpath(\n            '//label[text()=\"非分派对象标志\"]/following-sibling::div//label/span').get_attribute(\"class\")\n    \n        all_value = text_list + box_input_list + select_input_list + num_list + time_list\n        len_num = len(all_value)\n>       before_all_value = adds.batch_acquisition_input(all_value)\n\nTests\\test_items\\test_order.py:1199: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Pages.itemsPage.adds_page.AddsPages object at 0x00000271F3913430>\nxpath_list = ['//label[text()=\"订单代码\"]/following-sibling::div//input', '//label[text()=\"指定产线\"]/following-sibling::div//input', '//la...//label[text()=\"自定义字符1\"]/following-sibling::div//input', '//label[text()=\"自定义字符2\"]/following-sibling::div//input', ...]\ntext_value = ''\n\n    def batch_acquisition_input(self, xpath_list=[], text_value=\"\"):\n        \"\"\"批量获取输入框\"\"\"\n        values = []\n        for index, xpath in enumerate(xpath_list, 1):\n            try:\n                value = self.get_find_element_xpath(xpath).get_attribute(\"value\")\n                values.append(value)\n    \n            except TimeoutException:\n>               raise NoSuchElementException(\n                    f\"元素未找到（XPath列表第{index}个）: {xpath}\"\n                )\nE               selenium.common.exceptions.NoSuchElementException: Message: 元素未找到（XPath列表第2个）: //label[text()=\"指定产线\"]/following-sibling::div//input; For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception\n\nPages\\itemsPage\\adds_page.py:95: NoSuchElementException","steps":[],"attachments":[{"uid":"b956b8dad593a8de","name":"test_order_addall_failure","source":"b956b8dad593a8de.png","type":"image/png","size":149545},{"uid":"bb3dca902b7246f6","name":"test_order_addall_source","source":"bb3dca902b7246f6.html","type":"text/html","size":1663396},{"uid":"b2d63c85202eda0b","name":"log","source":"b2d63c85202eda0b.txt","type":"text/plain","size":20099}],"parameters":[],"hasContent":true,"attachmentStep":false,"stepsCount":0,"shouldDisplayMessage":true,"attachmentsCount":3},"afterStages":[{"name":"login_to_order::0","time":{"start":1758721466477,"stop":1758721468689,"duration":2212},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentStep":false,"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0}],"labels":[{"name":"story","value":"输入全部数据，添加保存成功"},{"name":"feature","value":"制造订单表测试用例"},{"name":"parentSuite","value":"Tests.test_items"},{"name":"suite","value":"test_order"},{"name":"subSuite","value":"TestOrderPage"},{"name":"host","value":"WIN-20240820MJV"},{"name":"thread","value":"15904-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"Tests.test_items.test_order"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[]}],"tags":[]},"source":"90088cae50a03d27.json","parameterValues":[]}