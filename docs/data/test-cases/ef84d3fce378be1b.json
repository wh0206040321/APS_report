{"uid":"ef84d3fce378be1b","name":"test_expression_addrepeat2","fullName":"Tests.test_system.test_expression.TestSExpressionPage#test_expression_addrepeat2","historyId":"3d0430162b2c91557d28e9cbb0a7ebbd","time":{"start":1761076998734,"stop":1761077013359,"duration":14625},"status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n\tGetHandleVerifier [0x0x7ff719876f65+78965]\n\tGetHandleVerifier [0x0x7ff719876fc0+79056]\n\t(No symbol) [0x0x7ff719609dda]\n\t(No symbol) [0x0x7ff7196602ea]\n\t(No symbol) [0x0x7ff71966059c]\n\t(No symbol) [0x0x7ff7196b3f37]\n\t(No symbol) [0x0x7ff7196886af]\n\t(No symbol) [0x0x7ff7196b0dbe]\n\t(No symbol) [0x0x7ff719688443]\n\t(No symbol) [0x0x7ff719651311]\n\t(No symbol) [0x0x7ff7196520a3]\n\tGetHandleVerifier [0x0x7ff719b2e26d+2926461]\n\tGetHandleVerifier [0x0x7ff719b28993+2903715]\n\tGetHandleVerifier [0x0x7ff719b46aed+3026941]\n\tGetHandleVerifier [0x0x7ff7198916fe+187406]\n\tGetHandleVerifier [0x0x7ff7198996ef+220159]\n\tGetHandleVerifier [0x0x7ff71987faf4+114692]\n\tGetHandleVerifier [0x0x7ff71987fca9+115129]\n\tGetHandleVerifier [0x0x7ff7198664d8+10728]\n\tBaseThreadInitThunk [0x0x7ffee1537374+20]\n\tRtlUserThreadStart [0x0x7ffee1a7cc91+33]","statusTrace":"self = <test_system.test_expression.TestSExpressionPage object at 0x00000173A6826BF0>, login_to_expression = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"90acf256a6866ef8c589f91bc782096a\")>\n\n    @allure.story(\"修改表达式管理重复不允许添加\")\n    # @pytest.mark.run(order=1)\n    def test_expression_addrepeat2(self, login_to_expression):\n        driver = login_to_expression  # WebDriver 实例\n        expression = ExpressionPage(driver)  # 用 driver 初始化 ExpressionPage\n        sleep(1)\n        before_name = '1测试表达式管理2'\n        afert_name = '客户'\n        expression.select_input_expression(before_name)\n        expression.click_button('//table[@class=\"vxe-table--body\"]//tr[1]/td[2]')\n        expression.click_all_button(\"编辑\")\n        expression.enter_texts('//div[p[text()=\"名称: \"]]//input', afert_name)\n        expression.click_all_button(\"保存\")\n>       message = expression.get_error_message()\n\nTests\\test_system\\test_expression.py:198: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nPages\\systemPage\\expression_page.py:44: in get_error_message\n    message = WebDriverWait(self.driver, 10).until(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"90acf256a6866ef8c589f91bc782096a\")>, method = <function visibility_of_element_located.<locals>._predicate at 0x00000173A8991AB0>, message = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        -----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x7ff719876f65+78965]\nE       \tGetHandleVerifier [0x0x7ff719876fc0+79056]\nE       \t(No symbol) [0x0x7ff719609dda]\nE       \t(No symbol) [0x0x7ff7196602ea]\nE       \t(No symbol) [0x0x7ff71966059c]\nE       \t(No symbol) [0x0x7ff7196b3f37]\nE       \t(No symbol) [0x0x7ff7196886af]\nE       \t(No symbol) [0x0x7ff7196b0dbe]\nE       \t(No symbol) [0x0x7ff719688443]\nE       \t(No symbol) [0x0x7ff719651311]\nE       \t(No symbol) [0x0x7ff7196520a3]\nE       \tGetHandleVerifier [0x0x7ff719b2e26d+2926461]\nE       \tGetHandleVerifier [0x0x7ff719b28993+2903715]\nE       \tGetHandleVerifier [0x0x7ff719b46aed+3026941]\nE       \tGetHandleVerifier [0x0x7ff7198916fe+187406]\nE       \tGetHandleVerifier [0x0x7ff7198996ef+220159]\nE       \tGetHandleVerifier [0x0x7ff71987faf4+114692]\nE       \tGetHandleVerifier [0x0x7ff71987fca9+115129]\nE       \tGetHandleVerifier [0x0x7ff7198664d8+10728]\nE       \tBaseThreadInitThunk [0x0x7ffee1537374+20]\nE       \tRtlUserThreadStart [0x0x7ffee1a7cc91+33]\n\nmyenv\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:138: TimeoutException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"login_to_expression","time":{"start":1761076980881,"stop":1761076998732,"duration":17851},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n\tGetHandleVerifier [0x0x7ff719876f65+78965]\n\tGetHandleVerifier [0x0x7ff719876fc0+79056]\n\t(No symbol) [0x0x7ff719609dda]\n\t(No symbol) [0x0x7ff7196602ea]\n\t(No symbol) [0x0x7ff71966059c]\n\t(No symbol) [0x0x7ff7196b3f37]\n\t(No symbol) [0x0x7ff7196886af]\n\t(No symbol) [0x0x7ff7196b0dbe]\n\t(No symbol) [0x0x7ff719688443]\n\t(No symbol) [0x0x7ff719651311]\n\t(No symbol) [0x0x7ff7196520a3]\n\tGetHandleVerifier [0x0x7ff719b2e26d+2926461]\n\tGetHandleVerifier [0x0x7ff719b28993+2903715]\n\tGetHandleVerifier [0x0x7ff719b46aed+3026941]\n\tGetHandleVerifier [0x0x7ff7198916fe+187406]\n\tGetHandleVerifier [0x0x7ff7198996ef+220159]\n\tGetHandleVerifier [0x0x7ff71987faf4+114692]\n\tGetHandleVerifier [0x0x7ff71987fca9+115129]\n\tGetHandleVerifier [0x0x7ff7198664d8+10728]\n\tBaseThreadInitThunk [0x0x7ffee1537374+20]\n\tRtlUserThreadStart [0x0x7ffee1a7cc91+33]","statusTrace":"self = <test_system.test_expression.TestSExpressionPage object at 0x00000173A6826BF0>, login_to_expression = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"90acf256a6866ef8c589f91bc782096a\")>\n\n    @allure.story(\"修改表达式管理重复不允许添加\")\n    # @pytest.mark.run(order=1)\n    def test_expression_addrepeat2(self, login_to_expression):\n        driver = login_to_expression  # WebDriver 实例\n        expression = ExpressionPage(driver)  # 用 driver 初始化 ExpressionPage\n        sleep(1)\n        before_name = '1测试表达式管理2'\n        afert_name = '客户'\n        expression.select_input_expression(before_name)\n        expression.click_button('//table[@class=\"vxe-table--body\"]//tr[1]/td[2]')\n        expression.click_all_button(\"编辑\")\n        expression.enter_texts('//div[p[text()=\"名称: \"]]//input', afert_name)\n        expression.click_all_button(\"保存\")\n>       message = expression.get_error_message()\n\nTests\\test_system\\test_expression.py:198: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nPages\\systemPage\\expression_page.py:44: in get_error_message\n    message = WebDriverWait(self.driver, 10).until(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"90acf256a6866ef8c589f91bc782096a\")>, method = <function visibility_of_element_located.<locals>._predicate at 0x00000173A8991AB0>, message = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        -----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x7ff719876f65+78965]\nE       \tGetHandleVerifier [0x0x7ff719876fc0+79056]\nE       \t(No symbol) [0x0x7ff719609dda]\nE       \t(No symbol) [0x0x7ff7196602ea]\nE       \t(No symbol) [0x0x7ff71966059c]\nE       \t(No symbol) [0x0x7ff7196b3f37]\nE       \t(No symbol) [0x0x7ff7196886af]\nE       \t(No symbol) [0x0x7ff7196b0dbe]\nE       \t(No symbol) [0x0x7ff719688443]\nE       \t(No symbol) [0x0x7ff719651311]\nE       \t(No symbol) [0x0x7ff7196520a3]\nE       \tGetHandleVerifier [0x0x7ff719b2e26d+2926461]\nE       \tGetHandleVerifier [0x0x7ff719b28993+2903715]\nE       \tGetHandleVerifier [0x0x7ff719b46aed+3026941]\nE       \tGetHandleVerifier [0x0x7ff7198916fe+187406]\nE       \tGetHandleVerifier [0x0x7ff7198996ef+220159]\nE       \tGetHandleVerifier [0x0x7ff71987faf4+114692]\nE       \tGetHandleVerifier [0x0x7ff71987fca9+115129]\nE       \tGetHandleVerifier [0x0x7ff7198664d8+10728]\nE       \tBaseThreadInitThunk [0x0x7ffee1537374+20]\nE       \tRtlUserThreadStart [0x0x7ffee1a7cc91+33]\n\nmyenv\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:138: TimeoutException","steps":[],"attachments":[{"uid":"1b990ab47960e317","name":"test_expression_addrepeat2_failure","source":"1b990ab47960e317.png","type":"image/png","size":75083},{"uid":"3e59628bb1fa6c93","name":"test_expression_addrepeat2_source","source":"3e59628bb1fa6c93.html","type":"text/html","size":1091234},{"uid":"ef7e86a9e9be9371","name":"log","source":"ef7e86a9e9be9371.txt","type":"text/plain","size":1380}],"parameters":[],"attachmentsCount":3,"shouldDisplayMessage":true,"stepsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"login_to_expression::0","time":{"start":1761077013848,"stop":1761077016262,"duration":2414},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"story","value":"修改表达式管理重复不允许添加"},{"name":"feature","value":"表达式管理页用例"},{"name":"parentSuite","value":"Tests.test_system"},{"name":"suite","value":"test_expression"},{"name":"subSuite","value":"TestSExpressionPage"},{"name":"host","value":"WIN-20240820MJV"},{"name":"thread","value":"14388-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"Tests.test_system.test_expression"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":[]},"source":"ef84d3fce378be1b.json","parameterValues":[]}