{"uid":"4e1fab74497c059b","name":"test_personal_characters_nodisplay","fullName":"Tests.test_item.test_personal.TestPersonalPage#test_personal_characters_nodisplay","historyId":"57bd7a4f640526d9adc04403985635a0","time":{"start":1752765734150,"stop":1752765736675,"duration":2525},"status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span class=\"ivu-radio ivu-radio-checked\">...</span> is not clickable at point (1209, 516). Other element would receive the click: <label data-v-f5944a48=\"\" class=\"ivu-radio-wrapper ivu-radio-group-item ivu-radio-wrapper-checked ivu-radio-default\">...</label>\n  (Session info: chrome=137.0.7151.69)\nStacktrace:\n\tGetHandleVerifier [0x0x7ff7445e6f65+78965]\n\tGetHandleVerifier [0x0x7ff7445e6fc0+79056]\n\t(No symbol) [0x0x7ff744379dda]\n\t(No symbol) [0x0x7ff7443d82e9]\n\t(No symbol) [0x0x7ff7443d5c82]\n\t(No symbol) [0x0x7ff7443d2cd1]\n\t(No symbol) [0x0x7ff7443d1c44]\n\t(No symbol) [0x0x7ff7443c3635]\n\t(No symbol) [0x0x7ff7443f866a]\n\t(No symbol) [0x0x7ff7443c2b56]\n\t(No symbol) [0x0x7ff7443f8880]\n\t(No symbol) [0x0x7ff744420dbe]\n\t(No symbol) [0x0x7ff7443f8443]\n\t(No symbol) [0x0x7ff7443c1311]\n\t(No symbol) [0x0x7ff7443c20a3]\n\tGetHandleVerifier [0x0x7ff74489e26d+2926461]\n\tGetHandleVerifier [0x0x7ff744898993+2903715]\n\tGetHandleVerifier [0x0x7ff7448b6aed+3026941]\n\tGetHandleVerifier [0x0x7ff7446016fe+187406]\n\tGetHandleVerifier [0x0x7ff7446096ef+220159]\n\tGetHandleVerifier [0x0x7ff7445efaf4+114692]\n\tGetHandleVerifier [0x0x7ff7445efca9+115129]\n\tGetHandleVerifier [0x0x7ff7445d64d8+10728]\n\tBaseThreadInitThunk [0x0x7ffa099e7374+20]\n\tRtlUserThreadStart [0x0x7ffa0b89cc91+33]","statusTrace":"self = <test_item.test_personal.TestPersonalPage object at 0x000001FF3785B8B0>\nlogin_to_personal = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"86c3c5a6e70fcdbc7145d3c3280d857b\")>\n\n    @allure.story(\"组件菜单文字-不显示(默认)\")\n    # @pytest.mark.run(order=1)\n    def test_personal_characters_nodisplay(self, login_to_personal):\n        driver = login_to_personal  # WebDriver 实例\n        personal = PersonalPage(driver)  # 用 driver 初始化 PersonalPage\n        name = \"不显示(默认)\"\n>       style = personal.go_characters_display(name)\n\nTests\\test_item\\test_personal.py:604: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nPages\\personal_page.py:196: in go_characters_display\n    display.click()\nmyenv\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:121: in click\n    self._execute(Command.CLICK_ELEMENT)\nmyenv\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:574: in _execute\n    return self._parent.execute(command, params)\nmyenv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:447: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001FF37E8EAA0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...ff7445d64d8+10728]\\\\n\\\\tBaseThreadInitThunk [0x0x7ffa099e7374+20]\\\\n\\\\tRtlUserThreadStart [0x0x7ffa0b89cc91+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span class=\"ivu-radio ivu-radio-checked\">...</span> is not clickable at point (1209, 516). Other element would receive the click: <label data-v-f5944a48=\"\" class=\"ivu-radio-wrapper ivu-radio-group-item ivu-radio-wrapper-checked ivu-radio-default\">...</label>\nE         (Session info: chrome=137.0.7151.69)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x7ff7445e6f65+78965]\nE       \tGetHandleVerifier [0x0x7ff7445e6fc0+79056]\nE       \t(No symbol) [0x0x7ff744379dda]\nE       \t(No symbol) [0x0x7ff7443d82e9]\nE       \t(No symbol) [0x0x7ff7443d5c82]\nE       \t(No symbol) [0x0x7ff7443d2cd1]\nE       \t(No symbol) [0x0x7ff7443d1c44]\nE       \t(No symbol) [0x0x7ff7443c3635]\nE       \t(No symbol) [0x0x7ff7443f866a]\nE       \t(No symbol) [0x0x7ff7443c2b56]\nE       \t(No symbol) [0x0x7ff7443f8880]\nE       \t(No symbol) [0x0x7ff744420dbe]\nE       \t(No symbol) [0x0x7ff7443f8443]\nE       \t(No symbol) [0x0x7ff7443c1311]\nE       \t(No symbol) [0x0x7ff7443c20a3]\nE       \tGetHandleVerifier [0x0x7ff74489e26d+2926461]\nE       \tGetHandleVerifier [0x0x7ff744898993+2903715]\nE       \tGetHandleVerifier [0x0x7ff7448b6aed+3026941]\nE       \tGetHandleVerifier [0x0x7ff7446016fe+187406]\nE       \tGetHandleVerifier [0x0x7ff7446096ef+220159]\nE       \tGetHandleVerifier [0x0x7ff7445efaf4+114692]\nE       \tGetHandleVerifier [0x0x7ff7445efca9+115129]\nE       \tGetHandleVerifier [0x0x7ff7445d64d8+10728]\nE       \tBaseThreadInitThunk [0x0x7ffa099e7374+20]\nE       \tRtlUserThreadStart [0x0x7ffa0b89cc91+33]\n\nmyenv\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: ElementClickInterceptedException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":1,"retriesStatusChange":true,"beforeStages":[{"name":"login_to_personal","time":{"start":1752765728145,"stop":1752765734150,"duration":6005},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span class=\"ivu-radio ivu-radio-checked\">...</span> is not clickable at point (1209, 516). Other element would receive the click: <label data-v-f5944a48=\"\" class=\"ivu-radio-wrapper ivu-radio-group-item ivu-radio-wrapper-checked ivu-radio-default\">...</label>\n  (Session info: chrome=137.0.7151.69)\nStacktrace:\n\tGetHandleVerifier [0x0x7ff7445e6f65+78965]\n\tGetHandleVerifier [0x0x7ff7445e6fc0+79056]\n\t(No symbol) [0x0x7ff744379dda]\n\t(No symbol) [0x0x7ff7443d82e9]\n\t(No symbol) [0x0x7ff7443d5c82]\n\t(No symbol) [0x0x7ff7443d2cd1]\n\t(No symbol) [0x0x7ff7443d1c44]\n\t(No symbol) [0x0x7ff7443c3635]\n\t(No symbol) [0x0x7ff7443f866a]\n\t(No symbol) [0x0x7ff7443c2b56]\n\t(No symbol) [0x0x7ff7443f8880]\n\t(No symbol) [0x0x7ff744420dbe]\n\t(No symbol) [0x0x7ff7443f8443]\n\t(No symbol) [0x0x7ff7443c1311]\n\t(No symbol) [0x0x7ff7443c20a3]\n\tGetHandleVerifier [0x0x7ff74489e26d+2926461]\n\tGetHandleVerifier [0x0x7ff744898993+2903715]\n\tGetHandleVerifier [0x0x7ff7448b6aed+3026941]\n\tGetHandleVerifier [0x0x7ff7446016fe+187406]\n\tGetHandleVerifier [0x0x7ff7446096ef+220159]\n\tGetHandleVerifier [0x0x7ff7445efaf4+114692]\n\tGetHandleVerifier [0x0x7ff7445efca9+115129]\n\tGetHandleVerifier [0x0x7ff7445d64d8+10728]\n\tBaseThreadInitThunk [0x0x7ffa099e7374+20]\n\tRtlUserThreadStart [0x0x7ffa0b89cc91+33]","statusTrace":"self = <test_item.test_personal.TestPersonalPage object at 0x000001FF3785B8B0>\nlogin_to_personal = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"86c3c5a6e70fcdbc7145d3c3280d857b\")>\n\n    @allure.story(\"组件菜单文字-不显示(默认)\")\n    # @pytest.mark.run(order=1)\n    def test_personal_characters_nodisplay(self, login_to_personal):\n        driver = login_to_personal  # WebDriver 实例\n        personal = PersonalPage(driver)  # 用 driver 初始化 PersonalPage\n        name = \"不显示(默认)\"\n>       style = personal.go_characters_display(name)\n\nTests\\test_item\\test_personal.py:604: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nPages\\personal_page.py:196: in go_characters_display\n    display.click()\nmyenv\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:121: in click\n    self._execute(Command.CLICK_ELEMENT)\nmyenv\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:574: in _execute\n    return self._parent.execute(command, params)\nmyenv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:447: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001FF37E8EAA0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...ff7445d64d8+10728]\\\\n\\\\tBaseThreadInitThunk [0x0x7ffa099e7374+20]\\\\n\\\\tRtlUserThreadStart [0x0x7ffa0b89cc91+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span class=\"ivu-radio ivu-radio-checked\">...</span> is not clickable at point (1209, 516). Other element would receive the click: <label data-v-f5944a48=\"\" class=\"ivu-radio-wrapper ivu-radio-group-item ivu-radio-wrapper-checked ivu-radio-default\">...</label>\nE         (Session info: chrome=137.0.7151.69)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x7ff7445e6f65+78965]\nE       \tGetHandleVerifier [0x0x7ff7445e6fc0+79056]\nE       \t(No symbol) [0x0x7ff744379dda]\nE       \t(No symbol) [0x0x7ff7443d82e9]\nE       \t(No symbol) [0x0x7ff7443d5c82]\nE       \t(No symbol) [0x0x7ff7443d2cd1]\nE       \t(No symbol) [0x0x7ff7443d1c44]\nE       \t(No symbol) [0x0x7ff7443c3635]\nE       \t(No symbol) [0x0x7ff7443f866a]\nE       \t(No symbol) [0x0x7ff7443c2b56]\nE       \t(No symbol) [0x0x7ff7443f8880]\nE       \t(No symbol) [0x0x7ff744420dbe]\nE       \t(No symbol) [0x0x7ff7443f8443]\nE       \t(No symbol) [0x0x7ff7443c1311]\nE       \t(No symbol) [0x0x7ff7443c20a3]\nE       \tGetHandleVerifier [0x0x7ff74489e26d+2926461]\nE       \tGetHandleVerifier [0x0x7ff744898993+2903715]\nE       \tGetHandleVerifier [0x0x7ff7448b6aed+3026941]\nE       \tGetHandleVerifier [0x0x7ff7446016fe+187406]\nE       \tGetHandleVerifier [0x0x7ff7446096ef+220159]\nE       \tGetHandleVerifier [0x0x7ff7445efaf4+114692]\nE       \tGetHandleVerifier [0x0x7ff7445efca9+115129]\nE       \tGetHandleVerifier [0x0x7ff7445d64d8+10728]\nE       \tBaseThreadInitThunk [0x0x7ffa099e7374+20]\nE       \tRtlUserThreadStart [0x0x7ffa0b89cc91+33]\n\nmyenv\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: ElementClickInterceptedException","steps":[],"attachments":[{"uid":"df27bf1c5dbe9d65","name":"test_personal_characters_nodisplay_failure","source":"df27bf1c5dbe9d65.png","type":"image/png","size":104395},{"uid":"65ebd5a0ef3074e3","name":"test_personal_characters_nodisplay_source","source":"65ebd5a0ef3074e3.html","type":"text/html","size":1542588},{"uid":"168aa1751347f95a","name":"log","source":"168aa1751347f95a.txt","type":"text/plain","size":2037}],"parameters":[],"shouldDisplayMessage":true,"attachmentsCount":3,"stepsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"login_to_personal::0","time":{"start":1752765736888,"stop":1752765739007,"duration":2119},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"feature","value":"个人设置测试用例"},{"name":"story","value":"组件菜单文字-不显示(默认)"},{"name":"parentSuite","value":"Tests.test_item"},{"name":"suite","value":"test_personal"},{"name":"subSuite","value":"TestPersonalPage"},{"name":"host","value":"WIN-20240820MJV"},{"name":"thread","value":"11236-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"Tests.test_item.test_personal"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"81803b7c1e5fb51c","status":"failed","statusDetails":"AssertionError: assert '' == 'display: none;'\n  \n  \u001B[0m\u001B[91m- display: none;\u001B[39;49;00m\u001B[90m\u001B[39;49;00m","time":{"start":1752765723738,"stop":1752765725746,"duration":2008}}],"categories":[{"name":"Test defects","matchedStatuses":[]}],"tags":[]},"source":"4e1fab74497c059b.json","parameterValues":[]}