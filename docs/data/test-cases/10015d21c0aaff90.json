{"uid":"10015d21c0aaff90","name":"test_changeI_addfail","fullName":"Tests.test_item.test_changeI.TestChangeIPage#test_changeI_addfail","historyId":"c4122003e1bbb1af94feab439e0f1782","time":{"start":1752802557189,"stop":1752802563457,"duration":6268},"status":"failed","statusMessage":"AssertionError: 预期边框颜色为rgb(237, 64, 20), 但得到rgb(220, 222, 226)\nassert 'rgb(220, 222, 226)' == 'rgb(237, 64, 20)'\n  \n  \u001B[0m\u001B[91m- rgb(237, 64, 20)\u001B[39;49;00m\u001B[90m\u001B[39;49;00m\n  \u001B[92m+ rgb(220, 222, 226)\u001B[39;49;00m\u001B[90m\u001B[39;49;00m","statusTrace":"self = <test_item.test_changeI.TestChangeIPage object at 0x000002B74D4005E0>\nlogin_to_changeI = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"2d5b48500dcc2339ebb7f6fc4cd39f0a\")>\n\n    @allure.story(\"添加物品切换信息 不填写数据点击确认 不允许提交\")\n    # @pytest.mark.run(order=1)\n    def test_changeI_addfail(self, login_to_changeI):\n        driver = login_to_changeI  # WebDriver 实例\n        changeI = ChangeI(driver)  # 用 driver 初始化 ChangeI\n        layout = \"测试布局A\"\n        changeI.add_layout()\n        sleep(1)\n        changeI.enter_texts(\n            '//div[text()=\"当前布局:\"]/following-sibling::div//input', f\"{layout}\"\n        )\n        checkbox1 = changeI.get_find_element_xpath(\n            '//div[text()=\"是否默认启动:\"]/following-sibling::label/span'\n        )\n    \n        # 检查复选框是否未被选中\n        if checkbox1.get_attribute(\"class\") == \"ivu-checkbox\":\n            # 如果未选中，则点击复选框进行选中\n            changeI.click_button(\n                '//div[text()=\"是否默认启动:\"]/following-sibling::label/span'\n            )\n        sleep(1)\n    \n        changeI.click_button('(//div[text()=\" 显示设置 \"])[1]')\n        # 获取是否可见选项的复选框元素\n        checkbox2 = changeI.get_find_element_xpath(\n            '(//div[./div[text()=\"是否可见:\"]])[1]/label/span'\n        )\n        # 检查复选框是否未被选中\n        if checkbox2.get_attribute(\"class\") == \"ivu-checkbox\":\n            # 如果未选中，则点击复选框进行选中\n            changeI.click_button('(//div[./div[text()=\"是否可见:\"]])[1]/label/span')\n            # 点击确定按钮保存设置\n            changeI.click_button('(//div[@class=\"demo-drawer-footer\"])[3]/button[2]')\n        else:\n            # 如果已选中，直接点击确定按钮保存设置\n            changeI.click_button('(//div[@class=\"demo-drawer-footer\"])[3]/button[2]')\n        # 获取布局名称的文本元素\n        name = changeI.get_find_element_xpath(\n            f'//div[@class=\"tabsDivItemCon\"]/div[text()=\" {layout} \"]'\n        ).text\n    \n        changeI.click_add_button()\n        changeI.click_button(\n            '(//div[@class=\"h-40px flex-justify-end flex-align-items-end b-t-s-d9e3f3\"])[1]/button[1]'\n        )\n        # 资源\n        inputresource_box = changeI.get_find_element_xpath(\n            '(//label[text()=\"资源\"])[1]/parent::div//input'\n        )\n        # 前品目\n        inputitem_box1 = changeI.get_find_element_xpath(\n            '(//label[text()=\"前品目\"])[1]/parent::div//input'\n        )\n        # 后品目\n        inputitem_box2 = changeI.get_find_element_xpath(\n            '(//label[text()=\"后品目\"])[1]/parent::div//input'\n        )\n    \n        # 断言边框颜色是否为红色（可以根据实际RGB值调整）\n        sleep(1)\n        borderresource_color = inputresource_box.value_of_css_property(\"border-color\")\n        borderitem_color1 = inputitem_box1.value_of_css_property(\"border-color\")\n        borderitem_color2 = inputitem_box2.value_of_css_property(\"border-color\")\n        expected_color = \"rgb(237, 64, 20)\"  # 红色的 rgb 值\n>       assert (\n            borderresource_color == expected_color\n        ), f\"预期边框颜色为{expected_color}, 但得到{borderresource_color}\"\nE       AssertionError: 预期边框颜色为rgb(237, 64, 20), 但得到rgb(220, 222, 226)\nE       assert 'rgb(220, 222, 226)' == 'rgb(237, 64, 20)'\nE         \nE         \u001B[0m\u001B[91m- rgb(237, 64, 20)\u001B[39;49;00m\u001B[90m\u001B[39;49;00m\nE         \u001B[92m+ rgb(220, 222, 226)\u001B[39;49;00m\u001B[90m\u001B[39;49;00m\n\nTests\\test_item\\test_changeI.py:106: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"login_to_changeI","time":{"start":1752802547441,"stop":1752802557188,"duration":9747},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"stepsCount":0}],"testStage":{"status":"failed","statusMessage":"AssertionError: 预期边框颜色为rgb(237, 64, 20), 但得到rgb(220, 222, 226)\nassert 'rgb(220, 222, 226)' == 'rgb(237, 64, 20)'\n  \n  \u001B[0m\u001B[91m- rgb(237, 64, 20)\u001B[39;49;00m\u001B[90m\u001B[39;49;00m\n  \u001B[92m+ rgb(220, 222, 226)\u001B[39;49;00m\u001B[90m\u001B[39;49;00m","statusTrace":"self = <test_item.test_changeI.TestChangeIPage object at 0x000002B74D4005E0>\nlogin_to_changeI = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"2d5b48500dcc2339ebb7f6fc4cd39f0a\")>\n\n    @allure.story(\"添加物品切换信息 不填写数据点击确认 不允许提交\")\n    # @pytest.mark.run(order=1)\n    def test_changeI_addfail(self, login_to_changeI):\n        driver = login_to_changeI  # WebDriver 实例\n        changeI = ChangeI(driver)  # 用 driver 初始化 ChangeI\n        layout = \"测试布局A\"\n        changeI.add_layout()\n        sleep(1)\n        changeI.enter_texts(\n            '//div[text()=\"当前布局:\"]/following-sibling::div//input', f\"{layout}\"\n        )\n        checkbox1 = changeI.get_find_element_xpath(\n            '//div[text()=\"是否默认启动:\"]/following-sibling::label/span'\n        )\n    \n        # 检查复选框是否未被选中\n        if checkbox1.get_attribute(\"class\") == \"ivu-checkbox\":\n            # 如果未选中，则点击复选框进行选中\n            changeI.click_button(\n                '//div[text()=\"是否默认启动:\"]/following-sibling::label/span'\n            )\n        sleep(1)\n    \n        changeI.click_button('(//div[text()=\" 显示设置 \"])[1]')\n        # 获取是否可见选项的复选框元素\n        checkbox2 = changeI.get_find_element_xpath(\n            '(//div[./div[text()=\"是否可见:\"]])[1]/label/span'\n        )\n        # 检查复选框是否未被选中\n        if checkbox2.get_attribute(\"class\") == \"ivu-checkbox\":\n            # 如果未选中，则点击复选框进行选中\n            changeI.click_button('(//div[./div[text()=\"是否可见:\"]])[1]/label/span')\n            # 点击确定按钮保存设置\n            changeI.click_button('(//div[@class=\"demo-drawer-footer\"])[3]/button[2]')\n        else:\n            # 如果已选中，直接点击确定按钮保存设置\n            changeI.click_button('(//div[@class=\"demo-drawer-footer\"])[3]/button[2]')\n        # 获取布局名称的文本元素\n        name = changeI.get_find_element_xpath(\n            f'//div[@class=\"tabsDivItemCon\"]/div[text()=\" {layout} \"]'\n        ).text\n    \n        changeI.click_add_button()\n        changeI.click_button(\n            '(//div[@class=\"h-40px flex-justify-end flex-align-items-end b-t-s-d9e3f3\"])[1]/button[1]'\n        )\n        # 资源\n        inputresource_box = changeI.get_find_element_xpath(\n            '(//label[text()=\"资源\"])[1]/parent::div//input'\n        )\n        # 前品目\n        inputitem_box1 = changeI.get_find_element_xpath(\n            '(//label[text()=\"前品目\"])[1]/parent::div//input'\n        )\n        # 后品目\n        inputitem_box2 = changeI.get_find_element_xpath(\n            '(//label[text()=\"后品目\"])[1]/parent::div//input'\n        )\n    \n        # 断言边框颜色是否为红色（可以根据实际RGB值调整）\n        sleep(1)\n        borderresource_color = inputresource_box.value_of_css_property(\"border-color\")\n        borderitem_color1 = inputitem_box1.value_of_css_property(\"border-color\")\n        borderitem_color2 = inputitem_box2.value_of_css_property(\"border-color\")\n        expected_color = \"rgb(237, 64, 20)\"  # 红色的 rgb 值\n>       assert (\n            borderresource_color == expected_color\n        ), f\"预期边框颜色为{expected_color}, 但得到{borderresource_color}\"\nE       AssertionError: 预期边框颜色为rgb(237, 64, 20), 但得到rgb(220, 222, 226)\nE       assert 'rgb(220, 222, 226)' == 'rgb(237, 64, 20)'\nE         \nE         \u001B[0m\u001B[91m- rgb(237, 64, 20)\u001B[39;49;00m\u001B[90m\u001B[39;49;00m\nE         \u001B[92m+ rgb(220, 222, 226)\u001B[39;49;00m\u001B[90m\u001B[39;49;00m\n\nTests\\test_item\\test_changeI.py:106: AssertionError","steps":[],"attachments":[{"uid":"bf1bdb7b8f163570","name":"test_changeI_addfail_failure","source":"bf1bdb7b8f163570.png","type":"image/png","size":98960},{"uid":"86bf8f8245dc375c","name":"test_changeI_addfail_source","source":"86bf8f8245dc375c.html","type":"text/html","size":1296053},{"uid":"b52af107b4dbdc36","name":"log","source":"b52af107b4dbdc36.txt","type":"text/plain","size":2457}],"parameters":[],"shouldDisplayMessage":true,"attachmentsCount":3,"hasContent":true,"attachmentStep":false,"stepsCount":0},"afterStages":[{"name":"login_to_changeI::0","time":{"start":1752802563717,"stop":1752802565847,"duration":2130},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"stepsCount":0}],"labels":[{"name":"story","value":"添加物品切换信息 不填写数据点击确认 不允许提交"},{"name":"feature","value":"物品切换表测试用例"},{"name":"parentSuite","value":"Tests.test_item"},{"name":"suite","value":"test_changeI"},{"name":"subSuite","value":"TestChangeIPage"},{"name":"host","value":"WIN-20240820MJV"},{"name":"thread","value":"23472-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"Tests.test_item.test_changeI"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":[]},"source":"10015d21c0aaff90.json","parameterValues":[]}