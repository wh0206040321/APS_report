{"uid":"8f4df38f98a17dbe","name":"test_changespec_addweeksuccess","fullName":"Tests.test_item.test_changespec.TestChangeSpecPage#test_changespec_addweeksuccess","historyId":"30036bc0ce19733043aaade1712effbb","time":{"start":1752804491257,"stop":1752804515448,"duration":24191},"status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n\tGetHandleVerifier [0x0x7ff7793d6f65+78965]\n\tGetHandleVerifier [0x0x7ff7793d6fc0+79056]\n\t(No symbol) [0x0x7ff779169dda]\n\t(No symbol) [0x0x7ff7791c02ea]\n\t(No symbol) [0x0x7ff7791c059c]\n\t(No symbol) [0x0x7ff779213f37]\n\t(No symbol) [0x0x7ff7791e86af]\n\t(No symbol) [0x0x7ff779210dbe]\n\t(No symbol) [0x0x7ff7791e8443]\n\t(No symbol) [0x0x7ff7791b1311]\n\t(No symbol) [0x0x7ff7791b20a3]\n\tGetHandleVerifier [0x0x7ff77968e26d+2926461]\n\tGetHandleVerifier [0x0x7ff779688993+2903715]\n\tGetHandleVerifier [0x0x7ff7796a6aed+3026941]\n\tGetHandleVerifier [0x0x7ff7793f16fe+187406]\n\tGetHandleVerifier [0x0x7ff7793f96ef+220159]\n\tGetHandleVerifier [0x0x7ff7793dfaf4+114692]\n\tGetHandleVerifier [0x0x7ff7793dfca9+115129]\n\tGetHandleVerifier [0x0x7ff7793c64d8+10728]\n\tBaseThreadInitThunk [0x0x7ffa099e7374+20]\n\tRtlUserThreadStart [0x0x7ffa0b89cc91+33]","statusTrace":"self = <test_item.test_changespec.TestChangeSpecPage object at 0x00000175CB21C7F0>\nlogin_to_changespec = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"d7d00057ff760dd17f4bf7b0b4ac8006\")>\n\n    @allure.story(\"添加数据成功\")\n    # @pytest.mark.run(order=1)\n    def test_changespec_addweeksuccess(self, login_to_changespec):\n        driver = login_to_changespec  # WebDriver 实例\n        change = ChangeR(driver)  # 用 driver 初始化 ChangeR\n        code1 = \"11\"\n        code2 = \"22\"\n        change.click_add_button()\n        # 点击资源\n        change.click_button(\n            '(//i[@class=\"ivu-icon ivu-icon-md-albums ivu-input-icon ivu-input-icon-normal\"])[1]'\n        )\n        # 勾选框\n        rows = driver.find_elements(By.XPATH, f\"//table[.//tr[td[3]//span[text()='{code1}']]]//tr\")\n        for index, row in enumerate(rows, start=1):\n            td3_text = row.find_elements(By.TAG_NAME, \"td\")[2].text.strip()\n            if f\"{code1}\" in td3_text:\n                print(f\"✅ 找到匹配行，行号为：{index}\")\n    \n                # 3. 使用这个行号 idx 构造另一个 XPath\n                target_xpath = f'(//table[.//tr[{index}]/td[2][contains(@class,\"col--checkbox\")]])[2]//tr[{index}]/td[2]/div/span'\n                target_element = change.get_find_element_xpath(target_xpath)\n    \n                # 4. 操作目标元素\n                target_element.click()\n                break  # 如果只处理第一个匹配行，可以 break\n        change.click_button(\n            '(//div[@class=\"h-40px flex-justify-end flex-align-items-end b-t-s-d9e3f3\"])[2]/button[1]'\n        )\n    \n        # 点击前生产特征\n        change.click_button(\n            '(//i[@class=\"ivu-icon ivu-icon-md-albums ivu-input-icon ivu-input-icon-normal\"])[2]'\n        )\n    \n        # 勾选框\n        rows = driver.find_elements(By.XPATH, f'(//div[@class=\"vxe-table--body-wrapper body--wrapper\" and .//table[.//tr[td[3]//span[text()=\"{code2}\"]]]])[2]//table//tr')\n        for index, row in enumerate(rows, start=1):\n            td3_text = row.find_elements(By.TAG_NAME, \"td\")[2].text.strip()\n            if f\"{code2}\" in td3_text:\n                print(f\"✅ 找到匹配行，行号为：{index}\")\n    \n                # 3. 使用这个行号 idx 构造另一个 XPath\n                target_xpath = f'(//table[.//tr[{index}]/td[2][contains(@class,\"col--checkbox\")]])[2]//tr[{index}]/td[.//span[@class=\"vxe-cell--checkbox\"]]//div/span'\n                # 点击前重新获取元素，防止 stale\n                try:\n                    target_element = change.get_find_element_xpath(target_xpath)\n                    target_element.click()\n                except StaleElementReferenceException:\n                    print(\"⚠️ 元素过期，重新获取一次\")\n                    target_element = change.get_find_element_xpath(target_xpath)\n                    target_element.click()\n    \n        change.click_button(\n            '(//div[@class=\"h-40px flex-justify-end flex-align-items-end b-t-s-d9e3f3\"])[2]/button[1]'\n        )\n    \n        # 点击后生产特征\n        change.click_button(\n            '(//i[@class=\"ivu-icon ivu-icon-md-albums ivu-input-icon ivu-input-icon-normal\"])[3]'\n        )\n        # 勾选框\n        change.click_button(f'(//table[.//tr[3]/td[2][contains(@class,\"col--checkbox\")]])[2]//tr[3]/td[.//span[@class=\"vxe-cell--checkbox\"]]//div/span')\n        change.click_button(\n            '(//div[@class=\"h-40px flex-justify-end flex-align-items-end b-t-s-d9e3f3\"])[2]/button[1]'\n        )\n    \n        # 获取勾选的资源\n        resource = change.get_find_element_xpath(\n            '(//label[text()=\"资源\"])[1]/parent::div//input'\n        ).get_attribute(\"value\")\n        # 获取前资源\n        item1 = change.get_find_element_xpath(\n            '(//label[text()=\"前生产特征\"])[1]/parent::div//input'\n        ).get_attribute(\"value\")\n        sleep(1)\n        # 获取后资源\n        item2 = change.get_find_element_xpath(\n            '(//label[text()=\"后生产特征\"])[1]/parent::div//input'\n        ).get_attribute(\"value\")\n        sleep(1)\n    \n        change.click_button(\n            '(//div[@class=\"h-40px flex-justify-end flex-align-items-end b-t-s-d9e3f3\"])[1]/button[1]'\n        )\n        sleep(1)\n        change.click_button(\n            '(//div[@class=\"h-23px w-20px text-align-c cursor-pointer\"])[8]'\n        )\n        sleep(1)\n        change.click_button(\n            '(//div[@class=\"h-23px w-20px text-align-c cursor-pointer\"])[8]'\n        )\n    \n>       addresource = change.get_find_element_xpath(\n            f'(//span[text()=\"{resource}\"])[1]/ancestor::tr[1]/td[2]'\n        ).text\n\nTests\\test_item\\test_changespec.py:457: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nPages\\changeR_page.py:42: in get_find_element_xpath\n    return self.find_element(By.XPATH, xpath)\nPages\\base_page.py:24: in find_element\n    return WebDriverWait(self.driver, wait_time).until(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"d7d00057ff760dd17f4bf7b0b4ac8006\")>\nmethod = <function presence_of_element_located.<locals>._predicate at 0x00000175CB258820>, message = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        -----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x7ff7793d6f65+78965]\nE       \tGetHandleVerifier [0x0x7ff7793d6fc0+79056]\nE       \t(No symbol) [0x0x7ff779169dda]\nE       \t(No symbol) [0x0x7ff7791c02ea]\nE       \t(No symbol) [0x0x7ff7791c059c]\nE       \t(No symbol) [0x0x7ff779213f37]\nE       \t(No symbol) [0x0x7ff7791e86af]\nE       \t(No symbol) [0x0x7ff779210dbe]\nE       \t(No symbol) [0x0x7ff7791e8443]\nE       \t(No symbol) [0x0x7ff7791b1311]\nE       \t(No symbol) [0x0x7ff7791b20a3]\nE       \tGetHandleVerifier [0x0x7ff77968e26d+2926461]\nE       \tGetHandleVerifier [0x0x7ff779688993+2903715]\nE       \tGetHandleVerifier [0x0x7ff7796a6aed+3026941]\nE       \tGetHandleVerifier [0x0x7ff7793f16fe+187406]\nE       \tGetHandleVerifier [0x0x7ff7793f96ef+220159]\nE       \tGetHandleVerifier [0x0x7ff7793dfaf4+114692]\nE       \tGetHandleVerifier [0x0x7ff7793dfca9+115129]\nE       \tGetHandleVerifier [0x0x7ff7793c64d8+10728]\nE       \tBaseThreadInitThunk [0x0x7ffa099e7374+20]\nE       \tRtlUserThreadStart [0x0x7ffa0b89cc91+33]\n\nmyenv\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:138: TimeoutException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"login_to_changespec","time":{"start":1752804483053,"stop":1752804491256,"duration":8203},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"stepsCount":0,"attachmentStep":false,"shouldDisplayMessage":false,"attachmentsCount":0}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n\tGetHandleVerifier [0x0x7ff7793d6f65+78965]\n\tGetHandleVerifier [0x0x7ff7793d6fc0+79056]\n\t(No symbol) [0x0x7ff779169dda]\n\t(No symbol) [0x0x7ff7791c02ea]\n\t(No symbol) [0x0x7ff7791c059c]\n\t(No symbol) [0x0x7ff779213f37]\n\t(No symbol) [0x0x7ff7791e86af]\n\t(No symbol) [0x0x7ff779210dbe]\n\t(No symbol) [0x0x7ff7791e8443]\n\t(No symbol) [0x0x7ff7791b1311]\n\t(No symbol) [0x0x7ff7791b20a3]\n\tGetHandleVerifier [0x0x7ff77968e26d+2926461]\n\tGetHandleVerifier [0x0x7ff779688993+2903715]\n\tGetHandleVerifier [0x0x7ff7796a6aed+3026941]\n\tGetHandleVerifier [0x0x7ff7793f16fe+187406]\n\tGetHandleVerifier [0x0x7ff7793f96ef+220159]\n\tGetHandleVerifier [0x0x7ff7793dfaf4+114692]\n\tGetHandleVerifier [0x0x7ff7793dfca9+115129]\n\tGetHandleVerifier [0x0x7ff7793c64d8+10728]\n\tBaseThreadInitThunk [0x0x7ffa099e7374+20]\n\tRtlUserThreadStart [0x0x7ffa0b89cc91+33]","statusTrace":"self = <test_item.test_changespec.TestChangeSpecPage object at 0x00000175CB21C7F0>\nlogin_to_changespec = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"d7d00057ff760dd17f4bf7b0b4ac8006\")>\n\n    @allure.story(\"添加数据成功\")\n    # @pytest.mark.run(order=1)\n    def test_changespec_addweeksuccess(self, login_to_changespec):\n        driver = login_to_changespec  # WebDriver 实例\n        change = ChangeR(driver)  # 用 driver 初始化 ChangeR\n        code1 = \"11\"\n        code2 = \"22\"\n        change.click_add_button()\n        # 点击资源\n        change.click_button(\n            '(//i[@class=\"ivu-icon ivu-icon-md-albums ivu-input-icon ivu-input-icon-normal\"])[1]'\n        )\n        # 勾选框\n        rows = driver.find_elements(By.XPATH, f\"//table[.//tr[td[3]//span[text()='{code1}']]]//tr\")\n        for index, row in enumerate(rows, start=1):\n            td3_text = row.find_elements(By.TAG_NAME, \"td\")[2].text.strip()\n            if f\"{code1}\" in td3_text:\n                print(f\"✅ 找到匹配行，行号为：{index}\")\n    \n                # 3. 使用这个行号 idx 构造另一个 XPath\n                target_xpath = f'(//table[.//tr[{index}]/td[2][contains(@class,\"col--checkbox\")]])[2]//tr[{index}]/td[2]/div/span'\n                target_element = change.get_find_element_xpath(target_xpath)\n    \n                # 4. 操作目标元素\n                target_element.click()\n                break  # 如果只处理第一个匹配行，可以 break\n        change.click_button(\n            '(//div[@class=\"h-40px flex-justify-end flex-align-items-end b-t-s-d9e3f3\"])[2]/button[1]'\n        )\n    \n        # 点击前生产特征\n        change.click_button(\n            '(//i[@class=\"ivu-icon ivu-icon-md-albums ivu-input-icon ivu-input-icon-normal\"])[2]'\n        )\n    \n        # 勾选框\n        rows = driver.find_elements(By.XPATH, f'(//div[@class=\"vxe-table--body-wrapper body--wrapper\" and .//table[.//tr[td[3]//span[text()=\"{code2}\"]]]])[2]//table//tr')\n        for index, row in enumerate(rows, start=1):\n            td3_text = row.find_elements(By.TAG_NAME, \"td\")[2].text.strip()\n            if f\"{code2}\" in td3_text:\n                print(f\"✅ 找到匹配行，行号为：{index}\")\n    \n                # 3. 使用这个行号 idx 构造另一个 XPath\n                target_xpath = f'(//table[.//tr[{index}]/td[2][contains(@class,\"col--checkbox\")]])[2]//tr[{index}]/td[.//span[@class=\"vxe-cell--checkbox\"]]//div/span'\n                # 点击前重新获取元素，防止 stale\n                try:\n                    target_element = change.get_find_element_xpath(target_xpath)\n                    target_element.click()\n                except StaleElementReferenceException:\n                    print(\"⚠️ 元素过期，重新获取一次\")\n                    target_element = change.get_find_element_xpath(target_xpath)\n                    target_element.click()\n    \n        change.click_button(\n            '(//div[@class=\"h-40px flex-justify-end flex-align-items-end b-t-s-d9e3f3\"])[2]/button[1]'\n        )\n    \n        # 点击后生产特征\n        change.click_button(\n            '(//i[@class=\"ivu-icon ivu-icon-md-albums ivu-input-icon ivu-input-icon-normal\"])[3]'\n        )\n        # 勾选框\n        change.click_button(f'(//table[.//tr[3]/td[2][contains(@class,\"col--checkbox\")]])[2]//tr[3]/td[.//span[@class=\"vxe-cell--checkbox\"]]//div/span')\n        change.click_button(\n            '(//div[@class=\"h-40px flex-justify-end flex-align-items-end b-t-s-d9e3f3\"])[2]/button[1]'\n        )\n    \n        # 获取勾选的资源\n        resource = change.get_find_element_xpath(\n            '(//label[text()=\"资源\"])[1]/parent::div//input'\n        ).get_attribute(\"value\")\n        # 获取前资源\n        item1 = change.get_find_element_xpath(\n            '(//label[text()=\"前生产特征\"])[1]/parent::div//input'\n        ).get_attribute(\"value\")\n        sleep(1)\n        # 获取后资源\n        item2 = change.get_find_element_xpath(\n            '(//label[text()=\"后生产特征\"])[1]/parent::div//input'\n        ).get_attribute(\"value\")\n        sleep(1)\n    \n        change.click_button(\n            '(//div[@class=\"h-40px flex-justify-end flex-align-items-end b-t-s-d9e3f3\"])[1]/button[1]'\n        )\n        sleep(1)\n        change.click_button(\n            '(//div[@class=\"h-23px w-20px text-align-c cursor-pointer\"])[8]'\n        )\n        sleep(1)\n        change.click_button(\n            '(//div[@class=\"h-23px w-20px text-align-c cursor-pointer\"])[8]'\n        )\n    \n>       addresource = change.get_find_element_xpath(\n            f'(//span[text()=\"{resource}\"])[1]/ancestor::tr[1]/td[2]'\n        ).text\n\nTests\\test_item\\test_changespec.py:457: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nPages\\changeR_page.py:42: in get_find_element_xpath\n    return self.find_element(By.XPATH, xpath)\nPages\\base_page.py:24: in find_element\n    return WebDriverWait(self.driver, wait_time).until(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"d7d00057ff760dd17f4bf7b0b4ac8006\")>\nmethod = <function presence_of_element_located.<locals>._predicate at 0x00000175CB258820>, message = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        -----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x7ff7793d6f65+78965]\nE       \tGetHandleVerifier [0x0x7ff7793d6fc0+79056]\nE       \t(No symbol) [0x0x7ff779169dda]\nE       \t(No symbol) [0x0x7ff7791c02ea]\nE       \t(No symbol) [0x0x7ff7791c059c]\nE       \t(No symbol) [0x0x7ff779213f37]\nE       \t(No symbol) [0x0x7ff7791e86af]\nE       \t(No symbol) [0x0x7ff779210dbe]\nE       \t(No symbol) [0x0x7ff7791e8443]\nE       \t(No symbol) [0x0x7ff7791b1311]\nE       \t(No symbol) [0x0x7ff7791b20a3]\nE       \tGetHandleVerifier [0x0x7ff77968e26d+2926461]\nE       \tGetHandleVerifier [0x0x7ff779688993+2903715]\nE       \tGetHandleVerifier [0x0x7ff7796a6aed+3026941]\nE       \tGetHandleVerifier [0x0x7ff7793f16fe+187406]\nE       \tGetHandleVerifier [0x0x7ff7793f96ef+220159]\nE       \tGetHandleVerifier [0x0x7ff7793dfaf4+114692]\nE       \tGetHandleVerifier [0x0x7ff7793dfca9+115129]\nE       \tGetHandleVerifier [0x0x7ff7793c64d8+10728]\nE       \tBaseThreadInitThunk [0x0x7ffa099e7374+20]\nE       \tRtlUserThreadStart [0x0x7ffa0b89cc91+33]\n\nmyenv\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:138: TimeoutException","steps":[],"attachments":[{"uid":"c5a756bd40a537da","name":"test_find_element_timeout","source":"c5a756bd40a537da.png","type":"image/png","size":98605},{"uid":"2c9fe8a11a4c5a63","name":"log","source":"2c9fe8a11a4c5a63.txt","type":"text/plain","size":3568}],"parameters":[],"hasContent":true,"stepsCount":0,"attachmentStep":false,"shouldDisplayMessage":true,"attachmentsCount":2},"afterStages":[{"name":"login_to_changespec::0","time":{"start":1752804515547,"stop":1752804517664,"duration":2117},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"stepsCount":0,"attachmentStep":false,"shouldDisplayMessage":false,"attachmentsCount":0}],"labels":[{"name":"feature","value":"生产特征切换表测试用例"},{"name":"story","value":"添加数据成功"},{"name":"parentSuite","value":"Tests.test_item"},{"name":"suite","value":"test_changespec"},{"name":"subSuite","value":"TestChangeSpecPage"},{"name":"host","value":"WIN-20240820MJV"},{"name":"thread","value":"24076-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"Tests.test_item.test_changespec"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":[]},"source":"8f4df38f98a17dbe.json","parameterValues":[]}