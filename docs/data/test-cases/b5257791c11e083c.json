{"uid":"b5257791c11e083c","name":"test_process_restart","fullName":"Tests.test_items.test_process.TestProcessPage#test_process_restart","historyId":"03ded50d0489fd65c080d6403aaf0b14","time":{"start":1760360716508,"stop":1760360721659,"duration":5151},"status":"broken","statusMessage":"selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"xpath\",\"selector\":\"//tr[./td[2][.//span[text()=\"11测试全部数据\"]]]\"}\n  (Session info: chrome=137.0.7151.69); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception\nStacktrace:\n\tGetHandleVerifier [0x0x7ff71bec6f65+78965]\n\tGetHandleVerifier [0x0x7ff71bec6fc0+79056]\n\t(No symbol) [0x0x7ff71bc59dda]\n\t(No symbol) [0x0x7ff71bcb02ea]\n\t(No symbol) [0x0x7ff71bcb059c]\n\t(No symbol) [0x0x7ff71bd03f37]\n\t(No symbol) [0x0x7ff71bcd86af]\n\t(No symbol) [0x0x7ff71bd00dbe]\n\t(No symbol) [0x0x7ff71bcd8443]\n\t(No symbol) [0x0x7ff71bca1311]\n\t(No symbol) [0x0x7ff71bca20a3]\n\tGetHandleVerifier [0x0x7ff71c17e26d+2926461]\n\tGetHandleVerifier [0x0x7ff71c178993+2903715]\n\tGetHandleVerifier [0x0x7ff71c196aed+3026941]\n\tGetHandleVerifier [0x0x7ff71bee16fe+187406]\n\tGetHandleVerifier [0x0x7ff71bee96ef+220159]\n\tGetHandleVerifier [0x0x7ff71becfaf4+114692]\n\tGetHandleVerifier [0x0x7ff71becfca9+115129]\n\tGetHandleVerifier [0x0x7ff71beb64d8+10728]\n\tBaseThreadInitThunk [0x0x7ffe68f47374+20]\n\tRtlUserThreadStart [0x0x7ffe691dcc91+33]","statusTrace":"self = <test_items.test_process.TestProcessPage object at 0x00000216A20883A0>, login_to_process = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"eed19f271e051db9a383a505a06a4a36\")>\n\n    @allure.story(\"重新打开浏览器，数据还存在\")\n    # @pytest.mark.run(order=1)\n    def test_process_restart(self, login_to_process):\n        driver = login_to_process  # WebDriver 实例\n        process = ProcessPage(driver)  # 用 driver 初始化 ProcessPage\n        code = '11测试全部数据'\n        process.enter_texts(\n            '//p[text()=\"工序代码\"]/ancestor::div[2]//input', code\n        )\n        # 缩放到最小（例如 70%）\n        driver.execute_script(\"document.body.style.zoom='0.7'\")\n        sleep(1)\n    \n        row_xpath = f'//tr[./td[2][.//span[text()=\"{code}\"]]]'\n        # 获取目标行\n>       target_row = driver.find_element(By.XPATH, row_xpath)\n\nTests\\test_items\\test_process.py:974: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nmyenv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:914: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\nmyenv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:447: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000216A2715DB0>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such element\",\"message\":\"no such element: Unable to locate element: {\\...ff71beb64d8+10728]\\\\n\\\\tBaseThreadInitThunk [0x0x7ffe68f47374+20]\\\\n\\\\tRtlUserThreadStart [0x0x7ffe691dcc91+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"xpath\",\"selector\":\"//tr[./td[2][.//span[text()=\"11测试全部数据\"]]]\"}\nE         (Session info: chrome=137.0.7151.69); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception\nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x7ff71bec6f65+78965]\nE       \tGetHandleVerifier [0x0x7ff71bec6fc0+79056]\nE       \t(No symbol) [0x0x7ff71bc59dda]\nE       \t(No symbol) [0x0x7ff71bcb02ea]\nE       \t(No symbol) [0x0x7ff71bcb059c]\nE       \t(No symbol) [0x0x7ff71bd03f37]\nE       \t(No symbol) [0x0x7ff71bcd86af]\nE       \t(No symbol) [0x0x7ff71bd00dbe]\nE       \t(No symbol) [0x0x7ff71bcd8443]\nE       \t(No symbol) [0x0x7ff71bca1311]\nE       \t(No symbol) [0x0x7ff71bca20a3]\nE       \tGetHandleVerifier [0x0x7ff71c17e26d+2926461]\nE       \tGetHandleVerifier [0x0x7ff71c178993+2903715]\nE       \tGetHandleVerifier [0x0x7ff71c196aed+3026941]\nE       \tGetHandleVerifier [0x0x7ff71bee16fe+187406]\nE       \tGetHandleVerifier [0x0x7ff71bee96ef+220159]\nE       \tGetHandleVerifier [0x0x7ff71becfaf4+114692]\nE       \tGetHandleVerifier [0x0x7ff71becfca9+115129]\nE       \tGetHandleVerifier [0x0x7ff71beb64d8+10728]\nE       \tBaseThreadInitThunk [0x0x7ffe68f47374+20]\nE       \tRtlUserThreadStart [0x0x7ffe691dcc91+33]\n\nmyenv\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: NoSuchElementException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"login_to_process","time":{"start":1760360707563,"stop":1760360716508,"duration":8945},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false,"attachmentsCount":0}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"xpath\",\"selector\":\"//tr[./td[2][.//span[text()=\"11测试全部数据\"]]]\"}\n  (Session info: chrome=137.0.7151.69); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception\nStacktrace:\n\tGetHandleVerifier [0x0x7ff71bec6f65+78965]\n\tGetHandleVerifier [0x0x7ff71bec6fc0+79056]\n\t(No symbol) [0x0x7ff71bc59dda]\n\t(No symbol) [0x0x7ff71bcb02ea]\n\t(No symbol) [0x0x7ff71bcb059c]\n\t(No symbol) [0x0x7ff71bd03f37]\n\t(No symbol) [0x0x7ff71bcd86af]\n\t(No symbol) [0x0x7ff71bd00dbe]\n\t(No symbol) [0x0x7ff71bcd8443]\n\t(No symbol) [0x0x7ff71bca1311]\n\t(No symbol) [0x0x7ff71bca20a3]\n\tGetHandleVerifier [0x0x7ff71c17e26d+2926461]\n\tGetHandleVerifier [0x0x7ff71c178993+2903715]\n\tGetHandleVerifier [0x0x7ff71c196aed+3026941]\n\tGetHandleVerifier [0x0x7ff71bee16fe+187406]\n\tGetHandleVerifier [0x0x7ff71bee96ef+220159]\n\tGetHandleVerifier [0x0x7ff71becfaf4+114692]\n\tGetHandleVerifier [0x0x7ff71becfca9+115129]\n\tGetHandleVerifier [0x0x7ff71beb64d8+10728]\n\tBaseThreadInitThunk [0x0x7ffe68f47374+20]\n\tRtlUserThreadStart [0x0x7ffe691dcc91+33]","statusTrace":"self = <test_items.test_process.TestProcessPage object at 0x00000216A20883A0>, login_to_process = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"eed19f271e051db9a383a505a06a4a36\")>\n\n    @allure.story(\"重新打开浏览器，数据还存在\")\n    # @pytest.mark.run(order=1)\n    def test_process_restart(self, login_to_process):\n        driver = login_to_process  # WebDriver 实例\n        process = ProcessPage(driver)  # 用 driver 初始化 ProcessPage\n        code = '11测试全部数据'\n        process.enter_texts(\n            '//p[text()=\"工序代码\"]/ancestor::div[2]//input', code\n        )\n        # 缩放到最小（例如 70%）\n        driver.execute_script(\"document.body.style.zoom='0.7'\")\n        sleep(1)\n    \n        row_xpath = f'//tr[./td[2][.//span[text()=\"{code}\"]]]'\n        # 获取目标行\n>       target_row = driver.find_element(By.XPATH, row_xpath)\n\nTests\\test_items\\test_process.py:974: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nmyenv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:914: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\nmyenv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:447: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000216A2715DB0>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such element\",\"message\":\"no such element: Unable to locate element: {\\...ff71beb64d8+10728]\\\\n\\\\tBaseThreadInitThunk [0x0x7ffe68f47374+20]\\\\n\\\\tRtlUserThreadStart [0x0x7ffe691dcc91+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"xpath\",\"selector\":\"//tr[./td[2][.//span[text()=\"11测试全部数据\"]]]\"}\nE         (Session info: chrome=137.0.7151.69); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception\nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x7ff71bec6f65+78965]\nE       \tGetHandleVerifier [0x0x7ff71bec6fc0+79056]\nE       \t(No symbol) [0x0x7ff71bc59dda]\nE       \t(No symbol) [0x0x7ff71bcb02ea]\nE       \t(No symbol) [0x0x7ff71bcb059c]\nE       \t(No symbol) [0x0x7ff71bd03f37]\nE       \t(No symbol) [0x0x7ff71bcd86af]\nE       \t(No symbol) [0x0x7ff71bd00dbe]\nE       \t(No symbol) [0x0x7ff71bcd8443]\nE       \t(No symbol) [0x0x7ff71bca1311]\nE       \t(No symbol) [0x0x7ff71bca20a3]\nE       \tGetHandleVerifier [0x0x7ff71c17e26d+2926461]\nE       \tGetHandleVerifier [0x0x7ff71c178993+2903715]\nE       \tGetHandleVerifier [0x0x7ff71c196aed+3026941]\nE       \tGetHandleVerifier [0x0x7ff71bee16fe+187406]\nE       \tGetHandleVerifier [0x0x7ff71bee96ef+220159]\nE       \tGetHandleVerifier [0x0x7ff71becfaf4+114692]\nE       \tGetHandleVerifier [0x0x7ff71becfca9+115129]\nE       \tGetHandleVerifier [0x0x7ff71beb64d8+10728]\nE       \tBaseThreadInitThunk [0x0x7ffe68f47374+20]\nE       \tRtlUserThreadStart [0x0x7ffe691dcc91+33]\n\nmyenv\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: NoSuchElementException","steps":[],"attachments":[{"uid":"36db5f358dc4e6e","name":"test_process_restart_failure","source":"36db5f358dc4e6e.png","type":"image/png","size":56658},{"uid":"105f2f2f8533b8fc","name":"test_process_restart_source","source":"105f2f2f8533b8fc.html","type":"text/html","size":1216870},{"uid":"f8ad4abf66358eac","name":"log","source":"f8ad4abf66358eac.txt","type":"text/plain","size":774}],"parameters":[],"stepsCount":0,"hasContent":true,"attachmentStep":false,"shouldDisplayMessage":true,"attachmentsCount":3},"afterStages":[{"name":"login_to_process::0","time":{"start":1760360721847,"stop":1760360724023,"duration":2176},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false,"attachmentsCount":0}],"labels":[{"name":"feature","value":"工序表测试用例"},{"name":"story","value":"重新打开浏览器，数据还存在"},{"name":"parentSuite","value":"Tests.test_items"},{"name":"suite","value":"test_process"},{"name":"subSuite","value":"TestProcessPage"},{"name":"host","value":"WIN-20240820MJV"},{"name":"thread","value":"26508-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"Tests.test_items.test_process"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[]}],"tags":[]},"source":"b5257791c11e083c.json","parameterValues":[]}