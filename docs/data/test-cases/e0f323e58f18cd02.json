{"uid":"e0f323e58f18cd02","name":"test_item_addsuccess1","fullName":"Tests.test_material.test_materialDelUserMap.TestItemPage#test_item_addsuccess1","historyId":"99e0ff7e8a166eee5389b72ceb5d23ce","time":{"start":1755102209817,"stop":1755102282847,"duration":73030},"status":"broken","statusMessage":"selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id: session deleted as the browser has closed the connection\nfrom disconnected: Unable to receive message from renderer\n  (Session info: chrome=137.0.7151.69)\nStacktrace:\n\tGetHandleVerifier [0x0x7ff634466f65+78965]\n\tGetHandleVerifier [0x0x7ff634466fc0+79056]\n\t(No symbol) [0x0x7ff6341f9dda]\n\t(No symbol) [0x0x7ff6341e727c]\n\t(No symbol) [0x0x7ff6341e6f6a]\n\t(No symbol) [0x0x7ff6341e4b38]\n\t(No symbol) [0x0x7ff6341e559f]\n\t(No symbol) [0x0x7ff634201184]\n\t(No symbol) [0x0x7ff63420482c]\n\t(No symbol) [0x0x7ff6342048ff]\n\t(No symbol) [0x0x7ff63424fb97]\n\t(No symbol) [0x0x7ff63425059c]\n\t(No symbol) [0x0x7ff6342a3f37]\n\t(No symbol) [0x0x7ff6342786af]\n\t(No symbol) [0x0x7ff6342a0dbe]\n\t(No symbol) [0x0x7ff634278443]\n\t(No symbol) [0x0x7ff634241311]\n\t(No symbol) [0x0x7ff6342420a3]\n\tGetHandleVerifier [0x0x7ff63471e26d+2926461]\n\tGetHandleVerifier [0x0x7ff634718993+2903715]\n\tGetHandleVerifier [0x0x7ff634736aed+3026941]\n\tGetHandleVerifier [0x0x7ff6344816fe+187406]\n\tGetHandleVerifier [0x0x7ff6344896ef+220159]\n\tGetHandleVerifier [0x0x7ff63446faf4+114692]\n\tGetHandleVerifier [0x0x7ff63446fca9+115129]\n\tGetHandleVerifier [0x0x7ff6344564d8+10728]\n\tBaseThreadInitThunk [0x0x7ff992b87374+20]\n\tRtlUserThreadStart [0x0x7ff99357cc91+33]","statusTrace":"self = <test_material.test_materialDelUserMap.TestItemPage object at 0x0000023BD3F7AF20>\nlogin_to_item = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"5f1f22b7b641ac3276cb7e45258eae9a\")>\n\n    @allure.story(\"添加测试数据\")\n    # @pytest.mark.run(order=1)\n    def test_item_addsuccess1(self, login_to_item):\n>       self.item.click_add_button()\n\nTests\\test_material\\test_materialDelUserMap.py:170: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nPages\\materialPage\\warehouseLocation_page.py:17: in click_add_button\n    self.click(By.XPATH, '//p[text()=\"新增\"]')\nPages\\base_page.py:45: in click\n    element = WebDriverWait(self.driver, wait_time).until(\nmyenv\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:129: in until\n    value = method(self._driver)\nmyenv\\lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py:622: in _predicate\n    target = driver.find_element(*target)  # grab element at locator\nmyenv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:914: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\nmyenv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:447: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000023BD48FF880>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"invalid session id\",\"message\":\"invalid session id: session deleted as the...ff6344564d8+10728]\\\\n\\\\tBaseThreadInitThunk [0x0x7ff992b87374+20]\\\\n\\\\tRtlUserThreadStart [0x0x7ff99357cc91+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id: session deleted as the browser has closed the connection\nE       from disconnected: Unable to receive message from renderer\nE         (Session info: chrome=137.0.7151.69)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x7ff634466f65+78965]\nE       \tGetHandleVerifier [0x0x7ff634466fc0+79056]\nE       \t(No symbol) [0x0x7ff6341f9dda]\nE       \t(No symbol) [0x0x7ff6341e727c]\nE       \t(No symbol) [0x0x7ff6341e6f6a]\nE       \t(No symbol) [0x0x7ff6341e4b38]\nE       \t(No symbol) [0x0x7ff6341e559f]\nE       \t(No symbol) [0x0x7ff634201184]\nE       \t(No symbol) [0x0x7ff63420482c]\nE       \t(No symbol) [0x0x7ff6342048ff]\nE       \t(No symbol) [0x0x7ff63424fb97]\nE       \t(No symbol) [0x0x7ff63425059c]\nE       \t(No symbol) [0x0x7ff6342a3f37]\nE       \t(No symbol) [0x0x7ff6342786af]\nE       \t(No symbol) [0x0x7ff6342a0dbe]\nE       \t(No symbol) [0x0x7ff634278443]\nE       \t(No symbol) [0x0x7ff634241311]\nE       \t(No symbol) [0x0x7ff6342420a3]\nE       \tGetHandleVerifier [0x0x7ff63471e26d+2926461]\nE       \tGetHandleVerifier [0x0x7ff634718993+2903715]\nE       \tGetHandleVerifier [0x0x7ff634736aed+3026941]\nE       \tGetHandleVerifier [0x0x7ff6344816fe+187406]\nE       \tGetHandleVerifier [0x0x7ff6344896ef+220159]\nE       \tGetHandleVerifier [0x0x7ff63446faf4+114692]\nE       \tGetHandleVerifier [0x0x7ff63446fca9+115129]\nE       \tGetHandleVerifier [0x0x7ff6344564d8+10728]\nE       \tBaseThreadInitThunk [0x0x7ff992b87374+20]\nE       \tRtlUserThreadStart [0x0x7ff99357cc91+33]\n\nmyenv\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: InvalidSessionIdException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"login_to_item","time":{"start":1755102200996,"stop":1755102209811,"duration":8815},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":0,"attachmentStep":false,"hasContent":false},{"name":"setup","time":{"start":1755102209811,"stop":1755102209816,"duration":5},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":0,"attachmentStep":false,"hasContent":false}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id: session deleted as the browser has closed the connection\nfrom disconnected: Unable to receive message from renderer\n  (Session info: chrome=137.0.7151.69)\nStacktrace:\n\tGetHandleVerifier [0x0x7ff634466f65+78965]\n\tGetHandleVerifier [0x0x7ff634466fc0+79056]\n\t(No symbol) [0x0x7ff6341f9dda]\n\t(No symbol) [0x0x7ff6341e727c]\n\t(No symbol) [0x0x7ff6341e6f6a]\n\t(No symbol) [0x0x7ff6341e4b38]\n\t(No symbol) [0x0x7ff6341e559f]\n\t(No symbol) [0x0x7ff634201184]\n\t(No symbol) [0x0x7ff63420482c]\n\t(No symbol) [0x0x7ff6342048ff]\n\t(No symbol) [0x0x7ff63424fb97]\n\t(No symbol) [0x0x7ff63425059c]\n\t(No symbol) [0x0x7ff6342a3f37]\n\t(No symbol) [0x0x7ff6342786af]\n\t(No symbol) [0x0x7ff6342a0dbe]\n\t(No symbol) [0x0x7ff634278443]\n\t(No symbol) [0x0x7ff634241311]\n\t(No symbol) [0x0x7ff6342420a3]\n\tGetHandleVerifier [0x0x7ff63471e26d+2926461]\n\tGetHandleVerifier [0x0x7ff634718993+2903715]\n\tGetHandleVerifier [0x0x7ff634736aed+3026941]\n\tGetHandleVerifier [0x0x7ff6344816fe+187406]\n\tGetHandleVerifier [0x0x7ff6344896ef+220159]\n\tGetHandleVerifier [0x0x7ff63446faf4+114692]\n\tGetHandleVerifier [0x0x7ff63446fca9+115129]\n\tGetHandleVerifier [0x0x7ff6344564d8+10728]\n\tBaseThreadInitThunk [0x0x7ff992b87374+20]\n\tRtlUserThreadStart [0x0x7ff99357cc91+33]","statusTrace":"self = <test_material.test_materialDelUserMap.TestItemPage object at 0x0000023BD3F7AF20>\nlogin_to_item = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"5f1f22b7b641ac3276cb7e45258eae9a\")>\n\n    @allure.story(\"添加测试数据\")\n    # @pytest.mark.run(order=1)\n    def test_item_addsuccess1(self, login_to_item):\n>       self.item.click_add_button()\n\nTests\\test_material\\test_materialDelUserMap.py:170: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nPages\\materialPage\\warehouseLocation_page.py:17: in click_add_button\n    self.click(By.XPATH, '//p[text()=\"新增\"]')\nPages\\base_page.py:45: in click\n    element = WebDriverWait(self.driver, wait_time).until(\nmyenv\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:129: in until\n    value = method(self._driver)\nmyenv\\lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py:622: in _predicate\n    target = driver.find_element(*target)  # grab element at locator\nmyenv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:914: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\nmyenv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:447: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000023BD48FF880>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"invalid session id\",\"message\":\"invalid session id: session deleted as the...ff6344564d8+10728]\\\\n\\\\tBaseThreadInitThunk [0x0x7ff992b87374+20]\\\\n\\\\tRtlUserThreadStart [0x0x7ff99357cc91+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id: session deleted as the browser has closed the connection\nE       from disconnected: Unable to receive message from renderer\nE         (Session info: chrome=137.0.7151.69)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x7ff634466f65+78965]\nE       \tGetHandleVerifier [0x0x7ff634466fc0+79056]\nE       \t(No symbol) [0x0x7ff6341f9dda]\nE       \t(No symbol) [0x0x7ff6341e727c]\nE       \t(No symbol) [0x0x7ff6341e6f6a]\nE       \t(No symbol) [0x0x7ff6341e4b38]\nE       \t(No symbol) [0x0x7ff6341e559f]\nE       \t(No symbol) [0x0x7ff634201184]\nE       \t(No symbol) [0x0x7ff63420482c]\nE       \t(No symbol) [0x0x7ff6342048ff]\nE       \t(No symbol) [0x0x7ff63424fb97]\nE       \t(No symbol) [0x0x7ff63425059c]\nE       \t(No symbol) [0x0x7ff6342a3f37]\nE       \t(No symbol) [0x0x7ff6342786af]\nE       \t(No symbol) [0x0x7ff6342a0dbe]\nE       \t(No symbol) [0x0x7ff634278443]\nE       \t(No symbol) [0x0x7ff634241311]\nE       \t(No symbol) [0x0x7ff6342420a3]\nE       \tGetHandleVerifier [0x0x7ff63471e26d+2926461]\nE       \tGetHandleVerifier [0x0x7ff634718993+2903715]\nE       \tGetHandleVerifier [0x0x7ff634736aed+3026941]\nE       \tGetHandleVerifier [0x0x7ff6344816fe+187406]\nE       \tGetHandleVerifier [0x0x7ff6344896ef+220159]\nE       \tGetHandleVerifier [0x0x7ff63446faf4+114692]\nE       \tGetHandleVerifier [0x0x7ff63446fca9+115129]\nE       \tGetHandleVerifier [0x0x7ff6344564d8+10728]\nE       \tBaseThreadInitThunk [0x0x7ff992b87374+20]\nE       \tRtlUserThreadStart [0x0x7ff99357cc91+33]\n\nmyenv\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: InvalidSessionIdException","steps":[],"attachments":[{"uid":"c172cac7d8fe2f35","name":"test_item_addsuccess1_failure","source":"c172cac7d8fe2f35.png","type":"image/png","size":30845},{"uid":"489cf0766a18fb5c","name":"test_item_addsuccess1_source","source":"489cf0766a18fb5c.html","type":"text/html","size":182301},{"uid":"ec1a9eaff2a37150","name":"test_item_addsuccess1_failure","source":"ec1a9eaff2a37150.png","type":"image/png","size":21324},{"uid":"d1ebbd17233820e3","name":"test_item_addsuccess1_source","source":"d1ebbd17233820e3.html","type":"text/html","size":179447},{"uid":"b589daab32796a0a","name":"test_item_addsuccess1_failure","source":"b589daab32796a0a.png","type":"image/png","size":21324},{"uid":"38a34961799b0794","name":"test_item_addsuccess1_source","source":"38a34961799b0794.html","type":"text/html","size":179447},{"uid":"c70b0373cc5f5e7e","name":"test_item_addsuccess1_failure","source":"c70b0373cc5f5e7e.png","type":"image/png","size":30845},{"uid":"b6d31fc083cb5747","name":"test_item_addsuccess1_source","source":"b6d31fc083cb5747.html","type":"text/html","size":182301},{"uid":"d553d800edeb9e5b","name":"test_item_addsuccess1_failure","source":"d553d800edeb9e5b.png","type":"image/png","size":22036},{"uid":"a9b8221936eb0353","name":"test_item_addsuccess1_source","source":"a9b8221936eb0353.html","type":"text/html","size":179437},{"uid":"b0712b64ac92975b","name":"test_item_addsuccess1_failure","source":"b0712b64ac92975b.png","type":"image/png","size":21324},{"uid":"79723698f18819c5","name":"test_item_addsuccess1_source","source":"79723698f18819c5.html","type":"text/html","size":179447},{"uid":"488e8561287c0545","name":"test_item_addsuccess1_failure","source":"488e8561287c0545.png","type":"image/png","size":30859},{"uid":"6cac4d18cbc4a51","name":"test_item_addsuccess1_source","source":"6cac4d18cbc4a51.html","type":"text/html","size":182301},{"uid":"5c15e9c3971d555","name":"test_item_addsuccess1_failure","source":"5c15e9c3971d555.png","type":"image/png","size":22036},{"uid":"736161a0071ec713","name":"test_item_addsuccess1_source","source":"736161a0071ec713.html","type":"text/html","size":179437},{"uid":"f15f79a9b38223a","name":"test_item_addsuccess1_failure","source":"f15f79a9b38223a.png","type":"image/png","size":30845},{"uid":"4720ad8f131f96a0","name":"test_item_addsuccess1_source","source":"4720ad8f131f96a0.html","type":"text/html","size":182301},{"uid":"41d8cd8da7c7886d","name":"test_item_addsuccess1_failure","source":"41d8cd8da7c7886d.png","type":"image/png","size":30845},{"uid":"533e5b0d7c63473a","name":"test_item_addsuccess1_source","source":"533e5b0d7c63473a.html","type":"text/html","size":182301},{"uid":"85c59db03bb4a84c","name":"test_item_addsuccess1_failure","source":"85c59db03bb4a84c.png","type":"image/png","size":22036},{"uid":"312f66b9047f2197","name":"test_item_addsuccess1_source","source":"312f66b9047f2197.html","type":"text/html","size":179437},{"uid":"f19cca9ee9d4e","name":"test_item_addsuccess1_failure","source":"f19cca9ee9d4e.png","type":"image/png","size":30845},{"uid":"33b55e6efaad7237","name":"test_item_addsuccess1_source","source":"33b55e6efaad7237.html","type":"text/html","size":182301},{"uid":"efed47b5ca15d584","name":"test_item_addsuccess1_failure","source":"efed47b5ca15d584.png","type":"image/png","size":30845},{"uid":"3393e439714b097f","name":"test_item_addsuccess1_source","source":"3393e439714b097f.html","type":"text/html","size":182301},{"uid":"66e95ba998b28e45","name":"test_item_addsuccess1_failure","source":"66e95ba998b28e45.png","type":"image/png","size":30845},{"uid":"50b4271ab6354baf","name":"test_item_addsuccess1_source","source":"50b4271ab6354baf.html","type":"text/html","size":182301},{"uid":"9227ede6300ae08c","name":"test_item_addsuccess1_failure","source":"9227ede6300ae08c.png","type":"image/png","size":30845},{"uid":"d3a280425900060a","name":"test_item_addsuccess1_source","source":"d3a280425900060a.html","type":"text/html","size":182301},{"uid":"ba4c5323d6c1e6ec","name":"test_item_addsuccess1_failure","source":"ba4c5323d6c1e6ec.png","type":"image/png","size":22036},{"uid":"8be82ca723d40928","name":"test_item_addsuccess1_source","source":"8be82ca723d40928.html","type":"text/html","size":179437},{"uid":"e5264e55cdb9c227","name":"test_item_addsuccess1_failure","source":"e5264e55cdb9c227.png","type":"image/png","size":22036},{"uid":"3f076f984b6966f9","name":"test_item_addsuccess1_source","source":"3f076f984b6966f9.html","type":"text/html","size":179437},{"uid":"49a59955e6fdbff","name":"test_item_addsuccess1_failure","source":"49a59955e6fdbff.png","type":"image/png","size":30859},{"uid":"f74b808d3a15f6cf","name":"test_item_addsuccess1_source","source":"f74b808d3a15f6cf.html","type":"text/html","size":182301},{"uid":"2421292651166ea7","name":"test_item_addsuccess1_failure","source":"2421292651166ea7.png","type":"image/png","size":30845},{"uid":"50146b2ac8c1c27e","name":"test_item_addsuccess1_source","source":"50146b2ac8c1c27e.html","type":"text/html","size":182301},{"uid":"c0532d8de5590790","name":"test_item_addsuccess1_failure","source":"c0532d8de5590790.png","type":"image/png","size":30845},{"uid":"8cb5b44baf8c3c98","name":"test_item_addsuccess1_source","source":"8cb5b44baf8c3c98.html","type":"text/html","size":182301},{"uid":"3f3d266c78ca58c2","name":"test_item_addsuccess1_failure","source":"3f3d266c78ca58c2.png","type":"image/png","size":22036},{"uid":"da094523a1d99ef7","name":"test_item_addsuccess1_source","source":"da094523a1d99ef7.html","type":"text/html","size":179437},{"uid":"a2fec17c0d6476e","name":"log","source":"a2fec17c0d6476e.txt","type":"text/plain","size":887}],"parameters":[],"attachmentsCount":43,"shouldDisplayMessage":true,"stepsCount":0,"attachmentStep":false,"hasContent":true},"afterStages":[{"name":"login_to_item::0","time":{"start":1755102770110,"stop":1755102772132,"duration":2022},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":0,"attachmentStep":false,"hasContent":false}],"labels":[{"name":"feature","value":"用户与物料员测试用例"},{"name":"story","value":"添加测试数据"},{"name":"parentSuite","value":"Tests.test_material"},{"name":"suite","value":"test_materialDelUserMap"},{"name":"subSuite","value":"TestItemPage"},{"name":"host","value":"WIN-20240820MJV"},{"name":"thread","value":"3232-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"Tests.test_material.test_materialDelUserMap"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":[]},"source":"e0f323e58f18cd02.json","parameterValues":[]}