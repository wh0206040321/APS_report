{"uid":"c92527e56c376f71","name":"test_setting_display","fullName":"Tests.test_item.test_setting.TestSettingPage#test_setting_display","historyId":"7447d00b650bcc6514a52fb2dbe485bd","time":{"start":1752761910023,"stop":1752761922704,"duration":12681},"status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message: 点击失败，找不到元素：xpath = //span[./span[text()=\"测试布局A\"]]/following-sibling::i[1]","statusTrace":"self = <Pages.setting_page.SettingPage object at 0x000001FF380B1F30>, by_or_element = 'xpath', value = '//span[./span[text()=\"测试布局A\"]]/following-sibling::i[1]', wait_time = 10\n\n    def click(self, by_or_element, value=None, wait_time=10):\n        if value is not None:\n            by = by_or_element\n            logging.info(f\"点击元素：By = {by}, Value = {value}\")\n            try:\n>               element = WebDriverWait(self.driver, wait_time).until(\n                    EC.element_to_be_clickable((by, value))\n                )\n\nPages\\base_page.py:42: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"24d7eed8334a75b96098261fa302a24f\")>\nmethod = <function element_to_be_clickable.<locals>._predicate at 0x000001FF3804D000>, message = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        -----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\nmyenv\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:138: TimeoutException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_item.test_setting.TestSettingPage object at 0x000001FF37973700>\nlogin_to_setting = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"24d7eed8334a75b96098261fa302a24f\")>\n\n    @allure.story(\"设置表格布局-布局列表设置为显示布局\")\n    # @pytest.mark.run(order=1)\n    def test_setting_display(self, login_to_setting):\n        driver = login_to_setting  # WebDriver 实例\n        setting = SettingPage(driver)  # 用 driver 初始化 SettingPage\n        layout = \"测试布局A\"\n        sleep(1)\n        setting.click_button('//i[@id=\"tabsDrawerIcon\"]')\n    \n        # 获取目标 div 元素，这里的目标是具有特定文本的 div\n        target_div = setting.get_find_element_xpath(\n            f'//div[@id=\"container\"]/div[.//text()=\"{layout}\"]'\n        )\n    \n        # 获取父容器下所有 div\n        # 这一步是为了确定目标 div 在其父容器中的位置\n        parent_div = setting.get_find_element_xpath(f'//div[@id=\"container\"]')\n        all_children = parent_div.find_elements(By.XPATH, \"./div\")\n    \n        # 获取目标 div 的位置索引（从0开始）\n        # 这里是为了后续操作，比如点击目标 div 相关的按钮\n        index = all_children.index(target_div)\n        print(f\"目标 div 是第 {index + 1} 个 div\")  # 输出 3（如果从0开始则是2）\n        xpath = f'(//i[@class=\"el-icon-more layoutListDropdown\"])[{index + 1}]'\n        element = driver.find_element(By.XPATH, xpath)\n        # 判断是否可点击（可见 + 启用）\n        sleep(1)\n        if element.is_displayed() and element.is_enabled():\n            print(f\"元素存在且可点击，即将点击...\")\n            element.click()  # 执行点击操作\n        else:\n>           setting.click_button(\n                f'//span[./span[text()=\"{layout}\"]]/following-sibling::i[1]'\n            )\n\nTests\\test_item\\test_setting.py:483: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nPages\\setting_page.py:22: in click_button\n    self.click(By.XPATH, xpath)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Pages.setting_page.SettingPage object at 0x000001FF380B1F30>, by_or_element = 'xpath', value = '//span[./span[text()=\"测试布局A\"]]/following-sibling::i[1]', wait_time = 10\n\n    def click(self, by_or_element, value=None, wait_time=10):\n        if value is not None:\n            by = by_or_element\n            logging.info(f\"点击元素：By = {by}, Value = {value}\")\n            try:\n                element = WebDriverWait(self.driver, wait_time).until(\n                    EC.element_to_be_clickable((by, value))\n                )\n            except TimeoutException:\n                logging.warning(f\"❌ 点击超时：元素 {by} = {value} 未在 {wait_time} 秒内变为可点击\")\n                self.safe_screenshot(\"click_timeout\", test_name=\"test\")\n>               raise TimeoutException(f\"点击失败，找不到元素：{by} = {value}\")\nE               selenium.common.exceptions.TimeoutException: Message: 点击失败，找不到元素：xpath = //span[./span[text()=\"测试布局A\"]]/following-sibling::i[1]\n\nPages\\base_page.py:48: TimeoutException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"login_to_setting","time":{"start":1752761902176,"stop":1752761910022,"duration":7846},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentStep":false,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message: 点击失败，找不到元素：xpath = //span[./span[text()=\"测试布局A\"]]/following-sibling::i[1]","statusTrace":"self = <Pages.setting_page.SettingPage object at 0x000001FF380B1F30>, by_or_element = 'xpath', value = '//span[./span[text()=\"测试布局A\"]]/following-sibling::i[1]', wait_time = 10\n\n    def click(self, by_or_element, value=None, wait_time=10):\n        if value is not None:\n            by = by_or_element\n            logging.info(f\"点击元素：By = {by}, Value = {value}\")\n            try:\n>               element = WebDriverWait(self.driver, wait_time).until(\n                    EC.element_to_be_clickable((by, value))\n                )\n\nPages\\base_page.py:42: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"24d7eed8334a75b96098261fa302a24f\")>\nmethod = <function element_to_be_clickable.<locals>._predicate at 0x000001FF3804D000>, message = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        -----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\nmyenv\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:138: TimeoutException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_item.test_setting.TestSettingPage object at 0x000001FF37973700>\nlogin_to_setting = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"24d7eed8334a75b96098261fa302a24f\")>\n\n    @allure.story(\"设置表格布局-布局列表设置为显示布局\")\n    # @pytest.mark.run(order=1)\n    def test_setting_display(self, login_to_setting):\n        driver = login_to_setting  # WebDriver 实例\n        setting = SettingPage(driver)  # 用 driver 初始化 SettingPage\n        layout = \"测试布局A\"\n        sleep(1)\n        setting.click_button('//i[@id=\"tabsDrawerIcon\"]')\n    \n        # 获取目标 div 元素，这里的目标是具有特定文本的 div\n        target_div = setting.get_find_element_xpath(\n            f'//div[@id=\"container\"]/div[.//text()=\"{layout}\"]'\n        )\n    \n        # 获取父容器下所有 div\n        # 这一步是为了确定目标 div 在其父容器中的位置\n        parent_div = setting.get_find_element_xpath(f'//div[@id=\"container\"]')\n        all_children = parent_div.find_elements(By.XPATH, \"./div\")\n    \n        # 获取目标 div 的位置索引（从0开始）\n        # 这里是为了后续操作，比如点击目标 div 相关的按钮\n        index = all_children.index(target_div)\n        print(f\"目标 div 是第 {index + 1} 个 div\")  # 输出 3（如果从0开始则是2）\n        xpath = f'(//i[@class=\"el-icon-more layoutListDropdown\"])[{index + 1}]'\n        element = driver.find_element(By.XPATH, xpath)\n        # 判断是否可点击（可见 + 启用）\n        sleep(1)\n        if element.is_displayed() and element.is_enabled():\n            print(f\"元素存在且可点击，即将点击...\")\n            element.click()  # 执行点击操作\n        else:\n>           setting.click_button(\n                f'//span[./span[text()=\"{layout}\"]]/following-sibling::i[1]'\n            )\n\nTests\\test_item\\test_setting.py:483: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nPages\\setting_page.py:22: in click_button\n    self.click(By.XPATH, xpath)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Pages.setting_page.SettingPage object at 0x000001FF380B1F30>, by_or_element = 'xpath', value = '//span[./span[text()=\"测试布局A\"]]/following-sibling::i[1]', wait_time = 10\n\n    def click(self, by_or_element, value=None, wait_time=10):\n        if value is not None:\n            by = by_or_element\n            logging.info(f\"点击元素：By = {by}, Value = {value}\")\n            try:\n                element = WebDriverWait(self.driver, wait_time).until(\n                    EC.element_to_be_clickable((by, value))\n                )\n            except TimeoutException:\n                logging.warning(f\"❌ 点击超时：元素 {by} = {value} 未在 {wait_time} 秒内变为可点击\")\n                self.safe_screenshot(\"click_timeout\", test_name=\"test\")\n>               raise TimeoutException(f\"点击失败，找不到元素：{by} = {value}\")\nE               selenium.common.exceptions.TimeoutException: Message: 点击失败，找不到元素：xpath = //span[./span[text()=\"测试布局A\"]]/following-sibling::i[1]\n\nPages\\base_page.py:48: TimeoutException","steps":[],"attachments":[{"uid":"e532ae7203f85284","name":"test_click_timeout","source":"e532ae7203f85284.png","type":"image/png","size":118864},{"uid":"c574ea7f51881748","name":"log","source":"c574ea7f51881748.txt","type":"text/plain","size":1536}],"parameters":[],"stepsCount":0,"attachmentStep":false,"hasContent":true,"shouldDisplayMessage":true,"attachmentsCount":2},"afterStages":[{"name":"login_to_setting::0","time":{"start":1752761922754,"stop":1752761924878,"duration":2124},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentStep":false,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0}],"labels":[{"name":"story","value":"设置表格布局-布局列表设置为显示布局"},{"name":"feature","value":"标准应用设置测试用例"},{"name":"parentSuite","value":"Tests.test_item"},{"name":"suite","value":"test_setting"},{"name":"subSuite","value":"TestSettingPage"},{"name":"host","value":"WIN-20240820MJV"},{"name":"thread","value":"11236-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"Tests.test_item.test_setting"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":[]},"source":"c92527e56c376f71.json","parameterValues":[]}