{"uid":"716dd409b13e16e5","name":"test_process_restart","fullName":"Tests.test_items.test_process.TestProcessPage#test_process_restart","historyId":"03ded50d0489fd65c080d6403aaf0b14","time":{"start":1756194370004,"stop":1756194374238,"duration":4234},"status":"failed","statusMessage":"AssertionError: 第1项不一致：actual='11测试全部数据', expected='全部数据'\nassert '11测试全部数据' == '全部数据'\n  \n  \u001B[0m\u001B[91m- 全部数据\u001B[39;49;00m\u001B[90m\u001B[39;49;00m\n  \u001B[92m+ 11测试全部数据\u001B[39;49;00m\u001B[90m\u001B[39;49;00m","statusTrace":"self = <test_items.test_process.TestProcessPage object at 0x000001DC53EBB670>\nlogin_to_process = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"edcd65868448f56c7ea937382782f1dd\")>\n\n    @allure.story(\"重新打开浏览器，数据还存在\")\n    # @pytest.mark.run(order=1)\n    def test_process_restart(self, login_to_process):\n        driver = login_to_process  # WebDriver 实例\n        process = ProcessPage(driver)  # 用 driver 初始化 ProcessPage\n        code = '11测试全部数据'\n        process.enter_texts(\n            '//p[text()=\"工序代码\"]/ancestor::div[2]//input', code\n        )\n        # 缩放到最小（例如 70%）\n        driver.execute_script(\"document.body.style.zoom='0.7'\")\n        sleep(1)\n    \n        row_xpath = f'//tr[./td[2][.//span[text()=\"{code}\"]]]'\n        # 获取目标行\n        target_row = driver.find_element(By.XPATH, row_xpath)\n    \n        # 获取该行下所有 td 元素\n        td_elements = target_row.find_elements(By.XPATH, \"./td\")\n        td_count = len(td_elements)\n        print(f\"该行共有 {td_count} 个 <td> 元素\")\n        columns_text = []\n        # 遍历每个 td[i]\n        # 遍历每个 td[i] 并提取文本\n        for i in range(2, td_count + 1):\n            td_xpath = f'{row_xpath}/td[{i}]'\n            sleep(0.2)\n            try:\n                td = driver.find_element(By.XPATH, td_xpath)\n            except StaleElementReferenceException:\n                print(f\"⚠️ 第 {i} 个单元格引用失效，尝试重新查找\")\n                sleep(0.2)\n                td = driver.find_element(By.XPATH, td_xpath)\n    \n            if i == 6:\n                try:\n                    label = td.find_element(By.TAG_NAME, \"label\")\n                    label_class = label.get_attribute(\"class\")\n                    print(f\"第 {i} 个单元格中 <label> 的 class 属性：{label_class}\")\n                    columns_text.append(label_class)\n                except NoSuchElementException:\n                    print(f\"⚠️ 第 {i} 个单元格中未找到 <label> 元素\")\n                    columns_text.append(\"\")\n            else:\n                text = td.text.strip()\n                print(f\"第 {i} 个单元格内容：{text}\")\n                columns_text.append(text)\n    \n        print(columns_text)\n        bef_text = ['全部数据', '全部数据', '2', '20', 'is--checked', '全部数据', f'{DateDriver.username}', '2025']\n        assert len(columns_text) == len(bef_text), f\"长度不一致：actual={len(columns_text)}, expected={len(bef_text)}\"\n        for i, (a, e) in enumerate(zip(columns_text, bef_text)):\n            if i == 4:\n                assert str(e) in str(a), f\"第5项包含断言失败：'{e}' not in '{a}'\"\n            elif i == 7:\n                assert str(e) in str(a), f\"第6项包含断言失败：'{e}' not in '{a}'\"\n            else:\n>               assert a == e, f\"第{i + 1}项不一致：actual='{a}', expected='{e}'\"\nE               AssertionError: 第1项不一致：actual='11测试全部数据', expected='全部数据'\nE               assert '11测试全部数据' == '全部数据'\nE                 \nE                 \u001B[0m\u001B[91m- 全部数据\u001B[39;49;00m\u001B[90m\u001B[39;49;00m\nE                 \u001B[92m+ 11测试全部数据\u001B[39;49;00m\u001B[90m\u001B[39;49;00m\n\nTests\\test_items\\test_process.py:999: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":1,"retriesStatusChange":true,"beforeStages":[{"name":"login_to_process","time":{"start":1756194361038,"stop":1756194370004,"duration":8966},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"stepsCount":0,"attachmentStep":false,"shouldDisplayMessage":false,"attachmentsCount":0}],"testStage":{"status":"failed","statusMessage":"AssertionError: 第1项不一致：actual='11测试全部数据', expected='全部数据'\nassert '11测试全部数据' == '全部数据'\n  \n  \u001B[0m\u001B[91m- 全部数据\u001B[39;49;00m\u001B[90m\u001B[39;49;00m\n  \u001B[92m+ 11测试全部数据\u001B[39;49;00m\u001B[90m\u001B[39;49;00m","statusTrace":"self = <test_items.test_process.TestProcessPage object at 0x000001DC53EBB670>\nlogin_to_process = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"edcd65868448f56c7ea937382782f1dd\")>\n\n    @allure.story(\"重新打开浏览器，数据还存在\")\n    # @pytest.mark.run(order=1)\n    def test_process_restart(self, login_to_process):\n        driver = login_to_process  # WebDriver 实例\n        process = ProcessPage(driver)  # 用 driver 初始化 ProcessPage\n        code = '11测试全部数据'\n        process.enter_texts(\n            '//p[text()=\"工序代码\"]/ancestor::div[2]//input', code\n        )\n        # 缩放到最小（例如 70%）\n        driver.execute_script(\"document.body.style.zoom='0.7'\")\n        sleep(1)\n    \n        row_xpath = f'//tr[./td[2][.//span[text()=\"{code}\"]]]'\n        # 获取目标行\n        target_row = driver.find_element(By.XPATH, row_xpath)\n    \n        # 获取该行下所有 td 元素\n        td_elements = target_row.find_elements(By.XPATH, \"./td\")\n        td_count = len(td_elements)\n        print(f\"该行共有 {td_count} 个 <td> 元素\")\n        columns_text = []\n        # 遍历每个 td[i]\n        # 遍历每个 td[i] 并提取文本\n        for i in range(2, td_count + 1):\n            td_xpath = f'{row_xpath}/td[{i}]'\n            sleep(0.2)\n            try:\n                td = driver.find_element(By.XPATH, td_xpath)\n            except StaleElementReferenceException:\n                print(f\"⚠️ 第 {i} 个单元格引用失效，尝试重新查找\")\n                sleep(0.2)\n                td = driver.find_element(By.XPATH, td_xpath)\n    \n            if i == 6:\n                try:\n                    label = td.find_element(By.TAG_NAME, \"label\")\n                    label_class = label.get_attribute(\"class\")\n                    print(f\"第 {i} 个单元格中 <label> 的 class 属性：{label_class}\")\n                    columns_text.append(label_class)\n                except NoSuchElementException:\n                    print(f\"⚠️ 第 {i} 个单元格中未找到 <label> 元素\")\n                    columns_text.append(\"\")\n            else:\n                text = td.text.strip()\n                print(f\"第 {i} 个单元格内容：{text}\")\n                columns_text.append(text)\n    \n        print(columns_text)\n        bef_text = ['全部数据', '全部数据', '2', '20', 'is--checked', '全部数据', f'{DateDriver.username}', '2025']\n        assert len(columns_text) == len(bef_text), f\"长度不一致：actual={len(columns_text)}, expected={len(bef_text)}\"\n        for i, (a, e) in enumerate(zip(columns_text, bef_text)):\n            if i == 4:\n                assert str(e) in str(a), f\"第5项包含断言失败：'{e}' not in '{a}'\"\n            elif i == 7:\n                assert str(e) in str(a), f\"第6项包含断言失败：'{e}' not in '{a}'\"\n            else:\n>               assert a == e, f\"第{i + 1}项不一致：actual='{a}', expected='{e}'\"\nE               AssertionError: 第1项不一致：actual='11测试全部数据', expected='全部数据'\nE               assert '11测试全部数据' == '全部数据'\nE                 \nE                 \u001B[0m\u001B[91m- 全部数据\u001B[39;49;00m\u001B[90m\u001B[39;49;00m\nE                 \u001B[92m+ 11测试全部数据\u001B[39;49;00m\u001B[90m\u001B[39;49;00m\n\nTests\\test_items\\test_process.py:999: AssertionError","steps":[],"attachments":[{"uid":"b68473413d129ade","name":"test_process_restart_failure","source":"b68473413d129ade.png","type":"image/png","size":61333},{"uid":"ee4f597338aa2294","name":"test_process_restart_source","source":"ee4f597338aa2294.html","type":"text/html","size":1213174},{"uid":"81fe567f040e6b11","name":"log","source":"81fe567f040e6b11.txt","type":"text/plain","size":774}],"parameters":[],"hasContent":true,"stepsCount":0,"attachmentStep":false,"shouldDisplayMessage":true,"attachmentsCount":3},"afterStages":[{"name":"login_to_process::0","time":{"start":1756194374388,"stop":1756194376588,"duration":2200},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"stepsCount":0,"attachmentStep":false,"shouldDisplayMessage":false,"attachmentsCount":0}],"labels":[{"name":"feature","value":"工序表测试用例"},{"name":"story","value":"重新打开浏览器，数据还存在"},{"name":"parentSuite","value":"Tests.test_items"},{"name":"suite","value":"test_process"},{"name":"subSuite","value":"TestProcessPage"},{"name":"host","value":"WIN-20240820MJV"},{"name":"thread","value":"12016-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"Tests.test_items.test_process"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"289cc6ba26826c7a","status":"passed","time":{"start":1755781331760,"stop":1755781339260,"duration":7500}}],"categories":[{"name":"Product defects","matchedStatuses":[]}],"tags":[]},"source":"716dd409b13e16e5.json","parameterValues":[]}