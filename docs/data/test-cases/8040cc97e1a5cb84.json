{"uid":"8040cc97e1a5cb84","name":"test_item_addsuccess1","fullName":"Tests.test_material.test_materialDelUserMap.TestItemPage#test_item_addsuccess1","historyId":"99e0ff7e8a166eee5389b72ceb5d23ce","time":{"start":1755102209817,"stop":1755102282847,"duration":73030},"status":"broken","statusMessage":"selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id: session deleted as the browser has closed the connection\nfrom disconnected: Unable to receive message from renderer\n  (Session info: chrome=137.0.7151.69)\nStacktrace:\n\tGetHandleVerifier [0x0x7ff634466f65+78965]\n\tGetHandleVerifier [0x0x7ff634466fc0+79056]\n\t(No symbol) [0x0x7ff6341f9dda]\n\t(No symbol) [0x0x7ff6341e727c]\n\t(No symbol) [0x0x7ff6341e6f6a]\n\t(No symbol) [0x0x7ff6341e4b38]\n\t(No symbol) [0x0x7ff6341e559f]\n\t(No symbol) [0x0x7ff634201184]\n\t(No symbol) [0x0x7ff63420482c]\n\t(No symbol) [0x0x7ff6342048ff]\n\t(No symbol) [0x0x7ff63424fb97]\n\t(No symbol) [0x0x7ff63425059c]\n\t(No symbol) [0x0x7ff6342a3f37]\n\t(No symbol) [0x0x7ff6342786af]\n\t(No symbol) [0x0x7ff6342a0dbe]\n\t(No symbol) [0x0x7ff634278443]\n\t(No symbol) [0x0x7ff634241311]\n\t(No symbol) [0x0x7ff6342420a3]\n\tGetHandleVerifier [0x0x7ff63471e26d+2926461]\n\tGetHandleVerifier [0x0x7ff634718993+2903715]\n\tGetHandleVerifier [0x0x7ff634736aed+3026941]\n\tGetHandleVerifier [0x0x7ff6344816fe+187406]\n\tGetHandleVerifier [0x0x7ff6344896ef+220159]\n\tGetHandleVerifier [0x0x7ff63446faf4+114692]\n\tGetHandleVerifier [0x0x7ff63446fca9+115129]\n\tGetHandleVerifier [0x0x7ff6344564d8+10728]\n\tBaseThreadInitThunk [0x0x7ff992b87374+20]\n\tRtlUserThreadStart [0x0x7ff99357cc91+33]","statusTrace":"self = <test_material.test_materialDelUserMap.TestItemPage object at 0x0000023BD3F7AF20>\nlogin_to_item = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"5f1f22b7b641ac3276cb7e45258eae9a\")>\n\n    @allure.story(\"添加测试数据\")\n    # @pytest.mark.run(order=1)\n    def test_item_addsuccess1(self, login_to_item):\n>       self.item.click_add_button()\n\nTests\\test_material\\test_materialDelUserMap.py:170: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nPages\\materialPage\\warehouseLocation_page.py:17: in click_add_button\n    self.click(By.XPATH, '//p[text()=\"新增\"]')\nPages\\base_page.py:45: in click\n    element = WebDriverWait(self.driver, wait_time).until(\nmyenv\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:129: in until\n    value = method(self._driver)\nmyenv\\lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py:622: in _predicate\n    target = driver.find_element(*target)  # grab element at locator\nmyenv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:914: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\nmyenv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:447: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000023BD48FF880>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"invalid session id\",\"message\":\"invalid session id: session deleted as the...ff6344564d8+10728]\\\\n\\\\tBaseThreadInitThunk [0x0x7ff992b87374+20]\\\\n\\\\tRtlUserThreadStart [0x0x7ff99357cc91+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id: session deleted as the browser has closed the connection\nE       from disconnected: Unable to receive message from renderer\nE         (Session info: chrome=137.0.7151.69)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x7ff634466f65+78965]\nE       \tGetHandleVerifier [0x0x7ff634466fc0+79056]\nE       \t(No symbol) [0x0x7ff6341f9dda]\nE       \t(No symbol) [0x0x7ff6341e727c]\nE       \t(No symbol) [0x0x7ff6341e6f6a]\nE       \t(No symbol) [0x0x7ff6341e4b38]\nE       \t(No symbol) [0x0x7ff6341e559f]\nE       \t(No symbol) [0x0x7ff634201184]\nE       \t(No symbol) [0x0x7ff63420482c]\nE       \t(No symbol) [0x0x7ff6342048ff]\nE       \t(No symbol) [0x0x7ff63424fb97]\nE       \t(No symbol) [0x0x7ff63425059c]\nE       \t(No symbol) [0x0x7ff6342a3f37]\nE       \t(No symbol) [0x0x7ff6342786af]\nE       \t(No symbol) [0x0x7ff6342a0dbe]\nE       \t(No symbol) [0x0x7ff634278443]\nE       \t(No symbol) [0x0x7ff634241311]\nE       \t(No symbol) [0x0x7ff6342420a3]\nE       \tGetHandleVerifier [0x0x7ff63471e26d+2926461]\nE       \tGetHandleVerifier [0x0x7ff634718993+2903715]\nE       \tGetHandleVerifier [0x0x7ff634736aed+3026941]\nE       \tGetHandleVerifier [0x0x7ff6344816fe+187406]\nE       \tGetHandleVerifier [0x0x7ff6344896ef+220159]\nE       \tGetHandleVerifier [0x0x7ff63446faf4+114692]\nE       \tGetHandleVerifier [0x0x7ff63446fca9+115129]\nE       \tGetHandleVerifier [0x0x7ff6344564d8+10728]\nE       \tBaseThreadInitThunk [0x0x7ff992b87374+20]\nE       \tRtlUserThreadStart [0x0x7ff99357cc91+33]\n\nmyenv\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: InvalidSessionIdException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"login_to_item","time":{"start":1755102200996,"stop":1755102209811,"duration":8815},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentStep":false,"hasContent":false,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"setup","time":{"start":1755102209811,"stop":1755102209816,"duration":5},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentStep":false,"hasContent":false,"attachmentsCount":0,"shouldDisplayMessage":false}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id: session deleted as the browser has closed the connection\nfrom disconnected: Unable to receive message from renderer\n  (Session info: chrome=137.0.7151.69)\nStacktrace:\n\tGetHandleVerifier [0x0x7ff634466f65+78965]\n\tGetHandleVerifier [0x0x7ff634466fc0+79056]\n\t(No symbol) [0x0x7ff6341f9dda]\n\t(No symbol) [0x0x7ff6341e727c]\n\t(No symbol) [0x0x7ff6341e6f6a]\n\t(No symbol) [0x0x7ff6341e4b38]\n\t(No symbol) [0x0x7ff6341e559f]\n\t(No symbol) [0x0x7ff634201184]\n\t(No symbol) [0x0x7ff63420482c]\n\t(No symbol) [0x0x7ff6342048ff]\n\t(No symbol) [0x0x7ff63424fb97]\n\t(No symbol) [0x0x7ff63425059c]\n\t(No symbol) [0x0x7ff6342a3f37]\n\t(No symbol) [0x0x7ff6342786af]\n\t(No symbol) [0x0x7ff6342a0dbe]\n\t(No symbol) [0x0x7ff634278443]\n\t(No symbol) [0x0x7ff634241311]\n\t(No symbol) [0x0x7ff6342420a3]\n\tGetHandleVerifier [0x0x7ff63471e26d+2926461]\n\tGetHandleVerifier [0x0x7ff634718993+2903715]\n\tGetHandleVerifier [0x0x7ff634736aed+3026941]\n\tGetHandleVerifier [0x0x7ff6344816fe+187406]\n\tGetHandleVerifier [0x0x7ff6344896ef+220159]\n\tGetHandleVerifier [0x0x7ff63446faf4+114692]\n\tGetHandleVerifier [0x0x7ff63446fca9+115129]\n\tGetHandleVerifier [0x0x7ff6344564d8+10728]\n\tBaseThreadInitThunk [0x0x7ff992b87374+20]\n\tRtlUserThreadStart [0x0x7ff99357cc91+33]","statusTrace":"self = <test_material.test_materialDelUserMap.TestItemPage object at 0x0000023BD3F7AF20>\nlogin_to_item = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"5f1f22b7b641ac3276cb7e45258eae9a\")>\n\n    @allure.story(\"添加测试数据\")\n    # @pytest.mark.run(order=1)\n    def test_item_addsuccess1(self, login_to_item):\n>       self.item.click_add_button()\n\nTests\\test_material\\test_materialDelUserMap.py:170: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nPages\\materialPage\\warehouseLocation_page.py:17: in click_add_button\n    self.click(By.XPATH, '//p[text()=\"新增\"]')\nPages\\base_page.py:45: in click\n    element = WebDriverWait(self.driver, wait_time).until(\nmyenv\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:129: in until\n    value = method(self._driver)\nmyenv\\lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py:622: in _predicate\n    target = driver.find_element(*target)  # grab element at locator\nmyenv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:914: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\nmyenv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:447: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000023BD48FF880>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"invalid session id\",\"message\":\"invalid session id: session deleted as the...ff6344564d8+10728]\\\\n\\\\tBaseThreadInitThunk [0x0x7ff992b87374+20]\\\\n\\\\tRtlUserThreadStart [0x0x7ff99357cc91+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id: session deleted as the browser has closed the connection\nE       from disconnected: Unable to receive message from renderer\nE         (Session info: chrome=137.0.7151.69)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x7ff634466f65+78965]\nE       \tGetHandleVerifier [0x0x7ff634466fc0+79056]\nE       \t(No symbol) [0x0x7ff6341f9dda]\nE       \t(No symbol) [0x0x7ff6341e727c]\nE       \t(No symbol) [0x0x7ff6341e6f6a]\nE       \t(No symbol) [0x0x7ff6341e4b38]\nE       \t(No symbol) [0x0x7ff6341e559f]\nE       \t(No symbol) [0x0x7ff634201184]\nE       \t(No symbol) [0x0x7ff63420482c]\nE       \t(No symbol) [0x0x7ff6342048ff]\nE       \t(No symbol) [0x0x7ff63424fb97]\nE       \t(No symbol) [0x0x7ff63425059c]\nE       \t(No symbol) [0x0x7ff6342a3f37]\nE       \t(No symbol) [0x0x7ff6342786af]\nE       \t(No symbol) [0x0x7ff6342a0dbe]\nE       \t(No symbol) [0x0x7ff634278443]\nE       \t(No symbol) [0x0x7ff634241311]\nE       \t(No symbol) [0x0x7ff6342420a3]\nE       \tGetHandleVerifier [0x0x7ff63471e26d+2926461]\nE       \tGetHandleVerifier [0x0x7ff634718993+2903715]\nE       \tGetHandleVerifier [0x0x7ff634736aed+3026941]\nE       \tGetHandleVerifier [0x0x7ff6344816fe+187406]\nE       \tGetHandleVerifier [0x0x7ff6344896ef+220159]\nE       \tGetHandleVerifier [0x0x7ff63446faf4+114692]\nE       \tGetHandleVerifier [0x0x7ff63446fca9+115129]\nE       \tGetHandleVerifier [0x0x7ff6344564d8+10728]\nE       \tBaseThreadInitThunk [0x0x7ff992b87374+20]\nE       \tRtlUserThreadStart [0x0x7ff99357cc91+33]\n\nmyenv\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: InvalidSessionIdException","steps":[],"attachments":[{"uid":"da44227b58711e2e","name":"test_item_addsuccess1_failure","source":"da44227b58711e2e.png","type":"image/png","size":30845},{"uid":"ab5796470d9a055f","name":"test_item_addsuccess1_source","source":"ab5796470d9a055f.html","type":"text/html","size":182301},{"uid":"ae26417af47d3595","name":"test_item_addsuccess1_failure","source":"ae26417af47d3595.png","type":"image/png","size":21324},{"uid":"a24a82cc2030650d","name":"test_item_addsuccess1_source","source":"a24a82cc2030650d.html","type":"text/html","size":179447},{"uid":"f7d0d045f00c8175","name":"test_item_addsuccess1_failure","source":"f7d0d045f00c8175.png","type":"image/png","size":21324},{"uid":"29f41449a6bb01a","name":"test_item_addsuccess1_source","source":"29f41449a6bb01a.html","type":"text/html","size":179447},{"uid":"f0737363089057e8","name":"test_item_addsuccess1_failure","source":"f0737363089057e8.png","type":"image/png","size":30845},{"uid":"ef06e7ec053e54da","name":"test_item_addsuccess1_source","source":"ef06e7ec053e54da.html","type":"text/html","size":182301},{"uid":"c86d01f08260cb78","name":"test_item_addsuccess1_failure","source":"c86d01f08260cb78.png","type":"image/png","size":22036},{"uid":"bdb99174a9359cb3","name":"test_item_addsuccess1_source","source":"bdb99174a9359cb3.html","type":"text/html","size":179437},{"uid":"100c3ccd1e4b6757","name":"test_item_addsuccess1_failure","source":"100c3ccd1e4b6757.png","type":"image/png","size":21324},{"uid":"a76628d6cfc12176","name":"test_item_addsuccess1_source","source":"a76628d6cfc12176.html","type":"text/html","size":179447},{"uid":"a448a562a0a2836","name":"test_item_addsuccess1_failure","source":"a448a562a0a2836.png","type":"image/png","size":30859},{"uid":"92cd54bb9b948d2a","name":"test_item_addsuccess1_source","source":"92cd54bb9b948d2a.html","type":"text/html","size":182301},{"uid":"fca12e6d13c51aeb","name":"test_item_addsuccess1_failure","source":"fca12e6d13c51aeb.png","type":"image/png","size":22036},{"uid":"9453c70dc997a910","name":"test_item_addsuccess1_source","source":"9453c70dc997a910.html","type":"text/html","size":179437},{"uid":"7d4d689d5b677cee","name":"test_item_addsuccess1_failure","source":"7d4d689d5b677cee.png","type":"image/png","size":30845},{"uid":"9e2921959e424d1b","name":"test_item_addsuccess1_source","source":"9e2921959e424d1b.html","type":"text/html","size":182301},{"uid":"46d8490d4d316535","name":"test_item_addsuccess1_failure","source":"46d8490d4d316535.png","type":"image/png","size":30845},{"uid":"5900007acdaabb6a","name":"test_item_addsuccess1_source","source":"5900007acdaabb6a.html","type":"text/html","size":182301},{"uid":"e6fd20b547b756d8","name":"test_item_addsuccess1_failure","source":"e6fd20b547b756d8.png","type":"image/png","size":22036},{"uid":"18bb44393b37db50","name":"test_item_addsuccess1_source","source":"18bb44393b37db50.html","type":"text/html","size":179437},{"uid":"c46f973c65bdd05e","name":"test_item_addsuccess1_failure","source":"c46f973c65bdd05e.png","type":"image/png","size":30845},{"uid":"c53a1bfa9ed58d39","name":"test_item_addsuccess1_source","source":"c53a1bfa9ed58d39.html","type":"text/html","size":182301},{"uid":"e896835e6c7a28f2","name":"test_item_addsuccess1_failure","source":"e896835e6c7a28f2.png","type":"image/png","size":30845},{"uid":"3fbd451e9ffbae01","name":"test_item_addsuccess1_source","source":"3fbd451e9ffbae01.html","type":"text/html","size":182301},{"uid":"1f2d6700c844693b","name":"test_item_addsuccess1_failure","source":"1f2d6700c844693b.png","type":"image/png","size":30845},{"uid":"4a4abc4fbf6d79ad","name":"test_item_addsuccess1_source","source":"4a4abc4fbf6d79ad.html","type":"text/html","size":182301},{"uid":"43dcd316d8edc642","name":"test_item_addsuccess1_failure","source":"43dcd316d8edc642.png","type":"image/png","size":30845},{"uid":"cd1075cf088f1c3","name":"test_item_addsuccess1_source","source":"cd1075cf088f1c3.html","type":"text/html","size":182301},{"uid":"2f8d71ba33d1a2c4","name":"test_item_addsuccess1_failure","source":"2f8d71ba33d1a2c4.png","type":"image/png","size":22036},{"uid":"c8233eaef434137b","name":"test_item_addsuccess1_source","source":"c8233eaef434137b.html","type":"text/html","size":179437},{"uid":"e3bbedfeacf03f4b","name":"test_item_addsuccess1_failure","source":"e3bbedfeacf03f4b.png","type":"image/png","size":22036},{"uid":"ab684f5b8a29fa23","name":"test_item_addsuccess1_source","source":"ab684f5b8a29fa23.html","type":"text/html","size":179437},{"uid":"54621d5ba0e8a69","name":"test_item_addsuccess1_failure","source":"54621d5ba0e8a69.png","type":"image/png","size":30859},{"uid":"f0bc01b9b53fa4be","name":"test_item_addsuccess1_source","source":"f0bc01b9b53fa4be.html","type":"text/html","size":182301},{"uid":"e3ada1e50e813c63","name":"test_item_addsuccess1_failure","source":"e3ada1e50e813c63.png","type":"image/png","size":30845},{"uid":"1ec8a50389b61ebe","name":"test_item_addsuccess1_source","source":"1ec8a50389b61ebe.html","type":"text/html","size":182301},{"uid":"ccd929bd9995efb8","name":"test_item_addsuccess1_failure","source":"ccd929bd9995efb8.png","type":"image/png","size":30845},{"uid":"c22cd09ec21bfb97","name":"test_item_addsuccess1_source","source":"c22cd09ec21bfb97.html","type":"text/html","size":182301},{"uid":"7ca4227fe1856055","name":"test_item_addsuccess1_failure","source":"7ca4227fe1856055.png","type":"image/png","size":22036},{"uid":"1219962635ed9e6d","name":"test_item_addsuccess1_source","source":"1219962635ed9e6d.html","type":"text/html","size":179437},{"uid":"166ae9d7e8ddd0fe","name":"log","source":"166ae9d7e8ddd0fe.txt","type":"text/plain","size":887}],"parameters":[],"stepsCount":0,"attachmentStep":false,"hasContent":true,"attachmentsCount":43,"shouldDisplayMessage":true},"afterStages":[{"name":"login_to_item::0","time":{"start":1755102770110,"stop":1755102772132,"duration":2022},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentStep":false,"hasContent":false,"attachmentsCount":0,"shouldDisplayMessage":false}],"labels":[{"name":"feature","value":"用户与物料员测试用例"},{"name":"story","value":"添加测试数据"},{"name":"parentSuite","value":"Tests.test_material"},{"name":"suite","value":"test_materialDelUserMap"},{"name":"subSuite","value":"TestItemPage"},{"name":"host","value":"WIN-20240820MJV"},{"name":"thread","value":"3232-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"Tests.test_material.test_materialDelUserMap"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":[]},"source":"8040cc97e1a5cb84.json","parameterValues":[]}