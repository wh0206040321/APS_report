{"uid":"97f28f43acb161bf","name":"test_item_addall","fullName":"Tests.test_items.test_item.TestItemPage#test_item_addall","historyId":"75c5e7035234a10dea40dd1b814d2f7f","time":{"start":1761136234936,"stop":1761136370828,"duration":135892},"status":"broken","statusMessage":"selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: stale element not found in the current frame\n  (Session info: chrome=137.0.7151.69); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#stale-element-reference-exception\nStacktrace:\n\tGetHandleVerifier [0x0x7ff6e4aa6f65+78965]\n\tGetHandleVerifier [0x0x7ff6e4aa6fc0+79056]\n\t(No symbol) [0x0x7ff6e4839dda]\n\t(No symbol) [0x0x7ff6e48417c1]\n\t(No symbol) [0x0x7ff6e484482c]\n\t(No symbol) [0x0x7ff6e48448ff]\n\t(No symbol) [0x0x7ff6e48924ed]\n\t(No symbol) [0x0x7ff6e488564e]\n\t(No symbol) [0x0x7ff6e48b866a]\n\t(No symbol) [0x0x7ff6e4882b56]\n\t(No symbol) [0x0x7ff6e48b8880]\n\t(No symbol) [0x0x7ff6e48e0dbe]\n\t(No symbol) [0x0x7ff6e48b8443]\n\t(No symbol) [0x0x7ff6e4881311]\n\t(No symbol) [0x0x7ff6e48820a3]\n\tGetHandleVerifier [0x0x7ff6e4d5e26d+2926461]\n\tGetHandleVerifier [0x0x7ff6e4d58993+2903715]\n\tGetHandleVerifier [0x0x7ff6e4d76aed+3026941]\n\tGetHandleVerifier [0x0x7ff6e4ac16fe+187406]\n\tGetHandleVerifier [0x0x7ff6e4ac96ef+220159]\n\tGetHandleVerifier [0x0x7ff6e4aafaf4+114692]\n\tGetHandleVerifier [0x0x7ff6e4aafca9+115129]\n\tGetHandleVerifier [0x0x7ff6e4a964d8+10728]\n\tBaseThreadInitThunk [0x0x7ffee1537374+20]\n\tRtlUserThreadStart [0x0x7ffee1a7cc91+33]","statusTrace":"self = <test_items.test_item.TestItemPage object at 0x0000027FE58E9F90>, login_to_item = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"76ccb075ba82591d1056655fc70fe4a0\")>\n\n    @allure.story(\"输入全部数据，添加保存成功\")\n    # @pytest.mark.run(order=1)\n    def test_item_addall(self, login_to_item):\n        driver = login_to_item  # WebDriver 实例\n        item = ItemPage(driver)  # 用 driver 初始化 ItemPage\n        adds = AddsPages(driver)\n        input_value = '11测试全部数据'\n        item.click_add_button()\n        custom_xpath_list = [\n            f'//label[text()=\"自定义字符{i}\"]/following-sibling::div//input'\n            for i in range(1, 21)\n        ]\n        text_list = [\n            '//label[text()=\"物料代码\"]/following-sibling::div//input',\n            '//label[text()=\"物料名称\"]/following-sibling::div//input',\n            '//label[text()=\"工作分割比率\"]/following-sibling::div//input',\n            '//label[text()=\"备注\"]/following-sibling::div//input',\n        ]\n        text_list.extend(custom_xpath_list)\n        adds.batch_modify_input(text_list, input_value)\n    \n    \n        value_bos = '//div[@class=\"vxe-modal--body\"]//table[@class=\"vxe-table--body\"]//tr[1]/td[3]'\n        spe_xpath_list = [\n            f'//label[text()=\"生产特征{i}\"]/following-sibling::div//i'\n            for i in range(1, 11)\n        ]\n        box_list = [\n            '//label[text()=\"物料组代码\"]/following-sibling::div//i',\n            '//label[text()=\"BASE物料\"]/following-sibling::div//i',\n            '//label[text()=\"资源\"]/following-sibling::div//i',\n            '//label[text()=\"物料切换对象\"]/following-sibling::div//i',\n        ]\n        box_list.extend(spe_xpath_list)\n        adds.batch_modify_dialog_box(box_list, value_bos)\n    \n    \n        code_value = '//span[text()=\"AdvanceAlongResourceWorkingTime\"]'\n        code_list = [\n            '//label[text()=\"关联条件\"]/following-sibling::div//i',\n            '//label[text()=\"关联时工作输出指令排序表达式\"]/following-sibling::div//i',\n            '//label[text()=\"关联时工作输入指令排序表达式\"]/following-sibling::div//i',\n            '//label[text()=\"库存MIN2日期表达式\"]/following-sibling::div//i',\n            '//label[text()=\"库存MIN3日期表达式\"]/following-sibling::div//i',\n            '//label[text()=\"目标库存MIN日期表达式\"]/following-sibling::div//i',\n            '//label[text()=\"库存有效期限\"]/following-sibling::div//i',\n        ]\n        adds.batch_modify_code_box(code_list, code_value)\n    \n        select_list = [\n            {\"select\": '//label[text()=\"物料种类\"]/following-sibling::div//i', \"value\": '//li[text()=\"原材料\"]'},\n            {\"select\": '//label[text()=\"自动补充标志\"]/following-sibling::div//i', \"value\": '//li[text()=\"是(库存+1对1制造)\"]'},\n            {\"select\": '//label[text()=\"备料方法\"]/following-sibling::div//i', \"value\": '//li[text()=\"采购优先\"]'},\n            {\"select\": '//label[text()=\"显示颜色\"]/following-sibling::div//i', \"value\": '//span[text()=\"RGB(128,128,255)\"]'},\n            {\"select\": '//label[text()=\"物料切换方法\"]/following-sibling::div//i', \"value\": '//li[text()=\"混存\"]'},\n            {\"select\": '//label[text()=\"物料制约标志\"]/following-sibling::div//i', \"value\": '//label[text()=\"物料制约标志\"]/following-sibling::div//div[@class=\"ivu-select-dropdown\"]//li[text()=\"是\"]'},\n            {\"select\": '//label[text()=\"库存增减方法\"]/following-sibling::div//i', \"value\": '//li[text()=\"线形/梯形\"]'},\n            {\"select\": '//label[text()=\"制造批量大小计算方法\"]/following-sibling::div//i', \"value\": '//li[text()=\"均等\"]'},\n            {\"select\": '//label[text()=\"制造批量尾数为末尾\"]/following-sibling::div//i', \"value\": '//label[text()=\"制造批量尾数为末尾\"]/following-sibling::div//div[@class=\"ivu-select-dropdown\"]//li[text()=\"否\"]'},\n            {\"select\": '//label[text()=\"采购批量计算方法\"]/following-sibling::div//i', \"value\": '//label[text()=\"采购批量计算方法\"]/following-sibling::div//div[@class=\"ivu-select-dropdown\"]//li[text()=\"均等\"]'},\n            {\"select\": '//label[text()=\"采购批量尾数为末尾\"]/following-sibling::div//i', \"value\": '//label[text()=\"采购批量尾数为末尾\"]/following-sibling::div//div[@class=\"ivu-select-dropdown\"]//li[text()=\"否\"]'},\n        ]\n        adds.batch_modify_select_input(select_list)\n    \n        input_num_value = '1'\n        num_xpath_list1 = [\n            f'//label[text()=\"数值特征{i}\"]/following-sibling::div//input'\n            for i in range(1, 6)\n        ]\n        num_xpath_list2 = [\n            f'//label[text()=\"自定义数值{i}\"]/following-sibling::div//input'\n            for i in range(1, 21)\n        ]\n        num_xpath_list3 = [\n            f'//label[text()=\"{label}{i}\"]/following-sibling::div//input'\n            for i in range(1, 8)\n            for label in [\"单批上限\", \"合批上限\", \"合批期间\"]\n        ]\n    \n        num_list = [\n            '//label[text()=\"物料优先度\"]/following-sibling::div//input',\n            '//label[text()=\"单价\"]/following-sibling::div//input',\n            '//label[text()=\"制造效率\"]/following-sibling::div//input',\n            '//label[text()=\"显示顺序\"]/following-sibling::div//input',\n            '//label[text()=\"库存MIN\"]/following-sibling::div//input',\n            '//label[text()=\"库存MIN2\"]/following-sibling::div//input',\n            '//label[text()=\"库存MIN3\"]/following-sibling::div//input',\n            '//label[text()=\"预留\"]/following-sibling::div//input',\n            '//label[text()=\"目标库存MIN\"]/following-sibling::div//input',\n            '//label[text()=\"库存MAX\"]/following-sibling::div//input',\n            '//label[text()=\"制造批量MAX\"]/following-sibling::div//input',\n            '//label[text()=\"制造批量MIN\"]/following-sibling::div//input',\n            '//label[text()=\"制造批量单位\"]/following-sibling::div//input',\n            '//label[text()=\"采购批量MAX\"]/following-sibling::div//input',\n            '//label[text()=\"采购批量MIN\"]/following-sibling::div//input',\n            '//label[text()=\"采购批量单位\"]/following-sibling::div//input',\n            '//label[text()=\"工作分割数量\"]/following-sibling::div//input',\n            '//label[text()=\"工作并行数量\"]/following-sibling::div//input',\n            '//label[text()=\"工作批量MIN\"]/following-sibling::div//input',\n            '//label[text()=\"工作批量MAX\"]/following-sibling::div//input',\n            '//label[text()=\"工作批量单位\"]/following-sibling::div//input',\n        ]\n        num_list.extend(num_xpath_list1 + num_xpath_list2 + num_xpath_list3)\n        adds.batch_modify_input(num_list, input_num_value)\n    \n    \n        time_xpath_list = [\n            f'//label[text()=\"自定义日期{i}\"]/following-sibling::div//input'\n            for i in range(1, 11)\n        ]\n        adds.batch_modify_time_input(time_xpath_list)\n    \n        box_input_list = [xpath.replace(\"//i\", \"//input\") for xpath in box_list]\n        code_input_list = [xpath.replace(\"//i\", \"//input\") for xpath in code_list]\n        select_input_list = [item[\"select\"].replace(\"//i\", \"//input\") for item in select_list]\n        all_value = text_list + box_input_list + code_input_list + select_input_list + num_list + time_xpath_list\n        len_num = len(all_value)\n        before_all_value = adds.batch_acquisition_input(all_value)\n        item.click_button('(//div[@class=\"h-40px flex-justify-end flex-align-items-end b-t-s-d9e3f3\"])[1]//span[text()=\"确定\"]')\n        sleep(1)\n        driver.refresh()\n        sleep(5)\n        num = adds.go_settings_page()\n        sleep(2)\n>       item.enter_texts(\n            '//p[text()=\"物料代码\"]/ancestor::div[2]//input', input_value\n        )\n\nTests\\test_items\\test_item.py:1088: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nPages\\itemsPage\\item_page.py:38: in enter_texts\n    self.enter_text(By.XPATH, xpath, text)\nPages\\base_page.py:70: in enter_text\n    element.clear()  # 清空文本框\nmyenv\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:156: in clear\n    self._execute(Command.CLEAR_ELEMENT)\nmyenv\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:574: in _execute\n    return self._parent.execute(command, params)\nmyenv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:447: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000027FE60A7820>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"stale element reference\",\"message\":\"stale element reference: stale elemen...ff6e4a964d8+10728]\\\\n\\\\tBaseThreadInitThunk [0x0x7ffee1537374+20]\\\\n\\\\tRtlUserThreadStart [0x0x7ffee1a7cc91+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: stale element not found in the current frame\nE         (Session info: chrome=137.0.7151.69); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#stale-element-reference-exception\nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x7ff6e4aa6f65+78965]\nE       \tGetHandleVerifier [0x0x7ff6e4aa6fc0+79056]\nE       \t(No symbol) [0x0x7ff6e4839dda]\nE       \t(No symbol) [0x0x7ff6e48417c1]\nE       \t(No symbol) [0x0x7ff6e484482c]\nE       \t(No symbol) [0x0x7ff6e48448ff]\nE       \t(No symbol) [0x0x7ff6e48924ed]\nE       \t(No symbol) [0x0x7ff6e488564e]\nE       \t(No symbol) [0x0x7ff6e48b866a]\nE       \t(No symbol) [0x0x7ff6e4882b56]\nE       \t(No symbol) [0x0x7ff6e48b8880]\nE       \t(No symbol) [0x0x7ff6e48e0dbe]\nE       \t(No symbol) [0x0x7ff6e48b8443]\nE       \t(No symbol) [0x0x7ff6e4881311]\nE       \t(No symbol) [0x0x7ff6e48820a3]\nE       \tGetHandleVerifier [0x0x7ff6e4d5e26d+2926461]\nE       \tGetHandleVerifier [0x0x7ff6e4d58993+2903715]\nE       \tGetHandleVerifier [0x0x7ff6e4d76aed+3026941]\nE       \tGetHandleVerifier [0x0x7ff6e4ac16fe+187406]\nE       \tGetHandleVerifier [0x0x7ff6e4ac96ef+220159]\nE       \tGetHandleVerifier [0x0x7ff6e4aafaf4+114692]\nE       \tGetHandleVerifier [0x0x7ff6e4aafca9+115129]\nE       \tGetHandleVerifier [0x0x7ff6e4a964d8+10728]\nE       \tBaseThreadInitThunk [0x0x7ffee1537374+20]\nE       \tRtlUserThreadStart [0x0x7ffee1a7cc91+33]\n\nmyenv\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: StaleElementReferenceException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"login_to_item","time":{"start":1761136224721,"stop":1761136234935,"duration":10214},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false,"attachmentsCount":0}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: stale element not found in the current frame\n  (Session info: chrome=137.0.7151.69); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#stale-element-reference-exception\nStacktrace:\n\tGetHandleVerifier [0x0x7ff6e4aa6f65+78965]\n\tGetHandleVerifier [0x0x7ff6e4aa6fc0+79056]\n\t(No symbol) [0x0x7ff6e4839dda]\n\t(No symbol) [0x0x7ff6e48417c1]\n\t(No symbol) [0x0x7ff6e484482c]\n\t(No symbol) [0x0x7ff6e48448ff]\n\t(No symbol) [0x0x7ff6e48924ed]\n\t(No symbol) [0x0x7ff6e488564e]\n\t(No symbol) [0x0x7ff6e48b866a]\n\t(No symbol) [0x0x7ff6e4882b56]\n\t(No symbol) [0x0x7ff6e48b8880]\n\t(No symbol) [0x0x7ff6e48e0dbe]\n\t(No symbol) [0x0x7ff6e48b8443]\n\t(No symbol) [0x0x7ff6e4881311]\n\t(No symbol) [0x0x7ff6e48820a3]\n\tGetHandleVerifier [0x0x7ff6e4d5e26d+2926461]\n\tGetHandleVerifier [0x0x7ff6e4d58993+2903715]\n\tGetHandleVerifier [0x0x7ff6e4d76aed+3026941]\n\tGetHandleVerifier [0x0x7ff6e4ac16fe+187406]\n\tGetHandleVerifier [0x0x7ff6e4ac96ef+220159]\n\tGetHandleVerifier [0x0x7ff6e4aafaf4+114692]\n\tGetHandleVerifier [0x0x7ff6e4aafca9+115129]\n\tGetHandleVerifier [0x0x7ff6e4a964d8+10728]\n\tBaseThreadInitThunk [0x0x7ffee1537374+20]\n\tRtlUserThreadStart [0x0x7ffee1a7cc91+33]","statusTrace":"self = <test_items.test_item.TestItemPage object at 0x0000027FE58E9F90>, login_to_item = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"76ccb075ba82591d1056655fc70fe4a0\")>\n\n    @allure.story(\"输入全部数据，添加保存成功\")\n    # @pytest.mark.run(order=1)\n    def test_item_addall(self, login_to_item):\n        driver = login_to_item  # WebDriver 实例\n        item = ItemPage(driver)  # 用 driver 初始化 ItemPage\n        adds = AddsPages(driver)\n        input_value = '11测试全部数据'\n        item.click_add_button()\n        custom_xpath_list = [\n            f'//label[text()=\"自定义字符{i}\"]/following-sibling::div//input'\n            for i in range(1, 21)\n        ]\n        text_list = [\n            '//label[text()=\"物料代码\"]/following-sibling::div//input',\n            '//label[text()=\"物料名称\"]/following-sibling::div//input',\n            '//label[text()=\"工作分割比率\"]/following-sibling::div//input',\n            '//label[text()=\"备注\"]/following-sibling::div//input',\n        ]\n        text_list.extend(custom_xpath_list)\n        adds.batch_modify_input(text_list, input_value)\n    \n    \n        value_bos = '//div[@class=\"vxe-modal--body\"]//table[@class=\"vxe-table--body\"]//tr[1]/td[3]'\n        spe_xpath_list = [\n            f'//label[text()=\"生产特征{i}\"]/following-sibling::div//i'\n            for i in range(1, 11)\n        ]\n        box_list = [\n            '//label[text()=\"物料组代码\"]/following-sibling::div//i',\n            '//label[text()=\"BASE物料\"]/following-sibling::div//i',\n            '//label[text()=\"资源\"]/following-sibling::div//i',\n            '//label[text()=\"物料切换对象\"]/following-sibling::div//i',\n        ]\n        box_list.extend(spe_xpath_list)\n        adds.batch_modify_dialog_box(box_list, value_bos)\n    \n    \n        code_value = '//span[text()=\"AdvanceAlongResourceWorkingTime\"]'\n        code_list = [\n            '//label[text()=\"关联条件\"]/following-sibling::div//i',\n            '//label[text()=\"关联时工作输出指令排序表达式\"]/following-sibling::div//i',\n            '//label[text()=\"关联时工作输入指令排序表达式\"]/following-sibling::div//i',\n            '//label[text()=\"库存MIN2日期表达式\"]/following-sibling::div//i',\n            '//label[text()=\"库存MIN3日期表达式\"]/following-sibling::div//i',\n            '//label[text()=\"目标库存MIN日期表达式\"]/following-sibling::div//i',\n            '//label[text()=\"库存有效期限\"]/following-sibling::div//i',\n        ]\n        adds.batch_modify_code_box(code_list, code_value)\n    \n        select_list = [\n            {\"select\": '//label[text()=\"物料种类\"]/following-sibling::div//i', \"value\": '//li[text()=\"原材料\"]'},\n            {\"select\": '//label[text()=\"自动补充标志\"]/following-sibling::div//i', \"value\": '//li[text()=\"是(库存+1对1制造)\"]'},\n            {\"select\": '//label[text()=\"备料方法\"]/following-sibling::div//i', \"value\": '//li[text()=\"采购优先\"]'},\n            {\"select\": '//label[text()=\"显示颜色\"]/following-sibling::div//i', \"value\": '//span[text()=\"RGB(128,128,255)\"]'},\n            {\"select\": '//label[text()=\"物料切换方法\"]/following-sibling::div//i', \"value\": '//li[text()=\"混存\"]'},\n            {\"select\": '//label[text()=\"物料制约标志\"]/following-sibling::div//i', \"value\": '//label[text()=\"物料制约标志\"]/following-sibling::div//div[@class=\"ivu-select-dropdown\"]//li[text()=\"是\"]'},\n            {\"select\": '//label[text()=\"库存增减方法\"]/following-sibling::div//i', \"value\": '//li[text()=\"线形/梯形\"]'},\n            {\"select\": '//label[text()=\"制造批量大小计算方法\"]/following-sibling::div//i', \"value\": '//li[text()=\"均等\"]'},\n            {\"select\": '//label[text()=\"制造批量尾数为末尾\"]/following-sibling::div//i', \"value\": '//label[text()=\"制造批量尾数为末尾\"]/following-sibling::div//div[@class=\"ivu-select-dropdown\"]//li[text()=\"否\"]'},\n            {\"select\": '//label[text()=\"采购批量计算方法\"]/following-sibling::div//i', \"value\": '//label[text()=\"采购批量计算方法\"]/following-sibling::div//div[@class=\"ivu-select-dropdown\"]//li[text()=\"均等\"]'},\n            {\"select\": '//label[text()=\"采购批量尾数为末尾\"]/following-sibling::div//i', \"value\": '//label[text()=\"采购批量尾数为末尾\"]/following-sibling::div//div[@class=\"ivu-select-dropdown\"]//li[text()=\"否\"]'},\n        ]\n        adds.batch_modify_select_input(select_list)\n    \n        input_num_value = '1'\n        num_xpath_list1 = [\n            f'//label[text()=\"数值特征{i}\"]/following-sibling::div//input'\n            for i in range(1, 6)\n        ]\n        num_xpath_list2 = [\n            f'//label[text()=\"自定义数值{i}\"]/following-sibling::div//input'\n            for i in range(1, 21)\n        ]\n        num_xpath_list3 = [\n            f'//label[text()=\"{label}{i}\"]/following-sibling::div//input'\n            for i in range(1, 8)\n            for label in [\"单批上限\", \"合批上限\", \"合批期间\"]\n        ]\n    \n        num_list = [\n            '//label[text()=\"物料优先度\"]/following-sibling::div//input',\n            '//label[text()=\"单价\"]/following-sibling::div//input',\n            '//label[text()=\"制造效率\"]/following-sibling::div//input',\n            '//label[text()=\"显示顺序\"]/following-sibling::div//input',\n            '//label[text()=\"库存MIN\"]/following-sibling::div//input',\n            '//label[text()=\"库存MIN2\"]/following-sibling::div//input',\n            '//label[text()=\"库存MIN3\"]/following-sibling::div//input',\n            '//label[text()=\"预留\"]/following-sibling::div//input',\n            '//label[text()=\"目标库存MIN\"]/following-sibling::div//input',\n            '//label[text()=\"库存MAX\"]/following-sibling::div//input',\n            '//label[text()=\"制造批量MAX\"]/following-sibling::div//input',\n            '//label[text()=\"制造批量MIN\"]/following-sibling::div//input',\n            '//label[text()=\"制造批量单位\"]/following-sibling::div//input',\n            '//label[text()=\"采购批量MAX\"]/following-sibling::div//input',\n            '//label[text()=\"采购批量MIN\"]/following-sibling::div//input',\n            '//label[text()=\"采购批量单位\"]/following-sibling::div//input',\n            '//label[text()=\"工作分割数量\"]/following-sibling::div//input',\n            '//label[text()=\"工作并行数量\"]/following-sibling::div//input',\n            '//label[text()=\"工作批量MIN\"]/following-sibling::div//input',\n            '//label[text()=\"工作批量MAX\"]/following-sibling::div//input',\n            '//label[text()=\"工作批量单位\"]/following-sibling::div//input',\n        ]\n        num_list.extend(num_xpath_list1 + num_xpath_list2 + num_xpath_list3)\n        adds.batch_modify_input(num_list, input_num_value)\n    \n    \n        time_xpath_list = [\n            f'//label[text()=\"自定义日期{i}\"]/following-sibling::div//input'\n            for i in range(1, 11)\n        ]\n        adds.batch_modify_time_input(time_xpath_list)\n    \n        box_input_list = [xpath.replace(\"//i\", \"//input\") for xpath in box_list]\n        code_input_list = [xpath.replace(\"//i\", \"//input\") for xpath in code_list]\n        select_input_list = [item[\"select\"].replace(\"//i\", \"//input\") for item in select_list]\n        all_value = text_list + box_input_list + code_input_list + select_input_list + num_list + time_xpath_list\n        len_num = len(all_value)\n        before_all_value = adds.batch_acquisition_input(all_value)\n        item.click_button('(//div[@class=\"h-40px flex-justify-end flex-align-items-end b-t-s-d9e3f3\"])[1]//span[text()=\"确定\"]')\n        sleep(1)\n        driver.refresh()\n        sleep(5)\n        num = adds.go_settings_page()\n        sleep(2)\n>       item.enter_texts(\n            '//p[text()=\"物料代码\"]/ancestor::div[2]//input', input_value\n        )\n\nTests\\test_items\\test_item.py:1088: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nPages\\itemsPage\\item_page.py:38: in enter_texts\n    self.enter_text(By.XPATH, xpath, text)\nPages\\base_page.py:70: in enter_text\n    element.clear()  # 清空文本框\nmyenv\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:156: in clear\n    self._execute(Command.CLEAR_ELEMENT)\nmyenv\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:574: in _execute\n    return self._parent.execute(command, params)\nmyenv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:447: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000027FE60A7820>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"stale element reference\",\"message\":\"stale element reference: stale elemen...ff6e4a964d8+10728]\\\\n\\\\tBaseThreadInitThunk [0x0x7ffee1537374+20]\\\\n\\\\tRtlUserThreadStart [0x0x7ffee1a7cc91+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: stale element not found in the current frame\nE         (Session info: chrome=137.0.7151.69); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#stale-element-reference-exception\nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x7ff6e4aa6f65+78965]\nE       \tGetHandleVerifier [0x0x7ff6e4aa6fc0+79056]\nE       \t(No symbol) [0x0x7ff6e4839dda]\nE       \t(No symbol) [0x0x7ff6e48417c1]\nE       \t(No symbol) [0x0x7ff6e484482c]\nE       \t(No symbol) [0x0x7ff6e48448ff]\nE       \t(No symbol) [0x0x7ff6e48924ed]\nE       \t(No symbol) [0x0x7ff6e488564e]\nE       \t(No symbol) [0x0x7ff6e48b866a]\nE       \t(No symbol) [0x0x7ff6e4882b56]\nE       \t(No symbol) [0x0x7ff6e48b8880]\nE       \t(No symbol) [0x0x7ff6e48e0dbe]\nE       \t(No symbol) [0x0x7ff6e48b8443]\nE       \t(No symbol) [0x0x7ff6e4881311]\nE       \t(No symbol) [0x0x7ff6e48820a3]\nE       \tGetHandleVerifier [0x0x7ff6e4d5e26d+2926461]\nE       \tGetHandleVerifier [0x0x7ff6e4d58993+2903715]\nE       \tGetHandleVerifier [0x0x7ff6e4d76aed+3026941]\nE       \tGetHandleVerifier [0x0x7ff6e4ac16fe+187406]\nE       \tGetHandleVerifier [0x0x7ff6e4ac96ef+220159]\nE       \tGetHandleVerifier [0x0x7ff6e4aafaf4+114692]\nE       \tGetHandleVerifier [0x0x7ff6e4aafca9+115129]\nE       \tGetHandleVerifier [0x0x7ff6e4a964d8+10728]\nE       \tBaseThreadInitThunk [0x0x7ffee1537374+20]\nE       \tRtlUserThreadStart [0x0x7ffee1a7cc91+33]\n\nmyenv\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: StaleElementReferenceException","steps":[],"attachments":[{"uid":"e3c338a397e66a28","name":"test_item_addall_failure","source":"e3c338a397e66a28.png","type":"image/png","size":105764},{"uid":"58ac9fbaceb84395","name":"test_item_addall_source","source":"58ac9fbaceb84395.html","type":"text/html","size":1438366},{"uid":"9e345d790d00d626","name":"log","source":"9e345d790d00d626.txt","type":"text/plain","size":35787}],"parameters":[],"stepsCount":0,"hasContent":true,"attachmentStep":false,"shouldDisplayMessage":true,"attachmentsCount":3},"afterStages":[{"name":"login_to_item::0","time":{"start":1761136371135,"stop":1761136373353,"duration":2218},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false,"attachmentsCount":0}],"labels":[{"name":"feature","value":"物料表测试用例"},{"name":"story","value":"输入全部数据，添加保存成功"},{"name":"parentSuite","value":"Tests.test_items"},{"name":"suite","value":"test_item"},{"name":"subSuite","value":"TestItemPage"},{"name":"host","value":"WIN-20240820MJV"},{"name":"thread","value":"25856-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"Tests.test_items.test_item"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":[]},"source":"97f28f43acb161bf.json","parameterValues":[]}