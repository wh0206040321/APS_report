{"uid":"ea7a29057204c2c7","name":"test_coverage_selectcodesuccess","fullName":"Tests.test_items.test_coverage.TestCoveragePage#test_coverage_selectcodesuccess","historyId":"9d9fad53d2ebd471644ad342c06aeade","time":{"start":1755697008539,"stop":1755697018697,"duration":10158},"status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n\tGetHandleVerifier [0x0x7ff65f826f65+78965]\n\tGetHandleVerifier [0x0x7ff65f826fc0+79056]\n\t(No symbol) [0x0x7ff65f5b9dda]\n\t(No symbol) [0x0x7ff65f6102ea]\n\t(No symbol) [0x0x7ff65f61059c]\n\t(No symbol) [0x0x7ff65f663f37]\n\t(No symbol) [0x0x7ff65f6386af]\n\t(No symbol) [0x0x7ff65f660dbe]\n\t(No symbol) [0x0x7ff65f638443]\n\t(No symbol) [0x0x7ff65f601311]\n\t(No symbol) [0x0x7ff65f6020a3]\n\tGetHandleVerifier [0x0x7ff65fade26d+2926461]\n\tGetHandleVerifier [0x0x7ff65fad8993+2903715]\n\tGetHandleVerifier [0x0x7ff65faf6aed+3026941]\n\tGetHandleVerifier [0x0x7ff65f8416fe+187406]\n\tGetHandleVerifier [0x0x7ff65f8496ef+220159]\n\tGetHandleVerifier [0x0x7ff65f82faf4+114692]\n\tGetHandleVerifier [0x0x7ff65f82fca9+115129]\n\tGetHandleVerifier [0x0x7ff65f8164d8+10728]\n\tBaseThreadInitThunk [0x0x7ff81e357374+20]\n\tRtlUserThreadStart [0x0x7ff82035cc91+33]","statusTrace":"self = <test_items.test_coverage.TestCoveragePage object at 0x000001FBD9947550>\nlogin_to_coverage = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"582a379d5c455ab5c053864db85fa190\")>\n\n    @allure.story(\"查询资源成功\")\n    # @pytest.mark.run(order=1)\n    def test_coverage_selectcodesuccess(self, login_to_coverage):\n        driver = login_to_coverage  # WebDriver 实例\n        coverage = Coverage(driver)  # 用 driver 初始化 Coverage\n    \n>       resource = coverage.get_find_element_xpath('(//div[@id=\"canvasGird0\"]//table[@class=\"vxe-table--body\"])[1]//tr[2]/td[2]').text\n\nTests\\test_items\\test_coverage.py:657: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nPages\\itemsPage\\coverage_page.py:46: in get_find_element_xpath\n    return self.find_element(By.XPATH, xpath)\nPages\\base_page.py:28: in find_element\n    return WebDriverWait(self.driver, wait_time).until(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"582a379d5c455ab5c053864db85fa190\")>\nmethod = <function presence_of_element_located.<locals>._predicate at 0x000001FBD9F46560>, message = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        -----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x7ff65f826f65+78965]\nE       \tGetHandleVerifier [0x0x7ff65f826fc0+79056]\nE       \t(No symbol) [0x0x7ff65f5b9dda]\nE       \t(No symbol) [0x0x7ff65f6102ea]\nE       \t(No symbol) [0x0x7ff65f61059c]\nE       \t(No symbol) [0x0x7ff65f663f37]\nE       \t(No symbol) [0x0x7ff65f6386af]\nE       \t(No symbol) [0x0x7ff65f660dbe]\nE       \t(No symbol) [0x0x7ff65f638443]\nE       \t(No symbol) [0x0x7ff65f601311]\nE       \t(No symbol) [0x0x7ff65f6020a3]\nE       \tGetHandleVerifier [0x0x7ff65fade26d+2926461]\nE       \tGetHandleVerifier [0x0x7ff65fad8993+2903715]\nE       \tGetHandleVerifier [0x0x7ff65faf6aed+3026941]\nE       \tGetHandleVerifier [0x0x7ff65f8416fe+187406]\nE       \tGetHandleVerifier [0x0x7ff65f8496ef+220159]\nE       \tGetHandleVerifier [0x0x7ff65f82faf4+114692]\nE       \tGetHandleVerifier [0x0x7ff65f82fca9+115129]\nE       \tGetHandleVerifier [0x0x7ff65f8164d8+10728]\nE       \tBaseThreadInitThunk [0x0x7ff81e357374+20]\nE       \tRtlUserThreadStart [0x0x7ff82035cc91+33]\n\nmyenv\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:138: TimeoutException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"login_to_coverage","time":{"start":1755697000205,"stop":1755697008538,"duration":8333},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"attachmentStep":false,"hasContent":false,"stepsCount":0}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n\tGetHandleVerifier [0x0x7ff65f826f65+78965]\n\tGetHandleVerifier [0x0x7ff65f826fc0+79056]\n\t(No symbol) [0x0x7ff65f5b9dda]\n\t(No symbol) [0x0x7ff65f6102ea]\n\t(No symbol) [0x0x7ff65f61059c]\n\t(No symbol) [0x0x7ff65f663f37]\n\t(No symbol) [0x0x7ff65f6386af]\n\t(No symbol) [0x0x7ff65f660dbe]\n\t(No symbol) [0x0x7ff65f638443]\n\t(No symbol) [0x0x7ff65f601311]\n\t(No symbol) [0x0x7ff65f6020a3]\n\tGetHandleVerifier [0x0x7ff65fade26d+2926461]\n\tGetHandleVerifier [0x0x7ff65fad8993+2903715]\n\tGetHandleVerifier [0x0x7ff65faf6aed+3026941]\n\tGetHandleVerifier [0x0x7ff65f8416fe+187406]\n\tGetHandleVerifier [0x0x7ff65f8496ef+220159]\n\tGetHandleVerifier [0x0x7ff65f82faf4+114692]\n\tGetHandleVerifier [0x0x7ff65f82fca9+115129]\n\tGetHandleVerifier [0x0x7ff65f8164d8+10728]\n\tBaseThreadInitThunk [0x0x7ff81e357374+20]\n\tRtlUserThreadStart [0x0x7ff82035cc91+33]","statusTrace":"self = <test_items.test_coverage.TestCoveragePage object at 0x000001FBD9947550>\nlogin_to_coverage = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"582a379d5c455ab5c053864db85fa190\")>\n\n    @allure.story(\"查询资源成功\")\n    # @pytest.mark.run(order=1)\n    def test_coverage_selectcodesuccess(self, login_to_coverage):\n        driver = login_to_coverage  # WebDriver 实例\n        coverage = Coverage(driver)  # 用 driver 初始化 Coverage\n    \n>       resource = coverage.get_find_element_xpath('(//div[@id=\"canvasGird0\"]//table[@class=\"vxe-table--body\"])[1]//tr[2]/td[2]').text\n\nTests\\test_items\\test_coverage.py:657: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nPages\\itemsPage\\coverage_page.py:46: in get_find_element_xpath\n    return self.find_element(By.XPATH, xpath)\nPages\\base_page.py:28: in find_element\n    return WebDriverWait(self.driver, wait_time).until(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"582a379d5c455ab5c053864db85fa190\")>\nmethod = <function presence_of_element_located.<locals>._predicate at 0x000001FBD9F46560>, message = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        -----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x7ff65f826f65+78965]\nE       \tGetHandleVerifier [0x0x7ff65f826fc0+79056]\nE       \t(No symbol) [0x0x7ff65f5b9dda]\nE       \t(No symbol) [0x0x7ff65f6102ea]\nE       \t(No symbol) [0x0x7ff65f61059c]\nE       \t(No symbol) [0x0x7ff65f663f37]\nE       \t(No symbol) [0x0x7ff65f6386af]\nE       \t(No symbol) [0x0x7ff65f660dbe]\nE       \t(No symbol) [0x0x7ff65f638443]\nE       \t(No symbol) [0x0x7ff65f601311]\nE       \t(No symbol) [0x0x7ff65f6020a3]\nE       \tGetHandleVerifier [0x0x7ff65fade26d+2926461]\nE       \tGetHandleVerifier [0x0x7ff65fad8993+2903715]\nE       \tGetHandleVerifier [0x0x7ff65faf6aed+3026941]\nE       \tGetHandleVerifier [0x0x7ff65f8416fe+187406]\nE       \tGetHandleVerifier [0x0x7ff65f8496ef+220159]\nE       \tGetHandleVerifier [0x0x7ff65f82faf4+114692]\nE       \tGetHandleVerifier [0x0x7ff65f82fca9+115129]\nE       \tGetHandleVerifier [0x0x7ff65f8164d8+10728]\nE       \tBaseThreadInitThunk [0x0x7ff81e357374+20]\nE       \tRtlUserThreadStart [0x0x7ff82035cc91+33]\n\nmyenv\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:138: TimeoutException","steps":[],"attachments":[{"uid":"aae101bce5b0478c","name":"test_coverage_selectcodesuccess_failure","source":"aae101bce5b0478c.png","type":"image/png","size":85203},{"uid":"bd51e15f382bd617","name":"test_coverage_selectcodesuccess_source","source":"bd51e15f382bd617.html","type":"text/html","size":1212471},{"uid":"c0db8b64408d76ad","name":"log","source":"c0db8b64408d76ad.txt","type":"text/plain","size":1082}],"parameters":[],"shouldDisplayMessage":true,"attachmentsCount":3,"attachmentStep":false,"hasContent":true,"stepsCount":0},"afterStages":[{"name":"login_to_coverage::0","time":{"start":1755697018877,"stop":1755697021050,"duration":2173},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"attachmentStep":false,"hasContent":false,"stepsCount":0}],"labels":[{"name":"story","value":"查询资源成功"},{"name":"feature","value":"覆盖日历表测试用例"},{"name":"parentSuite","value":"Tests.test_items"},{"name":"suite","value":"test_coverage"},{"name":"subSuite","value":"TestCoveragePage"},{"name":"host","value":"WIN-20240820MJV"},{"name":"thread","value":"9264-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"Tests.test_items.test_coverage"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":[]},"source":"ea7a29057204c2c7.json","parameterValues":[]}