{"uid":"1381e080671b015e","name":"test_spec_editnamesuccess","fullName":"Tests.test_items.test_spec1.TestSpecPage#test_spec_editnamesuccess","historyId":"a077dfe91a0cffec061838983bf4b7fc","time":{"start":1755087478275,"stop":1755087491470,"duration":13195},"status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message: 点击失败，找不到元素：xpath = //span[text()=\"RGB(242,128,255)\"]","statusTrace":"self = <Pages.itemsPage.spec1_page.Spec1Page object at 0x0000023BD4174850>, by_or_element = 'xpath', value = '//span[text()=\"RGB(242,128,255)\"]', wait_time = 10\n\n    def click(self, by_or_element, value=None, wait_time=10):\n        if value is not None:\n            by = by_or_element\n            logging.info(f\"点击元素：By = {by}, Value = {value}\")\n            try:\n>               element = WebDriverWait(self.driver, wait_time).until(\n                    EC.element_to_be_clickable((by, value))\n                )\n\nPages\\base_page.py:45: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"42fb8c6116078b91274cae9a525fc021\")>\nmethod = <function element_to_be_clickable.<locals>._predicate at 0x0000023BD41BF130>, message = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        -----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\nmyenv\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:138: TimeoutException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_items.test_spec1.TestSpecPage object at 0x0000023BD3F25D80>, login_to_spec1 = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"42fb8c6116078b91274cae9a525fc021\")>\n\n    @allure.story(\"修改名称，显示颜色成功\")\n    # @pytest.mark.run(order=1)\n    def test_spec_editnamesuccess(self, login_to_spec1):\n        driver = login_to_spec1  # WebDriver 实例\n        spec = Spec1Page(driver)  # 用 driver 初始化 Spec1Page\n    \n        # 选中代码\n        spec.click_button('//tr[./td[2][.//span[text()=\"1测试A\"]]]/td[2]')\n        # 点击修改按钮\n        spec.click_edi_button()\n        sleep(1)\n        # 生成随机数\n        random_int = random.randint(1, 10)\n        text = \"1测试A\" + f\"{random_int}\"\n        # 输入修改的物料名称\n        spec.enter_texts(\n            '(//label[text()=\"名称\"])[1]/parent::div//input', f\"{text}\"\n        )\n        # 获取修改好的值\n        editname = spec.get_find_element_xpath(\n            '(//label[text()=\"名称\"])[1]/parent::div//input'\n        ).get_attribute(\"value\")\n    \n        # 修改显示颜色下拉框\n        spec.click_button('(//label[text()=\"显示颜色\"])[1]/parent::div//i')\n        # 显示颜色\n>       spec.click_button('//span[text()=\"RGB(242,128,255)\"]')\n\nTests\\test_items\\test_spec1.py:315: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nPages\\itemsPage\\spec1_page.py:41: in click_button\n    self.click(By.XPATH, xpath)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Pages.itemsPage.spec1_page.Spec1Page object at 0x0000023BD4174850>, by_or_element = 'xpath', value = '//span[text()=\"RGB(242,128,255)\"]', wait_time = 10\n\n    def click(self, by_or_element, value=None, wait_time=10):\n        if value is not None:\n            by = by_or_element\n            logging.info(f\"点击元素：By = {by}, Value = {value}\")\n            try:\n                element = WebDriverWait(self.driver, wait_time).until(\n                    EC.element_to_be_clickable((by, value))\n                )\n            except TimeoutException:\n                logging.warning(f\"❌ 点击超时：元素 {by} = {value} 未在 {wait_time} 秒内变为可点击\")\n>               raise TimeoutException(f\"点击失败，找不到元素：{by} = {value}\")\nE               selenium.common.exceptions.TimeoutException: Message: 点击失败，找不到元素：xpath = //span[text()=\"RGB(242,128,255)\"]\n\nPages\\base_page.py:50: TimeoutException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":1,"retriesStatusChange":false,"beforeStages":[{"name":"login_to_spec1","time":{"start":1755087469943,"stop":1755087478275,"duration":8332},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentStep":false,"hasContent":false,"attachmentsCount":0,"shouldDisplayMessage":false}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message: 点击失败，找不到元素：xpath = //span[text()=\"RGB(242,128,255)\"]","statusTrace":"self = <Pages.itemsPage.spec1_page.Spec1Page object at 0x0000023BD4174850>, by_or_element = 'xpath', value = '//span[text()=\"RGB(242,128,255)\"]', wait_time = 10\n\n    def click(self, by_or_element, value=None, wait_time=10):\n        if value is not None:\n            by = by_or_element\n            logging.info(f\"点击元素：By = {by}, Value = {value}\")\n            try:\n>               element = WebDriverWait(self.driver, wait_time).until(\n                    EC.element_to_be_clickable((by, value))\n                )\n\nPages\\base_page.py:45: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"42fb8c6116078b91274cae9a525fc021\")>\nmethod = <function element_to_be_clickable.<locals>._predicate at 0x0000023BD41BF130>, message = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        -----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\nmyenv\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:138: TimeoutException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_items.test_spec1.TestSpecPage object at 0x0000023BD3F25D80>, login_to_spec1 = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"42fb8c6116078b91274cae9a525fc021\")>\n\n    @allure.story(\"修改名称，显示颜色成功\")\n    # @pytest.mark.run(order=1)\n    def test_spec_editnamesuccess(self, login_to_spec1):\n        driver = login_to_spec1  # WebDriver 实例\n        spec = Spec1Page(driver)  # 用 driver 初始化 Spec1Page\n    \n        # 选中代码\n        spec.click_button('//tr[./td[2][.//span[text()=\"1测试A\"]]]/td[2]')\n        # 点击修改按钮\n        spec.click_edi_button()\n        sleep(1)\n        # 生成随机数\n        random_int = random.randint(1, 10)\n        text = \"1测试A\" + f\"{random_int}\"\n        # 输入修改的物料名称\n        spec.enter_texts(\n            '(//label[text()=\"名称\"])[1]/parent::div//input', f\"{text}\"\n        )\n        # 获取修改好的值\n        editname = spec.get_find_element_xpath(\n            '(//label[text()=\"名称\"])[1]/parent::div//input'\n        ).get_attribute(\"value\")\n    \n        # 修改显示颜色下拉框\n        spec.click_button('(//label[text()=\"显示颜色\"])[1]/parent::div//i')\n        # 显示颜色\n>       spec.click_button('//span[text()=\"RGB(242,128,255)\"]')\n\nTests\\test_items\\test_spec1.py:315: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nPages\\itemsPage\\spec1_page.py:41: in click_button\n    self.click(By.XPATH, xpath)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Pages.itemsPage.spec1_page.Spec1Page object at 0x0000023BD4174850>, by_or_element = 'xpath', value = '//span[text()=\"RGB(242,128,255)\"]', wait_time = 10\n\n    def click(self, by_or_element, value=None, wait_time=10):\n        if value is not None:\n            by = by_or_element\n            logging.info(f\"点击元素：By = {by}, Value = {value}\")\n            try:\n                element = WebDriverWait(self.driver, wait_time).until(\n                    EC.element_to_be_clickable((by, value))\n                )\n            except TimeoutException:\n                logging.warning(f\"❌ 点击超时：元素 {by} = {value} 未在 {wait_time} 秒内变为可点击\")\n>               raise TimeoutException(f\"点击失败，找不到元素：{by} = {value}\")\nE               selenium.common.exceptions.TimeoutException: Message: 点击失败，找不到元素：xpath = //span[text()=\"RGB(242,128,255)\"]\n\nPages\\base_page.py:50: TimeoutException","steps":[],"attachments":[{"uid":"922ab2e10ae01bc0","name":"test_spec_editnamesuccess_failure","source":"922ab2e10ae01bc0.png","type":"image/png","size":108979},{"uid":"4fc655881d16937","name":"test_spec_editnamesuccess_source","source":"4fc655881d16937.html","type":"text/html","size":1294114},{"uid":"e20bbaee74bc03b2","name":"log","source":"e20bbaee74bc03b2.txt","type":"text/plain","size":2963}],"parameters":[],"stepsCount":0,"attachmentStep":false,"hasContent":true,"attachmentsCount":3,"shouldDisplayMessage":true},"afterStages":[{"name":"login_to_spec1::0","time":{"start":1755087491643,"stop":1755087493790,"duration":2147},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentStep":false,"hasContent":false,"attachmentsCount":0,"shouldDisplayMessage":false}],"labels":[{"name":"story","value":"修改名称，显示颜色成功"},{"name":"feature","value":"生产特征表测试用例"},{"name":"parentSuite","value":"Tests.test_items"},{"name":"suite","value":"test_spec1"},{"name":"subSuite","value":"TestSpecPage"},{"name":"host","value":"WIN-20240820MJV"},{"name":"thread","value":"3232-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"Tests.test_items.test_spec1"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"9b8d30dfee7bfce5","status":"broken","statusDetails":"selenium.common.exceptions.TimeoutException: Message: 点击失败，找不到元素：xpath = //span[text()=\"RGB(242,128,255)\"]","time":{"start":1755087453947,"stop":1755087467469,"duration":13522}}],"categories":[{"name":"Test defects","matchedStatuses":[]}],"tags":[]},"source":"1381e080671b015e.json","parameterValues":[]}