{"uid":"6a681366e02759cc","name":"test_coverage_addfail","fullName":"Tests.test_items.test_coverage.TestCoveragePage#test_coverage_addfail","historyId":"6b1ff1a10686fc6206a5a375248aa138","time":{"start":1755696575027,"stop":1755696583184,"duration":8157},"status":"failed","statusMessage":"AssertionError: assert 'rgb(220, 222, 226)' == 'rgb(255, 0, 0)'\n  \n  \u001B[0m\u001B[91m- rgb(255, 0, 0)\u001B[39;49;00m\u001B[90m\u001B[39;49;00m\n  \u001B[92m+ rgb(220, 222, 226)\u001B[39;49;00m\u001B[90m\u001B[39;49;00m","statusTrace":"self = <test_items.test_coverage.TestCoveragePage object at 0x000001FBD9946500>\nlogin_to_coverage = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"de11cbcd301c751ac0d3dc7643bfb542\")>\n\n    @allure.story(\"添加覆盖日历信息 不填写数据点击确认 不允许提交，增加布局\")\n    # @pytest.mark.run(order=1)\n    def test_coverage_addfail(self, login_to_coverage):\n        driver = login_to_coverage  # WebDriver 实例\n        coverage = Coverage(driver)  # 用 driver 初始化 Coverage\n        layout = \"测试布局A\"\n        coverage.add_layout(layout)\n    \n        # 获取布局名称的文本元素\n        name = coverage.get_find_element_xpath(\n            f'//div[@class=\"tabsDivItemCon\"]/div[text()=\" {layout} \"]'\n        ).text\n        coverage.click_add_button()\n        coverage.click_button('(//button[@class=\"ivu-btn ivu-btn-primary\"])[4]')\n        sleep(1)\n        # 资源\n        resource_box = coverage.get_find_element_xpath(\n            '//div[@id=\"2ssy7pog-1nb7\"]//input'\n        )\n        # 开始时间\n        start_box = coverage.get_find_element_xpath(\n            '//div[@id=\"dnj11joa-anmy\"]//input'\n        )\n        # 结束时间\n        end_box = coverage.get_find_element_xpath(\n            '//div[@id=\"qqs38txd-vd0r\"]//input'\n        )\n        # 时序\n        chronology_box = coverage.get_find_element_xpath(\n            '//div[@id=\"tg89jocr-6to2\"]//input'\n        )\n        # 资源量\n        resources_box = coverage.get_find_element_xpath(\n            '//div[@id=\"k0z05daz-8tok\"]//input'\n        )\n    \n        # 断言边框颜色是否为红色（可以根据实际RGB值调整）\n        sleep(1)\n        resource_box_color = resource_box.value_of_css_property(\"border-color\")\n        start_box_color = start_box.value_of_css_property(\"border-color\")\n        end_box_color = end_box.value_of_css_property(\"border-color\")\n        chronology_box_color = chronology_box.value_of_css_property(\"border-color\")\n        resources_box_color = resources_box.value_of_css_property(\"border-color\")\n        expected_color = \"rgb(255, 0, 0)\"  # 红色的 rgb 值\n        assert resource_box_color == expected_color\n>       assert start_box_color == expected_color\nE       AssertionError: assert 'rgb(220, 222, 226)' == 'rgb(255, 0, 0)'\nE         \nE         \u001B[0m\u001B[91m- rgb(255, 0, 0)\u001B[39;49;00m\u001B[90m\u001B[39;49;00m\nE         \u001B[92m+ rgb(220, 222, 226)\u001B[39;49;00m\u001B[90m\u001B[39;49;00m\n\nTests\\test_items\\test_coverage.py:103: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"login_to_coverage","time":{"start":1755696566752,"stop":1755696575027,"duration":8275},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentStep":false,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert 'rgb(220, 222, 226)' == 'rgb(255, 0, 0)'\n  \n  \u001B[0m\u001B[91m- rgb(255, 0, 0)\u001B[39;49;00m\u001B[90m\u001B[39;49;00m\n  \u001B[92m+ rgb(220, 222, 226)\u001B[39;49;00m\u001B[90m\u001B[39;49;00m","statusTrace":"self = <test_items.test_coverage.TestCoveragePage object at 0x000001FBD9946500>\nlogin_to_coverage = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"de11cbcd301c751ac0d3dc7643bfb542\")>\n\n    @allure.story(\"添加覆盖日历信息 不填写数据点击确认 不允许提交，增加布局\")\n    # @pytest.mark.run(order=1)\n    def test_coverage_addfail(self, login_to_coverage):\n        driver = login_to_coverage  # WebDriver 实例\n        coverage = Coverage(driver)  # 用 driver 初始化 Coverage\n        layout = \"测试布局A\"\n        coverage.add_layout(layout)\n    \n        # 获取布局名称的文本元素\n        name = coverage.get_find_element_xpath(\n            f'//div[@class=\"tabsDivItemCon\"]/div[text()=\" {layout} \"]'\n        ).text\n        coverage.click_add_button()\n        coverage.click_button('(//button[@class=\"ivu-btn ivu-btn-primary\"])[4]')\n        sleep(1)\n        # 资源\n        resource_box = coverage.get_find_element_xpath(\n            '//div[@id=\"2ssy7pog-1nb7\"]//input'\n        )\n        # 开始时间\n        start_box = coverage.get_find_element_xpath(\n            '//div[@id=\"dnj11joa-anmy\"]//input'\n        )\n        # 结束时间\n        end_box = coverage.get_find_element_xpath(\n            '//div[@id=\"qqs38txd-vd0r\"]//input'\n        )\n        # 时序\n        chronology_box = coverage.get_find_element_xpath(\n            '//div[@id=\"tg89jocr-6to2\"]//input'\n        )\n        # 资源量\n        resources_box = coverage.get_find_element_xpath(\n            '//div[@id=\"k0z05daz-8tok\"]//input'\n        )\n    \n        # 断言边框颜色是否为红色（可以根据实际RGB值调整）\n        sleep(1)\n        resource_box_color = resource_box.value_of_css_property(\"border-color\")\n        start_box_color = start_box.value_of_css_property(\"border-color\")\n        end_box_color = end_box.value_of_css_property(\"border-color\")\n        chronology_box_color = chronology_box.value_of_css_property(\"border-color\")\n        resources_box_color = resources_box.value_of_css_property(\"border-color\")\n        expected_color = \"rgb(255, 0, 0)\"  # 红色的 rgb 值\n        assert resource_box_color == expected_color\n>       assert start_box_color == expected_color\nE       AssertionError: assert 'rgb(220, 222, 226)' == 'rgb(255, 0, 0)'\nE         \nE         \u001B[0m\u001B[91m- rgb(255, 0, 0)\u001B[39;49;00m\u001B[90m\u001B[39;49;00m\nE         \u001B[92m+ rgb(220, 222, 226)\u001B[39;49;00m\u001B[90m\u001B[39;49;00m\n\nTests\\test_items\\test_coverage.py:103: AssertionError","steps":[],"attachments":[{"uid":"3b0fb0f254453089","name":"test_coverage_addfail_failure","source":"3b0fb0f254453089.png","type":"image/png","size":90217},{"uid":"fb0480dccd076c37","name":"test_coverage_addfail_source","source":"fb0480dccd076c37.html","type":"text/html","size":1357010},{"uid":"14c089620a01fc85","name":"log","source":"14c089620a01fc85.txt","type":"text/plain","size":2675}],"parameters":[],"stepsCount":0,"attachmentStep":false,"hasContent":true,"shouldDisplayMessage":true,"attachmentsCount":3},"afterStages":[{"name":"login_to_coverage::0","time":{"start":1755696583345,"stop":1755696585522,"duration":2177},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentStep":false,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0}],"labels":[{"name":"feature","value":"覆盖日历表测试用例"},{"name":"story","value":"添加覆盖日历信息 不填写数据点击确认 不允许提交，增加布局"},{"name":"parentSuite","value":"Tests.test_items"},{"name":"suite","value":"test_coverage"},{"name":"subSuite","value":"TestCoveragePage"},{"name":"host","value":"WIN-20240820MJV"},{"name":"thread","value":"9264-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"Tests.test_items.test_coverage"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":[]},"source":"6a681366e02759cc.json","parameterValues":[]}