{"uid":"e2176b2e366ed223","name":"test_plan_closebutton","fullName":"Tests.test_items.test_plan.TestPlanPage#test_plan_closebutton","historyId":"517533ef47ffbd03f0030f9d56ed47e1","time":{"start":1760972279790,"stop":1760972298517,"duration":18727},"status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n\tGetHandleVerifier [0x0x7ff613186f65+78965]\n\tGetHandleVerifier [0x0x7ff613186fc0+79056]\n\t(No symbol) [0x0x7ff612f19dda]\n\t(No symbol) [0x0x7ff612f702ea]\n\t(No symbol) [0x0x7ff612f7059c]\n\t(No symbol) [0x0x7ff612fc3f37]\n\t(No symbol) [0x0x7ff612f986af]\n\t(No symbol) [0x0x7ff612fc0dbe]\n\t(No symbol) [0x0x7ff612f98443]\n\t(No symbol) [0x0x7ff612f61311]\n\t(No symbol) [0x0x7ff612f620a3]\n\tGetHandleVerifier [0x0x7ff61343e26d+2926461]\n\tGetHandleVerifier [0x0x7ff613438993+2903715]\n\tGetHandleVerifier [0x0x7ff613456aed+3026941]\n\tGetHandleVerifier [0x0x7ff6131a16fe+187406]\n\tGetHandleVerifier [0x0x7ff6131a96ef+220159]\n\tGetHandleVerifier [0x0x7ff61318faf4+114692]\n\tGetHandleVerifier [0x0x7ff61318fca9+115129]\n\tGetHandleVerifier [0x0x7ff6131764d8+10728]\n\tBaseThreadInitThunk [0x0x7fff4faa7374+20]\n\tRtlUserThreadStart [0x0x7fff513dcc91+33]","statusTrace":"self = <test_items.test_plan.TestPlanPage object at 0x0000014AE2B44B20>, login_to_plan = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"f66c609acf077143c3f0a93cbd4c61ac\")>\n\n    @allure.story(\"方案管理中计划方案组合框显示关闭，不显示该方案\")\n    # @pytest.mark.run(order=1)\n    def test_plan_closebutton(self, login_to_plan):\n        driver = login_to_plan  # WebDriver 实例\n        plan = PlanPage(driver)  # 用 driver 初始化 PlanPage\n        sched = SchedPage(driver)  # 用 driver 初始化 SchedPage\n        wait = WebDriverWait(driver, 20)\n        list_ = [\"方案管理\", \"计划方案管理\"]\n        for v in list_:\n            plan.click_button(f'(//span[text()=\"{v}\"])[1]')\n        # 选择第一个方案\n        sched_text = sched.get_find_element_xpath(\n            '//div[@class=\"ivu-tree\"]//li/ul[1]'\n        ).text\n        sched.click_button('//div[@class=\"ivu-tree\"]//li/ul[1]')\n        sched.click_attribute_button()\n        # 点击开关 如果为开 则关闭\n        ele = sched.get_find_element_xpath(\n            '//div[text()=\"计划方案组合框显示\"]/following-sibling::div//span[1]'\n        )\n        if (\n            ele.get_attribute(\"class\")\n            == \"ivu-switch ivu-switch-checked ivu-switch-default\"\n        ):\n            sched.click_button(\n                '//div[text()=\"计划方案组合框显示\"]/following-sibling::div//span[1]'\n            )\n    \n        sched.click_ok_button()\n        sched.click_save_button()\n    \n        # 等待loading遮罩消失\n        wait.until(\n            EC.invisibility_of_element_located(\n                (By.CSS_SELECTOR, \"div.el-loading-spinner\")\n            )\n        )\n    \n        list_ = [\"计算工作台\", \"计划计算\"]\n        for v in list_:\n            plan.click_button(f'(//span[text()=\"{v}\"])[1]')\n    \n        plan.click_button('//div[@class=\"vue-treeselect__control-arrow-container\"]')\n>       ele_input = plan.get_find_element_xpath(\n            '//div[@class=\"vue-treeselect__list\"]/div[1]//label'\n        )\n\nTests\\test_items\\test_plan.py:162: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nPages\\itemsPage\\plan_page.py:27: in get_find_element_xpath\n    return self.find_element(By.XPATH, xpath)\nPages\\base_page.py:28: in find_element\n    return WebDriverWait(self.driver, wait_time).until(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"f66c609acf077143c3f0a93cbd4c61ac\")>, method = <function presence_of_element_located.<locals>._predicate at 0x0000014AE32791B0>, message = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        -----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x7ff613186f65+78965]\nE       \tGetHandleVerifier [0x0x7ff613186fc0+79056]\nE       \t(No symbol) [0x0x7ff612f19dda]\nE       \t(No symbol) [0x0x7ff612f702ea]\nE       \t(No symbol) [0x0x7ff612f7059c]\nE       \t(No symbol) [0x0x7ff612fc3f37]\nE       \t(No symbol) [0x0x7ff612f986af]\nE       \t(No symbol) [0x0x7ff612fc0dbe]\nE       \t(No symbol) [0x0x7ff612f98443]\nE       \t(No symbol) [0x0x7ff612f61311]\nE       \t(No symbol) [0x0x7ff612f620a3]\nE       \tGetHandleVerifier [0x0x7ff61343e26d+2926461]\nE       \tGetHandleVerifier [0x0x7ff613438993+2903715]\nE       \tGetHandleVerifier [0x0x7ff613456aed+3026941]\nE       \tGetHandleVerifier [0x0x7ff6131a16fe+187406]\nE       \tGetHandleVerifier [0x0x7ff6131a96ef+220159]\nE       \tGetHandleVerifier [0x0x7ff61318faf4+114692]\nE       \tGetHandleVerifier [0x0x7ff61318fca9+115129]\nE       \tGetHandleVerifier [0x0x7ff6131764d8+10728]\nE       \tBaseThreadInitThunk [0x0x7fff4faa7374+20]\nE       \tRtlUserThreadStart [0x0x7fff513dcc91+33]\n\nmyenv\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:138: TimeoutException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"login_to_plan","time":{"start":1760972261144,"stop":1760972279789,"duration":18645},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentStep":false,"hasContent":false,"attachmentsCount":0,"shouldDisplayMessage":false}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n\tGetHandleVerifier [0x0x7ff613186f65+78965]\n\tGetHandleVerifier [0x0x7ff613186fc0+79056]\n\t(No symbol) [0x0x7ff612f19dda]\n\t(No symbol) [0x0x7ff612f702ea]\n\t(No symbol) [0x0x7ff612f7059c]\n\t(No symbol) [0x0x7ff612fc3f37]\n\t(No symbol) [0x0x7ff612f986af]\n\t(No symbol) [0x0x7ff612fc0dbe]\n\t(No symbol) [0x0x7ff612f98443]\n\t(No symbol) [0x0x7ff612f61311]\n\t(No symbol) [0x0x7ff612f620a3]\n\tGetHandleVerifier [0x0x7ff61343e26d+2926461]\n\tGetHandleVerifier [0x0x7ff613438993+2903715]\n\tGetHandleVerifier [0x0x7ff613456aed+3026941]\n\tGetHandleVerifier [0x0x7ff6131a16fe+187406]\n\tGetHandleVerifier [0x0x7ff6131a96ef+220159]\n\tGetHandleVerifier [0x0x7ff61318faf4+114692]\n\tGetHandleVerifier [0x0x7ff61318fca9+115129]\n\tGetHandleVerifier [0x0x7ff6131764d8+10728]\n\tBaseThreadInitThunk [0x0x7fff4faa7374+20]\n\tRtlUserThreadStart [0x0x7fff513dcc91+33]","statusTrace":"self = <test_items.test_plan.TestPlanPage object at 0x0000014AE2B44B20>, login_to_plan = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"f66c609acf077143c3f0a93cbd4c61ac\")>\n\n    @allure.story(\"方案管理中计划方案组合框显示关闭，不显示该方案\")\n    # @pytest.mark.run(order=1)\n    def test_plan_closebutton(self, login_to_plan):\n        driver = login_to_plan  # WebDriver 实例\n        plan = PlanPage(driver)  # 用 driver 初始化 PlanPage\n        sched = SchedPage(driver)  # 用 driver 初始化 SchedPage\n        wait = WebDriverWait(driver, 20)\n        list_ = [\"方案管理\", \"计划方案管理\"]\n        for v in list_:\n            plan.click_button(f'(//span[text()=\"{v}\"])[1]')\n        # 选择第一个方案\n        sched_text = sched.get_find_element_xpath(\n            '//div[@class=\"ivu-tree\"]//li/ul[1]'\n        ).text\n        sched.click_button('//div[@class=\"ivu-tree\"]//li/ul[1]')\n        sched.click_attribute_button()\n        # 点击开关 如果为开 则关闭\n        ele = sched.get_find_element_xpath(\n            '//div[text()=\"计划方案组合框显示\"]/following-sibling::div//span[1]'\n        )\n        if (\n            ele.get_attribute(\"class\")\n            == \"ivu-switch ivu-switch-checked ivu-switch-default\"\n        ):\n            sched.click_button(\n                '//div[text()=\"计划方案组合框显示\"]/following-sibling::div//span[1]'\n            )\n    \n        sched.click_ok_button()\n        sched.click_save_button()\n    \n        # 等待loading遮罩消失\n        wait.until(\n            EC.invisibility_of_element_located(\n                (By.CSS_SELECTOR, \"div.el-loading-spinner\")\n            )\n        )\n    \n        list_ = [\"计算工作台\", \"计划计算\"]\n        for v in list_:\n            plan.click_button(f'(//span[text()=\"{v}\"])[1]')\n    \n        plan.click_button('//div[@class=\"vue-treeselect__control-arrow-container\"]')\n>       ele_input = plan.get_find_element_xpath(\n            '//div[@class=\"vue-treeselect__list\"]/div[1]//label'\n        )\n\nTests\\test_items\\test_plan.py:162: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nPages\\itemsPage\\plan_page.py:27: in get_find_element_xpath\n    return self.find_element(By.XPATH, xpath)\nPages\\base_page.py:28: in find_element\n    return WebDriverWait(self.driver, wait_time).until(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"f66c609acf077143c3f0a93cbd4c61ac\")>, method = <function presence_of_element_located.<locals>._predicate at 0x0000014AE32791B0>, message = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        -----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x7ff613186f65+78965]\nE       \tGetHandleVerifier [0x0x7ff613186fc0+79056]\nE       \t(No symbol) [0x0x7ff612f19dda]\nE       \t(No symbol) [0x0x7ff612f702ea]\nE       \t(No symbol) [0x0x7ff612f7059c]\nE       \t(No symbol) [0x0x7ff612fc3f37]\nE       \t(No symbol) [0x0x7ff612f986af]\nE       \t(No symbol) [0x0x7ff612fc0dbe]\nE       \t(No symbol) [0x0x7ff612f98443]\nE       \t(No symbol) [0x0x7ff612f61311]\nE       \t(No symbol) [0x0x7ff612f620a3]\nE       \tGetHandleVerifier [0x0x7ff61343e26d+2926461]\nE       \tGetHandleVerifier [0x0x7ff613438993+2903715]\nE       \tGetHandleVerifier [0x0x7ff613456aed+3026941]\nE       \tGetHandleVerifier [0x0x7ff6131a16fe+187406]\nE       \tGetHandleVerifier [0x0x7ff6131a96ef+220159]\nE       \tGetHandleVerifier [0x0x7ff61318faf4+114692]\nE       \tGetHandleVerifier [0x0x7ff61318fca9+115129]\nE       \tGetHandleVerifier [0x0x7ff6131764d8+10728]\nE       \tBaseThreadInitThunk [0x0x7fff4faa7374+20]\nE       \tRtlUserThreadStart [0x0x7fff513dcc91+33]\n\nmyenv\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:138: TimeoutException","steps":[],"attachments":[{"uid":"93bbafb270385e05","name":"test_plan_closebutton_failure","source":"93bbafb270385e05.png","type":"image/png","size":102930},{"uid":"8c29ebe213723ca9","name":"test_plan_closebutton_source","source":"8c29ebe213723ca9.html","type":"text/html","size":1129178},{"uid":"a99f55059289fed9","name":"log","source":"a99f55059289fed9.txt","type":"text/plain","size":2921}],"parameters":[],"stepsCount":0,"attachmentStep":false,"hasContent":true,"attachmentsCount":3,"shouldDisplayMessage":true},"afterStages":[{"name":"login_to_plan::0","time":{"start":1760972298957,"stop":1760972301308,"duration":2351},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentStep":false,"hasContent":false,"attachmentsCount":0,"shouldDisplayMessage":false}],"labels":[{"name":"story","value":"方案管理中计划方案组合框显示关闭，不显示该方案"},{"name":"feature","value":"计划计算测试用例"},{"name":"parentSuite","value":"Tests.test_items"},{"name":"suite","value":"test_plan"},{"name":"subSuite","value":"TestPlanPage"},{"name":"host","value":"WIN-20240820MJV"},{"name":"thread","value":"3232-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"Tests.test_items.test_plan"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[]}],"tags":[]},"source":"e2176b2e366ed223.json","parameterValues":[]}