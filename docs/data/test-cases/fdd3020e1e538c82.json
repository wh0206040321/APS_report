{"uid":"fdd3020e1e538c82","name":"test_delete_start","fullName":"Tests.test_items.test_deletestart.TestDeleteStart#test_delete_start","historyId":"77011d2a57b9f6fdb259e511339126fd","time":{"start":1761150051009,"stop":1761150105735,"duration":54726},"description":"初始化并返回 driver","descriptionHtml":"<p>初始化并返回 driver</p>\n","status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message: 点击失败，找不到元素：xpath = (//span[text()=\"工作指示一览\"])[1]","statusTrace":"self = <Pages.itemsPage.login_page.LoginPage object at 0x0000027FE5F50730>, by_or_element = 'xpath', value = '(//span[text()=\"工作指示一览\"])[1]', wait_time = 10\n\n    def click(self, by_or_element, value=None, wait_time=10):\n        if value is not None:\n            by = by_or_element\n            logging.info(f\"点击元素：By = {by}, Value = {value}\")\n            try:\n>               element = WebDriverWait(self.driver, wait_time).until(\n                    EC.element_to_be_clickable((by, value))\n                )\n\nPages\\base_page.py:45: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"8b8e52ff7ce0a59efc1ba48d83701fde\")>, method = <function element_to_be_clickable.<locals>._predicate at 0x0000027FE76157E0>, message = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        -----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\nmyenv\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:138: TimeoutException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_items.test_deletestart.TestDeleteStart object at 0x0000027FE5891D20>\n\n    @allure.story(\"删除添加的物品，添加的工艺产能，添加的制造订单,删除工作指示\")\n    # @pytest.mark.run(order=1)\n    def test_delete_start(self):\n        \"\"\"初始化并返回 driver\"\"\"\n        date_driver = DateDriver()\n        driver = create_driver(date_driver.driver_path)\n        driver.implicitly_wait(3)\n        item = ItemPage(driver)  # 用 driver 初始化 ItemPage\n    \n        # 初始化登录页面\n        page = LoginPage(driver)  # 初始化登录页面\n        page.navigate_to(date_driver.url)  # 导航到登录页面\n        page.login(date_driver.username, date_driver.password, date_driver.planning)\n        item.go_item()\n    \n        # 待删除的物品名称列表\n        ITEMS_TO_DELETE = [\"1测试A\", \"1测试B\", \"1测试C\"]\n    \n        # 批量删除物品并等待\n        for item_name in ITEMS_TO_DELETE:\n            try:\n                # 先判断是否存在该物品\n                elements = driver.find_elements(\n                    By.XPATH, f'//span[text()=\"{item_name}\"]'\n                )\n                if not elements:\n                    print(f\"物品 {item_name} 不存在，跳过删除。\")\n                    continue\n    \n                item.delete_item(item_name)  # 确认存在后再调用删除方法\n                sleep(1)\n            except Exception as e:\n                print(f\"删除物品 {item_name} 时发生异常: {e}\")\n    \n        page.click_button('(//span[text()=\"工艺产能\"])[1]')  # 点击工艺产能\n        master = MasterPage(driver)  # 用 driver 初始化 MasterPage\n        sleep(1)\n        master.delete_material(\"1测试C\")\n    \n        order = OrderPage(driver)  # 用 driver 初始化 OrderPage\n        page.click_button('(//span[text()=\"计划业务数据\"])[1]')  # 点击计划业务数据\n        page.click_button('(//span[text()=\"制造订单\"])[1]')  # 点击制造订单\n        code = \"1测试C\"\n        order.delete_order(code)\n        order.click_ref_button()\n        sleep(1)\n        ele = driver.find_elements(\n            By.XPATH, f'(//span[text()=\"{code}\"])[1]/ancestor::tr[1]/td[2]'\n        )\n        page.click_button('(//span[text()=\"计划业务数据\"])[1]')  # 点击计划业务数据\n>       page.click_button('(//span[text()=\"工作指示一览\"])[1]')\n\nTests\\test_items\\test_deletestart.py:70: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nPages\\itemsPage\\login_page.py:24: in click_button\n    self.click(By.XPATH, xpath)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Pages.itemsPage.login_page.LoginPage object at 0x0000027FE5F50730>, by_or_element = 'xpath', value = '(//span[text()=\"工作指示一览\"])[1]', wait_time = 10\n\n    def click(self, by_or_element, value=None, wait_time=10):\n        if value is not None:\n            by = by_or_element\n            logging.info(f\"点击元素：By = {by}, Value = {value}\")\n            try:\n                element = WebDriverWait(self.driver, wait_time).until(\n                    EC.element_to_be_clickable((by, value))\n                )\n            except TimeoutException:\n                logging.warning(f\"❌ 点击超时：元素 {by} = {value} 未在 {wait_time} 秒内变为可点击\")\n>               raise TimeoutException(f\"点击失败，找不到元素：{by} = {value}\")\nE               selenium.common.exceptions.TimeoutException: Message: 点击失败，找不到元素：xpath = (//span[text()=\"工作指示一览\"])[1]\n\nPages\\base_page.py:50: TimeoutException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":1,"retriesStatusChange":false,"beforeStages":[],"testStage":{"description":"初始化并返回 driver","status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message: 点击失败，找不到元素：xpath = (//span[text()=\"工作指示一览\"])[1]","statusTrace":"self = <Pages.itemsPage.login_page.LoginPage object at 0x0000027FE5F50730>, by_or_element = 'xpath', value = '(//span[text()=\"工作指示一览\"])[1]', wait_time = 10\n\n    def click(self, by_or_element, value=None, wait_time=10):\n        if value is not None:\n            by = by_or_element\n            logging.info(f\"点击元素：By = {by}, Value = {value}\")\n            try:\n>               element = WebDriverWait(self.driver, wait_time).until(\n                    EC.element_to_be_clickable((by, value))\n                )\n\nPages\\base_page.py:45: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"8b8e52ff7ce0a59efc1ba48d83701fde\")>, method = <function element_to_be_clickable.<locals>._predicate at 0x0000027FE76157E0>, message = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        -----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\nmyenv\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:138: TimeoutException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_items.test_deletestart.TestDeleteStart object at 0x0000027FE5891D20>\n\n    @allure.story(\"删除添加的物品，添加的工艺产能，添加的制造订单,删除工作指示\")\n    # @pytest.mark.run(order=1)\n    def test_delete_start(self):\n        \"\"\"初始化并返回 driver\"\"\"\n        date_driver = DateDriver()\n        driver = create_driver(date_driver.driver_path)\n        driver.implicitly_wait(3)\n        item = ItemPage(driver)  # 用 driver 初始化 ItemPage\n    \n        # 初始化登录页面\n        page = LoginPage(driver)  # 初始化登录页面\n        page.navigate_to(date_driver.url)  # 导航到登录页面\n        page.login(date_driver.username, date_driver.password, date_driver.planning)\n        item.go_item()\n    \n        # 待删除的物品名称列表\n        ITEMS_TO_DELETE = [\"1测试A\", \"1测试B\", \"1测试C\"]\n    \n        # 批量删除物品并等待\n        for item_name in ITEMS_TO_DELETE:\n            try:\n                # 先判断是否存在该物品\n                elements = driver.find_elements(\n                    By.XPATH, f'//span[text()=\"{item_name}\"]'\n                )\n                if not elements:\n                    print(f\"物品 {item_name} 不存在，跳过删除。\")\n                    continue\n    \n                item.delete_item(item_name)  # 确认存在后再调用删除方法\n                sleep(1)\n            except Exception as e:\n                print(f\"删除物品 {item_name} 时发生异常: {e}\")\n    \n        page.click_button('(//span[text()=\"工艺产能\"])[1]')  # 点击工艺产能\n        master = MasterPage(driver)  # 用 driver 初始化 MasterPage\n        sleep(1)\n        master.delete_material(\"1测试C\")\n    \n        order = OrderPage(driver)  # 用 driver 初始化 OrderPage\n        page.click_button('(//span[text()=\"计划业务数据\"])[1]')  # 点击计划业务数据\n        page.click_button('(//span[text()=\"制造订单\"])[1]')  # 点击制造订单\n        code = \"1测试C\"\n        order.delete_order(code)\n        order.click_ref_button()\n        sleep(1)\n        ele = driver.find_elements(\n            By.XPATH, f'(//span[text()=\"{code}\"])[1]/ancestor::tr[1]/td[2]'\n        )\n        page.click_button('(//span[text()=\"计划业务数据\"])[1]')  # 点击计划业务数据\n>       page.click_button('(//span[text()=\"工作指示一览\"])[1]')\n\nTests\\test_items\\test_deletestart.py:70: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nPages\\itemsPage\\login_page.py:24: in click_button\n    self.click(By.XPATH, xpath)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Pages.itemsPage.login_page.LoginPage object at 0x0000027FE5F50730>, by_or_element = 'xpath', value = '(//span[text()=\"工作指示一览\"])[1]', wait_time = 10\n\n    def click(self, by_or_element, value=None, wait_time=10):\n        if value is not None:\n            by = by_or_element\n            logging.info(f\"点击元素：By = {by}, Value = {value}\")\n            try:\n                element = WebDriverWait(self.driver, wait_time).until(\n                    EC.element_to_be_clickable((by, value))\n                )\n            except TimeoutException:\n                logging.warning(f\"❌ 点击超时：元素 {by} = {value} 未在 {wait_time} 秒内变为可点击\")\n>               raise TimeoutException(f\"点击失败，找不到元素：{by} = {value}\")\nE               selenium.common.exceptions.TimeoutException: Message: 点击失败，找不到元素：xpath = (//span[text()=\"工作指示一览\"])[1]\n\nPages\\base_page.py:50: TimeoutException","steps":[],"attachments":[{"uid":"f40d83ea2df42a0a","name":"test_delete_start_failure","source":"f40d83ea2df42a0a.png","type":"image/png","size":147248},{"uid":"f258aff84d9cdf1d","name":"test_delete_start_source","source":"f258aff84d9cdf1d.html","type":"text/html","size":1492774},{"uid":"d0835d5c7a2122de","name":"log","source":"d0835d5c7a2122de.txt","type":"text/plain","size":4955}],"parameters":[],"attachmentsCount":3,"shouldDisplayMessage":true,"stepsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"story","value":"删除添加的物品，添加的工艺产能，添加的制造订单,删除工作指示"},{"name":"feature","value":"删除添加的物品，添加的工艺产能，添加的制造订单,删除工作指示测试用例"},{"name":"parentSuite","value":"Tests.test_items"},{"name":"suite","value":"test_deletestart"},{"name":"subSuite","value":"TestDeleteStart"},{"name":"host","value":"WIN-20240820MJV"},{"name":"thread","value":"25856-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"Tests.test_items.test_deletestart"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"487feb7918a0022e","status":"broken","statusDetails":"selenium.common.exceptions.TimeoutException: Message: 点击失败，找不到元素：xpath = (//span[text()=\"工作指示一览\"])[1]","time":{"start":1761149980834,"stop":1761150050298,"duration":69464}}],"categories":[{"name":"Test defects","matchedStatuses":[]}],"tags":[]},"source":"fdd3020e1e538c82.json","parameterValues":[]}