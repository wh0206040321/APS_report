{"uid":"266a871cd00e9eee","name":"test_setting_display","fullName":"Tests.test_item.test_setting.TestSettingPage#test_setting_display","historyId":"7447d00b650bcc6514a52fb2dbe485bd","time":{"start":1752833740169,"stop":1752833752902,"duration":12733},"status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message: 点击失败，找不到元素：xpath = (//span[text()=\" 在导航中显示布局 \"])[3]","statusTrace":"self = <Pages.setting_page.SettingPage object at 0x00000236DD3EBFA0>, by_or_element = 'xpath', value = '(//span[text()=\" 在导航中显示布局 \"])[3]', wait_time = 10\n\n    def click(self, by_or_element, value=None, wait_time=10):\n        if value is not None:\n            by = by_or_element\n            logging.info(f\"点击元素：By = {by}, Value = {value}\")\n            try:\n>               element = WebDriverWait(self.driver, wait_time).until(\n                    EC.element_to_be_clickable((by, value))\n                )\n\nPages\\base_page.py:42: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"edc586baf5feae1e574de8b9039d5320\")>\nmethod = <function element_to_be_clickable.<locals>._predicate at 0x00000236DDEC8E50>, message = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        -----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\nmyenv\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:138: TimeoutException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_item.test_setting.TestSettingPage object at 0x00000236DD3EF640>\nlogin_to_setting = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"edc586baf5feae1e574de8b9039d5320\")>\n\n    @allure.story(\"设置表格布局-布局列表设置为显示布局\")\n    # @pytest.mark.run(order=1)\n    def test_setting_display(self, login_to_setting):\n        driver = login_to_setting  # WebDriver 实例\n        setting = SettingPage(driver)  # 用 driver 初始化 SettingPage\n        layout = \"测试布局A\"\n        sleep(1)\n        setting.click_button('//i[@id=\"tabsDrawerIcon\"]')\n    \n        # 获取目标 div 元素，这里的目标是具有特定文本的 div\n        target_div = setting.get_find_element_xpath(\n            f'//div[@id=\"container\"]/div[.//text()=\"{layout}\"]'\n        )\n    \n        # 获取父容器下所有 div\n        # 这一步是为了确定目标 div 在其父容器中的位置\n        parent_div = setting.get_find_element_xpath(f'//div[@id=\"container\"]')\n        all_children = parent_div.find_elements(By.XPATH, \"./div\")\n    \n        # 获取目标 div 的位置索引（从0开始）\n        # 这里是为了后续操作，比如点击目标 div 相关的按钮\n        index = all_children.index(target_div)\n        print(f\"目标 div 是第 {index + 1} 个 div\")  # 输出 3（如果从0开始则是2）\n        xpath = f'(//i[@class=\"el-icon-more layoutListDropdown\"])[{index + 1}]'\n        element = driver.find_element(By.XPATH, xpath)\n        # 判断是否可点击（可见 + 启用）\n        sleep(1)\n        if element.is_displayed() and element.is_enabled():\n            print(f\"元素存在且可点击，即将点击...\")\n            element.click()  # 执行点击操作\n        else:\n            setting.click_button(\n                f'//span[./span[text()=\"{layout}\"]]/following-sibling::i[1]'\n            )\n    \n>       setting.click_button(f'(//span[text()=\" 在导航中显示布局 \"])[{index + 1}]')\n\nTests\\test_item\\test_setting.py:487: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nPages\\setting_page.py:22: in click_button\n    self.click(By.XPATH, xpath)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Pages.setting_page.SettingPage object at 0x00000236DD3EBFA0>, by_or_element = 'xpath', value = '(//span[text()=\" 在导航中显示布局 \"])[3]', wait_time = 10\n\n    def click(self, by_or_element, value=None, wait_time=10):\n        if value is not None:\n            by = by_or_element\n            logging.info(f\"点击元素：By = {by}, Value = {value}\")\n            try:\n                element = WebDriverWait(self.driver, wait_time).until(\n                    EC.element_to_be_clickable((by, value))\n                )\n            except TimeoutException:\n                logging.warning(f\"❌ 点击超时：元素 {by} = {value} 未在 {wait_time} 秒内变为可点击\")\n                self.safe_screenshot(\"click_timeout\", test_name=\"test\")\n>               raise TimeoutException(f\"点击失败，找不到元素：{by} = {value}\")\nE               selenium.common.exceptions.TimeoutException: Message: 点击失败，找不到元素：xpath = (//span[text()=\" 在导航中显示布局 \"])[3]\n\nPages\\base_page.py:48: TimeoutException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":5,"retriesStatusChange":false,"beforeStages":[{"name":"login_to_setting","time":{"start":1752833731678,"stop":1752833740168,"duration":8490},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false,"attachmentsCount":0}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message: 点击失败，找不到元素：xpath = (//span[text()=\" 在导航中显示布局 \"])[3]","statusTrace":"self = <Pages.setting_page.SettingPage object at 0x00000236DD3EBFA0>, by_or_element = 'xpath', value = '(//span[text()=\" 在导航中显示布局 \"])[3]', wait_time = 10\n\n    def click(self, by_or_element, value=None, wait_time=10):\n        if value is not None:\n            by = by_or_element\n            logging.info(f\"点击元素：By = {by}, Value = {value}\")\n            try:\n>               element = WebDriverWait(self.driver, wait_time).until(\n                    EC.element_to_be_clickable((by, value))\n                )\n\nPages\\base_page.py:42: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"edc586baf5feae1e574de8b9039d5320\")>\nmethod = <function element_to_be_clickable.<locals>._predicate at 0x00000236DDEC8E50>, message = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        -----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\nmyenv\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:138: TimeoutException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_item.test_setting.TestSettingPage object at 0x00000236DD3EF640>\nlogin_to_setting = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"edc586baf5feae1e574de8b9039d5320\")>\n\n    @allure.story(\"设置表格布局-布局列表设置为显示布局\")\n    # @pytest.mark.run(order=1)\n    def test_setting_display(self, login_to_setting):\n        driver = login_to_setting  # WebDriver 实例\n        setting = SettingPage(driver)  # 用 driver 初始化 SettingPage\n        layout = \"测试布局A\"\n        sleep(1)\n        setting.click_button('//i[@id=\"tabsDrawerIcon\"]')\n    \n        # 获取目标 div 元素，这里的目标是具有特定文本的 div\n        target_div = setting.get_find_element_xpath(\n            f'//div[@id=\"container\"]/div[.//text()=\"{layout}\"]'\n        )\n    \n        # 获取父容器下所有 div\n        # 这一步是为了确定目标 div 在其父容器中的位置\n        parent_div = setting.get_find_element_xpath(f'//div[@id=\"container\"]')\n        all_children = parent_div.find_elements(By.XPATH, \"./div\")\n    \n        # 获取目标 div 的位置索引（从0开始）\n        # 这里是为了后续操作，比如点击目标 div 相关的按钮\n        index = all_children.index(target_div)\n        print(f\"目标 div 是第 {index + 1} 个 div\")  # 输出 3（如果从0开始则是2）\n        xpath = f'(//i[@class=\"el-icon-more layoutListDropdown\"])[{index + 1}]'\n        element = driver.find_element(By.XPATH, xpath)\n        # 判断是否可点击（可见 + 启用）\n        sleep(1)\n        if element.is_displayed() and element.is_enabled():\n            print(f\"元素存在且可点击，即将点击...\")\n            element.click()  # 执行点击操作\n        else:\n            setting.click_button(\n                f'//span[./span[text()=\"{layout}\"]]/following-sibling::i[1]'\n            )\n    \n>       setting.click_button(f'(//span[text()=\" 在导航中显示布局 \"])[{index + 1}]')\n\nTests\\test_item\\test_setting.py:487: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nPages\\setting_page.py:22: in click_button\n    self.click(By.XPATH, xpath)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Pages.setting_page.SettingPage object at 0x00000236DD3EBFA0>, by_or_element = 'xpath', value = '(//span[text()=\" 在导航中显示布局 \"])[3]', wait_time = 10\n\n    def click(self, by_or_element, value=None, wait_time=10):\n        if value is not None:\n            by = by_or_element\n            logging.info(f\"点击元素：By = {by}, Value = {value}\")\n            try:\n                element = WebDriverWait(self.driver, wait_time).until(\n                    EC.element_to_be_clickable((by, value))\n                )\n            except TimeoutException:\n                logging.warning(f\"❌ 点击超时：元素 {by} = {value} 未在 {wait_time} 秒内变为可点击\")\n                self.safe_screenshot(\"click_timeout\", test_name=\"test\")\n>               raise TimeoutException(f\"点击失败，找不到元素：{by} = {value}\")\nE               selenium.common.exceptions.TimeoutException: Message: 点击失败，找不到元素：xpath = (//span[text()=\" 在导航中显示布局 \"])[3]\n\nPages\\base_page.py:48: TimeoutException","steps":[],"attachments":[{"uid":"fa7abd0039604103","name":"test_click_timeout","source":"fa7abd0039604103.png","type":"image/png","size":122895}],"parameters":[],"stepsCount":0,"hasContent":true,"attachmentStep":false,"shouldDisplayMessage":true,"attachmentsCount":1},"afterStages":[{"name":"login_to_setting::0","time":{"start":1752833752940,"stop":1752833755100,"duration":2160},"status":"broken","statusMessage":"KeyboardInterrupt\n","statusTrace":"  File \"D:\\PycharmProjects\\APS\\myenv\\lib\\site-packages\\allure_commons\\_allure.py\", line 231, in __call__\n    return self._fixture_function(*args, **kwargs)\n  File \"D:\\PycharmProjects\\APS\\myenv\\lib\\site-packages\\_pytest\\fixtures.py\", line 938, in _teardown_yield_fixture\n    next(it)\n  File \"D:\\PycharmProjects\\APS\\Tests\\test_item\\test_setting.py\", line 37, in login_to_setting\n    safe_quit(driver)\n  File \"D:\\PycharmProjects\\APS\\Utils\\driver_manager.py\", line 49, in safe_quit\n    driver.quit()  # 尝试正常关闭浏览器\n  File \"D:\\PycharmProjects\\APS\\myenv\\lib\\site-packages\\selenium\\webdriver\\chromium\\webdriver.py\", line 224, in quit\n    self.service.stop()\n  File \"D:\\PycharmProjects\\APS\\myenv\\lib\\site-packages\\selenium\\webdriver\\common\\service.py\", line 150, in stop\n    self.send_remote_shutdown_command()\n  File \"D:\\PycharmProjects\\APS\\myenv\\lib\\site-packages\\selenium\\webdriver\\common\\service.py\", line 135, in send_remote_shutdown_command\n    if not self.is_connectable():\n  File \"D:\\PycharmProjects\\APS\\myenv\\lib\\site-packages\\selenium\\webdriver\\common\\service.py\", line 124, in is_connectable\n    return utils.is_connectable(self.port)\n  File \"D:\\PycharmProjects\\APS\\myenv\\lib\\site-packages\\selenium\\webdriver\\common\\utils.py\", line 98, in is_connectable\n    socket_ = socket.create_connection((host, port), 1)\n  File \"D:\\Program Files\\Python310\\lib\\socket.py\", line 833, in create_connection\n    sock.connect(sa)\n","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":true,"attachmentStep":false,"shouldDisplayMessage":true,"attachmentsCount":0}],"labels":[{"name":"feature","value":"标准应用设置测试用例"},{"name":"story","value":"设置表格布局-布局列表设置为显示布局"},{"name":"parentSuite","value":"Tests.test_item"},{"name":"suite","value":"test_setting"},{"name":"subSuite","value":"TestSettingPage"},{"name":"host","value":"WIN-20240820MJV"},{"name":"thread","value":"15880-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"Tests.test_item.test_setting"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"94a69e53b7519939","status":"broken","statusDetails":"selenium.common.exceptions.TimeoutException: Message: 点击失败，找不到元素：xpath = (//span[text()=\" 在导航中显示布局 \"])[3]","time":{"start":1752833716727,"stop":1752833729468,"duration":12741}},{"uid":"2c168ac42ff251c1","status":"broken","statusDetails":"selenium.common.exceptions.TimeoutException: Message: 点击失败，找不到元素：xpath = //span[./span[text()=\"测试布局A\"]]/following-sibling::i[1]","time":{"start":1752832127640,"stop":1752832140473,"duration":12833}},{"uid":"4bdbbc03fe6f9ede","status":"broken","statusDetails":"selenium.common.exceptions.TimeoutException: Message: 点击失败，找不到元素：xpath = //span[./span[text()=\"测试布局A\"]]/following-sibling::i[1]","time":{"start":1752832104820,"stop":1752832117490,"duration":12670}},{"uid":"41831d89b85acfd5","status":"broken","statusDetails":"selenium.common.exceptions.TimeoutException: Message: 点击失败，找不到元素：xpath = //span[./span[text()=\"测试布局A\"]]/following-sibling::i[1]","time":{"start":1752761932487,"stop":1752761945103,"duration":12616}},{"uid":"353c77d1d4a3cbdb","status":"broken","statusDetails":"selenium.common.exceptions.TimeoutException: Message: 点击失败，找不到元素：xpath = //span[./span[text()=\"测试布局A\"]]/following-sibling::i[1]","time":{"start":1752761910023,"stop":1752761922704,"duration":12681}}],"categories":[{"name":"Test defects","matchedStatuses":[]}],"tags":[]},"source":"266a871cd00e9eee.json","parameterValues":[]}