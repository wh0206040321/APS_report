{"uid":"670e3dcbda6e3aa","name":"test_process_editnamesuccess","fullName":"Tests.test_items.test_process.TestProcessPage#test_process_editnamesuccess","historyId":"ec85f2a371b6c14fa4b30a44d07f622d","time":{"start":1760360483240,"stop":1760360493619,"duration":10379},"status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message: 点击失败，找不到元素：xpath = //tr[.//span[text()=\"1测试A\"]]/td[2]","statusTrace":"self = <Pages.itemsPage.process_page.ProcessPage object at 0x00000216A2383B50>, by_or_element = 'xpath', value = '//tr[.//span[text()=\"1测试A\"]]/td[2]', wait_time = 10\n\n    def click(self, by_or_element, value=None, wait_time=10):\n        if value is not None:\n            by = by_or_element\n            logging.info(f\"点击元素：By = {by}, Value = {value}\")\n            try:\n>               element = WebDriverWait(self.driver, wait_time).until(\n                    EC.element_to_be_clickable((by, value))\n                )\n\nPages\\base_page.py:45: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"cdf55cb79d7d0185503f5afbe22a4b8d\")>, method = <function element_to_be_clickable.<locals>._predicate at 0x00000216A2813D90>, message = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        -----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x7ff71bec6f65+78965]\nE       \tGetHandleVerifier [0x0x7ff71bec6fc0+79056]\nE       \t(No symbol) [0x0x7ff71bc59dda]\nE       \t(No symbol) [0x0x7ff71bcb02ea]\nE       \t(No symbol) [0x0x7ff71bcb059c]\nE       \t(No symbol) [0x0x7ff71bd03f37]\nE       \t(No symbol) [0x0x7ff71bcd86af]\nE       \t(No symbol) [0x0x7ff71bd00dbe]\nE       \t(No symbol) [0x0x7ff71bcd8443]\nE       \t(No symbol) [0x0x7ff71bca1311]\nE       \t(No symbol) [0x0x7ff71bca20a3]\nE       \tGetHandleVerifier [0x0x7ff71c17e26d+2926461]\nE       \tGetHandleVerifier [0x0x7ff71c178993+2903715]\nE       \tGetHandleVerifier [0x0x7ff71c196aed+3026941]\nE       \tGetHandleVerifier [0x0x7ff71bee16fe+187406]\nE       \tGetHandleVerifier [0x0x7ff71bee96ef+220159]\nE       \tGetHandleVerifier [0x0x7ff71becfaf4+114692]\nE       \tGetHandleVerifier [0x0x7ff71becfca9+115129]\nE       \tGetHandleVerifier [0x0x7ff71beb64d8+10728]\nE       \tBaseThreadInitThunk [0x0x7ffe68f47374+20]\nE       \tRtlUserThreadStart [0x0x7ffe691dcc91+33]\n\nmyenv\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:138: TimeoutException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_items.test_process.TestProcessPage object at 0x00000216A2089420>, login_to_process = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"cdf55cb79d7d0185503f5afbe22a4b8d\")>\n\n    @allure.story(\"修改工序名，显示颜色成功\")\n    # @pytest.mark.run(order=1)\n    def test_process_editnamesuccess(self, login_to_process):\n        driver = login_to_process  # WebDriver 实例\n        process = ProcessPage(driver)  # 用 driver 初始化 ProcessPage\n        name = \"1测试A\"\n        # 选中工序代码\n>       process.click_button('//tr[.//span[text()=\"1测试A\"]]/td[2]')\n\nTests\\test_items\\test_process.py:352: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nPages\\itemsPage\\process_page.py:39: in click_button\n    self.click(By.XPATH, xpath)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Pages.itemsPage.process_page.ProcessPage object at 0x00000216A2383B50>, by_or_element = 'xpath', value = '//tr[.//span[text()=\"1测试A\"]]/td[2]', wait_time = 10\n\n    def click(self, by_or_element, value=None, wait_time=10):\n        if value is not None:\n            by = by_or_element\n            logging.info(f\"点击元素：By = {by}, Value = {value}\")\n            try:\n                element = WebDriverWait(self.driver, wait_time).until(\n                    EC.element_to_be_clickable((by, value))\n                )\n            except TimeoutException:\n                logging.warning(f\"❌ 点击超时：元素 {by} = {value} 未在 {wait_time} 秒内变为可点击\")\n>               raise TimeoutException(f\"点击失败，找不到元素：{by} = {value}\")\nE               selenium.common.exceptions.TimeoutException: Message: 点击失败，找不到元素：xpath = //tr[.//span[text()=\"1测试A\"]]/td[2]\n\nPages\\base_page.py:50: TimeoutException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"login_to_process","time":{"start":1760360473803,"stop":1760360483240,"duration":9437},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false,"attachmentsCount":0}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message: 点击失败，找不到元素：xpath = //tr[.//span[text()=\"1测试A\"]]/td[2]","statusTrace":"self = <Pages.itemsPage.process_page.ProcessPage object at 0x00000216A2383B50>, by_or_element = 'xpath', value = '//tr[.//span[text()=\"1测试A\"]]/td[2]', wait_time = 10\n\n    def click(self, by_or_element, value=None, wait_time=10):\n        if value is not None:\n            by = by_or_element\n            logging.info(f\"点击元素：By = {by}, Value = {value}\")\n            try:\n>               element = WebDriverWait(self.driver, wait_time).until(\n                    EC.element_to_be_clickable((by, value))\n                )\n\nPages\\base_page.py:45: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"cdf55cb79d7d0185503f5afbe22a4b8d\")>, method = <function element_to_be_clickable.<locals>._predicate at 0x00000216A2813D90>, message = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        -----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x7ff71bec6f65+78965]\nE       \tGetHandleVerifier [0x0x7ff71bec6fc0+79056]\nE       \t(No symbol) [0x0x7ff71bc59dda]\nE       \t(No symbol) [0x0x7ff71bcb02ea]\nE       \t(No symbol) [0x0x7ff71bcb059c]\nE       \t(No symbol) [0x0x7ff71bd03f37]\nE       \t(No symbol) [0x0x7ff71bcd86af]\nE       \t(No symbol) [0x0x7ff71bd00dbe]\nE       \t(No symbol) [0x0x7ff71bcd8443]\nE       \t(No symbol) [0x0x7ff71bca1311]\nE       \t(No symbol) [0x0x7ff71bca20a3]\nE       \tGetHandleVerifier [0x0x7ff71c17e26d+2926461]\nE       \tGetHandleVerifier [0x0x7ff71c178993+2903715]\nE       \tGetHandleVerifier [0x0x7ff71c196aed+3026941]\nE       \tGetHandleVerifier [0x0x7ff71bee16fe+187406]\nE       \tGetHandleVerifier [0x0x7ff71bee96ef+220159]\nE       \tGetHandleVerifier [0x0x7ff71becfaf4+114692]\nE       \tGetHandleVerifier [0x0x7ff71becfca9+115129]\nE       \tGetHandleVerifier [0x0x7ff71beb64d8+10728]\nE       \tBaseThreadInitThunk [0x0x7ffe68f47374+20]\nE       \tRtlUserThreadStart [0x0x7ffe691dcc91+33]\n\nmyenv\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:138: TimeoutException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_items.test_process.TestProcessPage object at 0x00000216A2089420>, login_to_process = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"cdf55cb79d7d0185503f5afbe22a4b8d\")>\n\n    @allure.story(\"修改工序名，显示颜色成功\")\n    # @pytest.mark.run(order=1)\n    def test_process_editnamesuccess(self, login_to_process):\n        driver = login_to_process  # WebDriver 实例\n        process = ProcessPage(driver)  # 用 driver 初始化 ProcessPage\n        name = \"1测试A\"\n        # 选中工序代码\n>       process.click_button('//tr[.//span[text()=\"1测试A\"]]/td[2]')\n\nTests\\test_items\\test_process.py:352: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nPages\\itemsPage\\process_page.py:39: in click_button\n    self.click(By.XPATH, xpath)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Pages.itemsPage.process_page.ProcessPage object at 0x00000216A2383B50>, by_or_element = 'xpath', value = '//tr[.//span[text()=\"1测试A\"]]/td[2]', wait_time = 10\n\n    def click(self, by_or_element, value=None, wait_time=10):\n        if value is not None:\n            by = by_or_element\n            logging.info(f\"点击元素：By = {by}, Value = {value}\")\n            try:\n                element = WebDriverWait(self.driver, wait_time).until(\n                    EC.element_to_be_clickable((by, value))\n                )\n            except TimeoutException:\n                logging.warning(f\"❌ 点击超时：元素 {by} = {value} 未在 {wait_time} 秒内变为可点击\")\n>               raise TimeoutException(f\"点击失败，找不到元素：{by} = {value}\")\nE               selenium.common.exceptions.TimeoutException: Message: 点击失败，找不到元素：xpath = //tr[.//span[text()=\"1测试A\"]]/td[2]\n\nPages\\base_page.py:50: TimeoutException","steps":[],"attachments":[{"uid":"e6f097a954890e74","name":"test_process_editnamesuccess_failure","source":"e6f097a954890e74.png","type":"image/png","size":102413},{"uid":"5e31096f91898cfc","name":"test_process_editnamesuccess_source","source":"5e31096f91898cfc.html","type":"text/html","size":1254172},{"uid":"4ba0a5cf50877376","name":"log","source":"4ba0a5cf50877376.txt","type":"text/plain","size":1031}],"parameters":[],"stepsCount":0,"hasContent":true,"attachmentStep":false,"shouldDisplayMessage":true,"attachmentsCount":3},"afterStages":[{"name":"login_to_process::0","time":{"start":1760360493805,"stop":1760360495985,"duration":2180},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false,"attachmentsCount":0}],"labels":[{"name":"feature","value":"工序表测试用例"},{"name":"story","value":"修改工序名，显示颜色成功"},{"name":"parentSuite","value":"Tests.test_items"},{"name":"suite","value":"test_process"},{"name":"subSuite","value":"TestProcessPage"},{"name":"host","value":"WIN-20240820MJV"},{"name":"thread","value":"26508-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"Tests.test_items.test_process"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[]}],"tags":[]},"source":"670e3dcbda6e3aa.json","parameterValues":[]}