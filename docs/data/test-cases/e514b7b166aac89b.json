{"uid":"e514b7b166aac89b","name":"test_spec_selectsuccess3","fullName":"Tests.test_items.test_spec1.TestSpecPage#test_spec_selectsuccess3","historyId":"be5189ff8e06085172f194f7e7e8ba03","time":{"start":1761134716741,"stop":1761134734677,"duration":17936},"status":"failed","statusMessage":"AssertionError: 第 1 行不符合：td3=111, td5=1\nassert ('普' in '111' or 1 > 10)","statusTrace":"self = <test_items.test_spec1.TestSpecPage object at 0x0000027FE5D7B190>, login_to_spec1 = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"8a56dd5a2b271092344172bbc22244af\")>\n\n    @allure.story(\"以普开头或显示顺序>10\")\n    # @pytest.mark.run(order=1)\n    def test_spec_selectsuccess3(self, login_to_spec1):\n        driver = login_to_spec1  # WebDriver 实例\n        spec = Spec1Page(driver)  # 用 driver 初始化 Spec1Page\n    \n        # 点击查询\n        spec.click_sel_button()\n        sleep(1)\n    \n        # 定位名称输入框\n        element_to_double_click = driver.find_element(\n            By.XPATH,\n            '(//div[@class=\"vxe-table--render-wrapper\"])[3]/div[1]/div[2]//tr[1]/td[4]',\n        )\n        # 创建一个 ActionChains 对象\n        actions = ActionChains(driver)\n        # 双击命令\n        actions.double_click(element_to_double_click).perform()\n        sleep(1)\n        # 点击名称\n        spec.click_button('//div[text()=\"名称\" and contains(@optid,\"opt_\")]')\n        sleep(1)\n        # 点击（\n        spec.click_button(\n            '(//div[@class=\"vxe-table--render-wrapper\"])[3]/div[1]/div[2]//tr[1]/td[3]'\n        )\n        spec.click_button('//div[text()=\"(\" and contains(@optid,\"opt_\")]')\n        # 点击比较关系框\n        spec.click_button(\n            '(//div[@class=\"vxe-table--render-wrapper\"])[3]/div[1]/div[2]//tr[1]/td[5]//input'\n        )\n        sleep(1)\n        # 点击包含\n        spec.click_button('//div[text()=\"Begins with\" and contains(@optid,\"opt_\")]')\n        sleep(1)\n        # 点击输入数值\n        spec.enter_texts(\n            '(//div[@class=\"vxe-table--render-wrapper\"])[3]/div[1]/div[2]//tr[1]/td[6]//input',\n            \"普\",\n        )\n    \n        # 点击（\n        spec.click_button(\n            '(//div[@class=\"vxe-table--render-wrapper\"])[3]/div[1]/div[2]//tr[1]/td[7]'\n        )\n        spec.click_button('//div[text()=\")\" and contains(@optid,\"opt_\")]')\n    \n        sleep(1)\n        double_click = driver.find_element(\n            By.XPATH,\n            '(//div[@class=\"vxe-table--render-wrapper\"])[3]/div[1]/div[2]//tr[2]/td[2]',\n        )\n        # 双击命令\n        sleep(1)\n        actions.double_click(double_click).perform()\n        # 定义or元素的XPath\n        or_xpath = '//div[text()=\"or\" and contains(@optid,\"opt_\")]'\n    \n        try:\n            # 首先尝试直接查找并点击or元素\n            and_element = WebDriverWait(driver, 2).until(\n                EC.presence_of_element_located((By.XPATH, or_xpath))\n            )\n            and_element.click()\n        except:\n            # 如果直接查找失败，进入循环双击操作\n            max_attempts = 5\n            attempt = 0\n            or_found = False\n    \n            while attempt < max_attempts and not or_found:\n                try:\n                    # 执行双击操作\n                    actions.double_click(double_click).perform()\n                    sleep(1)\n    \n                    # 再次尝试查找or元素\n                    or_element = WebDriverWait(driver, 2).until(\n                        EC.presence_of_element_located((By.XPATH, or_xpath))\n                    )\n                    or_element.click()\n                    or_found = True\n                except:\n                    attempt += 1\n                    sleep(1)\n    \n            if not or_found:\n                raise Exception(f\"在{max_attempts}次尝试后仍未找到并点击到'or'元素\")\n    \n        # 点击（\n        spec.click_button(\n            '(//div[@class=\"vxe-table--render-wrapper\"])[3]/div[1]/div[2]//tr[2]/td[3]'\n        )\n        spec.click_button('//div[text()=\"(\" and contains(@optid,\"opt_\")]')\n        # 点击显示顺序\n        spec.click_button(\n            '(//div[@class=\"vxe-table--render-wrapper\"])[3]/div[1]/div[2]//tr[2]/td[4]'\n        )\n        spec.click_button('//div[text()=\"显示顺序\" and contains(@optid,\"opt_\")]')\n        sleep(1)\n        # 点击比较关系框\n        spec.click_button(\n            '(//div[@class=\"vxe-table--render-wrapper\"])[3]/div[1]/div[2]//tr[2]/td[5]//input'\n        )\n        # 点击>\n        spec.click_button('//div[text()=\">\" and contains(@optid,\"opt_\")]')\n        sleep(1)\n        # 点击输入数值10\n        spec.enter_texts(\n            '(//div[@class=\"vxe-table--render-wrapper\"])[3]/div[1]/div[2]//tr[2]/td[6]//input',\n            \"10\",\n        )\n        # 点击（\n        spec.click_button(\n            '(//div[@class=\"vxe-table--render-wrapper\"])[3]/div[1]/div[2]//tr[2]/td[7]'\n        )\n        spec.click_button('//div[text()=\")\" and contains(@optid,\"opt_\")]')\n    \n        sleep(1)\n    \n        # 点击确认\n        spec.click_button(\n            '(//div[@class=\"demo-drawer-footer\"]//span[text()=\"确定\"])[3]'\n        )\n        sleep(1)\n        # 获取目标表格第2个 vxe 表格中的所有数据行\n        xpath_rows = '(//table[contains(@class, \"vxe-table--body\")])[2]//tr[contains(@class,\"vxe-body--row\")]'\n    \n        # 先拿到总行数\n        base_rows = driver.find_elements(By.XPATH, xpath_rows)\n        total = len(base_rows)\n    \n        valid_count = 0\n        for idx in range(total):\n            try:\n                # 每次都按索引重新定位这一行\n                row = driver.find_elements(By.XPATH, xpath_rows)[idx]\n                tds = row.find_elements(By.TAG_NAME, \"td\")\n                td3 = tds[2].text.strip()\n                td5_raw = tds[4].text.strip()\n                td5_val = int(td5_raw) if td5_raw else 0\n    \n>               assert \"普\" in td3 or td5_val > 10, f\"第 {idx + 1} 行不符合：td3={td3}, td5={td5_raw}\"\nE               AssertionError: 第 1 行不符合：td3=111, td5=1\nE               assert ('普' in '111' or 1 > 10)\n\nTests\\test_items\\test_spec1.py:796: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"login_to_spec1","time":{"start":1761134705634,"stop":1761134716741,"duration":11107},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: 第 1 行不符合：td3=111, td5=1\nassert ('普' in '111' or 1 > 10)","statusTrace":"self = <test_items.test_spec1.TestSpecPage object at 0x0000027FE5D7B190>, login_to_spec1 = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"8a56dd5a2b271092344172bbc22244af\")>\n\n    @allure.story(\"以普开头或显示顺序>10\")\n    # @pytest.mark.run(order=1)\n    def test_spec_selectsuccess3(self, login_to_spec1):\n        driver = login_to_spec1  # WebDriver 实例\n        spec = Spec1Page(driver)  # 用 driver 初始化 Spec1Page\n    \n        # 点击查询\n        spec.click_sel_button()\n        sleep(1)\n    \n        # 定位名称输入框\n        element_to_double_click = driver.find_element(\n            By.XPATH,\n            '(//div[@class=\"vxe-table--render-wrapper\"])[3]/div[1]/div[2]//tr[1]/td[4]',\n        )\n        # 创建一个 ActionChains 对象\n        actions = ActionChains(driver)\n        # 双击命令\n        actions.double_click(element_to_double_click).perform()\n        sleep(1)\n        # 点击名称\n        spec.click_button('//div[text()=\"名称\" and contains(@optid,\"opt_\")]')\n        sleep(1)\n        # 点击（\n        spec.click_button(\n            '(//div[@class=\"vxe-table--render-wrapper\"])[3]/div[1]/div[2]//tr[1]/td[3]'\n        )\n        spec.click_button('//div[text()=\"(\" and contains(@optid,\"opt_\")]')\n        # 点击比较关系框\n        spec.click_button(\n            '(//div[@class=\"vxe-table--render-wrapper\"])[3]/div[1]/div[2]//tr[1]/td[5]//input'\n        )\n        sleep(1)\n        # 点击包含\n        spec.click_button('//div[text()=\"Begins with\" and contains(@optid,\"opt_\")]')\n        sleep(1)\n        # 点击输入数值\n        spec.enter_texts(\n            '(//div[@class=\"vxe-table--render-wrapper\"])[3]/div[1]/div[2]//tr[1]/td[6]//input',\n            \"普\",\n        )\n    \n        # 点击（\n        spec.click_button(\n            '(//div[@class=\"vxe-table--render-wrapper\"])[3]/div[1]/div[2]//tr[1]/td[7]'\n        )\n        spec.click_button('//div[text()=\")\" and contains(@optid,\"opt_\")]')\n    \n        sleep(1)\n        double_click = driver.find_element(\n            By.XPATH,\n            '(//div[@class=\"vxe-table--render-wrapper\"])[3]/div[1]/div[2]//tr[2]/td[2]',\n        )\n        # 双击命令\n        sleep(1)\n        actions.double_click(double_click).perform()\n        # 定义or元素的XPath\n        or_xpath = '//div[text()=\"or\" and contains(@optid,\"opt_\")]'\n    \n        try:\n            # 首先尝试直接查找并点击or元素\n            and_element = WebDriverWait(driver, 2).until(\n                EC.presence_of_element_located((By.XPATH, or_xpath))\n            )\n            and_element.click()\n        except:\n            # 如果直接查找失败，进入循环双击操作\n            max_attempts = 5\n            attempt = 0\n            or_found = False\n    \n            while attempt < max_attempts and not or_found:\n                try:\n                    # 执行双击操作\n                    actions.double_click(double_click).perform()\n                    sleep(1)\n    \n                    # 再次尝试查找or元素\n                    or_element = WebDriverWait(driver, 2).until(\n                        EC.presence_of_element_located((By.XPATH, or_xpath))\n                    )\n                    or_element.click()\n                    or_found = True\n                except:\n                    attempt += 1\n                    sleep(1)\n    \n            if not or_found:\n                raise Exception(f\"在{max_attempts}次尝试后仍未找到并点击到'or'元素\")\n    \n        # 点击（\n        spec.click_button(\n            '(//div[@class=\"vxe-table--render-wrapper\"])[3]/div[1]/div[2]//tr[2]/td[3]'\n        )\n        spec.click_button('//div[text()=\"(\" and contains(@optid,\"opt_\")]')\n        # 点击显示顺序\n        spec.click_button(\n            '(//div[@class=\"vxe-table--render-wrapper\"])[3]/div[1]/div[2]//tr[2]/td[4]'\n        )\n        spec.click_button('//div[text()=\"显示顺序\" and contains(@optid,\"opt_\")]')\n        sleep(1)\n        # 点击比较关系框\n        spec.click_button(\n            '(//div[@class=\"vxe-table--render-wrapper\"])[3]/div[1]/div[2]//tr[2]/td[5]//input'\n        )\n        # 点击>\n        spec.click_button('//div[text()=\">\" and contains(@optid,\"opt_\")]')\n        sleep(1)\n        # 点击输入数值10\n        spec.enter_texts(\n            '(//div[@class=\"vxe-table--render-wrapper\"])[3]/div[1]/div[2]//tr[2]/td[6]//input',\n            \"10\",\n        )\n        # 点击（\n        spec.click_button(\n            '(//div[@class=\"vxe-table--render-wrapper\"])[3]/div[1]/div[2]//tr[2]/td[7]'\n        )\n        spec.click_button('//div[text()=\")\" and contains(@optid,\"opt_\")]')\n    \n        sleep(1)\n    \n        # 点击确认\n        spec.click_button(\n            '(//div[@class=\"demo-drawer-footer\"]//span[text()=\"确定\"])[3]'\n        )\n        sleep(1)\n        # 获取目标表格第2个 vxe 表格中的所有数据行\n        xpath_rows = '(//table[contains(@class, \"vxe-table--body\")])[2]//tr[contains(@class,\"vxe-body--row\")]'\n    \n        # 先拿到总行数\n        base_rows = driver.find_elements(By.XPATH, xpath_rows)\n        total = len(base_rows)\n    \n        valid_count = 0\n        for idx in range(total):\n            try:\n                # 每次都按索引重新定位这一行\n                row = driver.find_elements(By.XPATH, xpath_rows)[idx]\n                tds = row.find_elements(By.TAG_NAME, \"td\")\n                td3 = tds[2].text.strip()\n                td5_raw = tds[4].text.strip()\n                td5_val = int(td5_raw) if td5_raw else 0\n    \n>               assert \"普\" in td3 or td5_val > 10, f\"第 {idx + 1} 行不符合：td3={td3}, td5={td5_raw}\"\nE               AssertionError: 第 1 行不符合：td3=111, td5=1\nE               assert ('普' in '111' or 1 > 10)\n\nTests\\test_items\\test_spec1.py:796: AssertionError","steps":[],"attachments":[{"uid":"a056dad126e9d855","name":"test_spec_selectsuccess3_failure","source":"a056dad126e9d855.png","type":"image/png","size":89873},{"uid":"8f172be4fcbb6bd2","name":"test_spec_selectsuccess3_source","source":"8f172be4fcbb6bd2.html","type":"text/html","size":1369571},{"uid":"72461191ea1e0967","name":"log","source":"72461191ea1e0967.txt","type":"text/plain","size":3049}],"parameters":[],"attachmentsCount":3,"shouldDisplayMessage":true,"stepsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"login_to_spec1::0","time":{"start":1761134734846,"stop":1761134736988,"duration":2142},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"story","value":"以普开头或显示顺序>10"},{"name":"feature","value":"生产特征表测试用例"},{"name":"parentSuite","value":"Tests.test_items"},{"name":"suite","value":"test_spec1"},{"name":"subSuite","value":"TestSpecPage"},{"name":"host","value":"WIN-20240820MJV"},{"name":"thread","value":"25856-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"Tests.test_items.test_spec1"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":[]},"source":"e514b7b166aac89b.json","parameterValues":[]}