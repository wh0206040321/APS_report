{"uid":"7d3941eb56e51b65","name":"test_home_add_template_repeat","fullName":"Tests.test_system.test_home.TestHomePage#test_home_add_template_repeat","historyId":"b27552da9164e8d404aef2123fffe2bd","time":{"start":1753406941741,"stop":1753406958000,"duration":16259},"status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n\tGetHandleVerifier [0x0x7ff619ef6f65+78965]\n\tGetHandleVerifier [0x0x7ff619ef6fc0+79056]\n\t(No symbol) [0x0x7ff619c89dda]\n\t(No symbol) [0x0x7ff619ce02ea]\n\t(No symbol) [0x0x7ff619ce059c]\n\t(No symbol) [0x0x7ff619d33f37]\n\t(No symbol) [0x0x7ff619d086af]\n\t(No symbol) [0x0x7ff619d30dbe]\n\t(No symbol) [0x0x7ff619d08443]\n\t(No symbol) [0x0x7ff619cd1311]\n\t(No symbol) [0x0x7ff619cd20a3]\n\tGetHandleVerifier [0x0x7ff61a1ae26d+2926461]\n\tGetHandleVerifier [0x0x7ff61a1a8993+2903715]\n\tGetHandleVerifier [0x0x7ff61a1c6aed+3026941]\n\tGetHandleVerifier [0x0x7ff619f116fe+187406]\n\tGetHandleVerifier [0x0x7ff619f196ef+220159]\n\tGetHandleVerifier [0x0x7ff619effaf4+114692]\n\tGetHandleVerifier [0x0x7ff619effca9+115129]\n\tGetHandleVerifier [0x0x7ff619ee64d8+10728]\n\tBaseThreadInitThunk [0x0x7ffe6d247374+20]\n\tRtlUserThreadStart [0x0x7ffe6d7fcc91+33]","statusTrace":"self = <test_home.TestHomePage object at 0x000001CA24E177C0>, login_to_home = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"c6f369594e2aeefaf7a34eb9913fac81\")>\n\n    @allure.story(\"添加模版，重复命名，点击确定，弹出提示不允许保存\")\n    # @pytest.mark.run(order=1)\n    def test_home_add_template_repeat(self, login_to_home):\n        driver = login_to_home  # WebDriver 实例\n        home = HomePage(driver)  # 用 driver 初始化 HomePage\n        home.click_button('(//div[@class=\"d-flex m-b-7 toolBar\"]//button)[2]')\n        home.enter_texts('//div[text()=\" 名称 \"]/following-sibling::div//input', \"测试模版confirm\")\n        home.click_button(\n            f'//div[@class=\"h-40px flex-justify-end flex-align-items-end b-t-s-d9e3f3\"]//span[text()=\"确定\"]')\n>       message = WebDriverWait(driver, 10).until(\n            EC.visibility_of_element_located(\n                (By.XPATH, '//div[@class=\"el-message el-message--error\"]//p')\n            )\n        )\n\nTests\\test_system\\test_home.py:162: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"c6f369594e2aeefaf7a34eb9913fac81\")>\nmethod = <function visibility_of_element_located.<locals>._predicate at 0x000001CA24E3E680>, message = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        -----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x7ff619ef6f65+78965]\nE       \tGetHandleVerifier [0x0x7ff619ef6fc0+79056]\nE       \t(No symbol) [0x0x7ff619c89dda]\nE       \t(No symbol) [0x0x7ff619ce02ea]\nE       \t(No symbol) [0x0x7ff619ce059c]\nE       \t(No symbol) [0x0x7ff619d33f37]\nE       \t(No symbol) [0x0x7ff619d086af]\nE       \t(No symbol) [0x0x7ff619d30dbe]\nE       \t(No symbol) [0x0x7ff619d08443]\nE       \t(No symbol) [0x0x7ff619cd1311]\nE       \t(No symbol) [0x0x7ff619cd20a3]\nE       \tGetHandleVerifier [0x0x7ff61a1ae26d+2926461]\nE       \tGetHandleVerifier [0x0x7ff61a1a8993+2903715]\nE       \tGetHandleVerifier [0x0x7ff61a1c6aed+3026941]\nE       \tGetHandleVerifier [0x0x7ff619f116fe+187406]\nE       \tGetHandleVerifier [0x0x7ff619f196ef+220159]\nE       \tGetHandleVerifier [0x0x7ff619effaf4+114692]\nE       \tGetHandleVerifier [0x0x7ff619effca9+115129]\nE       \tGetHandleVerifier [0x0x7ff619ee64d8+10728]\nE       \tBaseThreadInitThunk [0x0x7ffe6d247374+20]\nE       \tRtlUserThreadStart [0x0x7ffe6d7fcc91+33]\n\nmyenv\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:138: TimeoutException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"login_to_home","time":{"start":1753406928903,"stop":1753406941740,"duration":12837},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false,"attachmentsCount":0}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n\tGetHandleVerifier [0x0x7ff619ef6f65+78965]\n\tGetHandleVerifier [0x0x7ff619ef6fc0+79056]\n\t(No symbol) [0x0x7ff619c89dda]\n\t(No symbol) [0x0x7ff619ce02ea]\n\t(No symbol) [0x0x7ff619ce059c]\n\t(No symbol) [0x0x7ff619d33f37]\n\t(No symbol) [0x0x7ff619d086af]\n\t(No symbol) [0x0x7ff619d30dbe]\n\t(No symbol) [0x0x7ff619d08443]\n\t(No symbol) [0x0x7ff619cd1311]\n\t(No symbol) [0x0x7ff619cd20a3]\n\tGetHandleVerifier [0x0x7ff61a1ae26d+2926461]\n\tGetHandleVerifier [0x0x7ff61a1a8993+2903715]\n\tGetHandleVerifier [0x0x7ff61a1c6aed+3026941]\n\tGetHandleVerifier [0x0x7ff619f116fe+187406]\n\tGetHandleVerifier [0x0x7ff619f196ef+220159]\n\tGetHandleVerifier [0x0x7ff619effaf4+114692]\n\tGetHandleVerifier [0x0x7ff619effca9+115129]\n\tGetHandleVerifier [0x0x7ff619ee64d8+10728]\n\tBaseThreadInitThunk [0x0x7ffe6d247374+20]\n\tRtlUserThreadStart [0x0x7ffe6d7fcc91+33]","statusTrace":"self = <test_home.TestHomePage object at 0x000001CA24E177C0>, login_to_home = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"c6f369594e2aeefaf7a34eb9913fac81\")>\n\n    @allure.story(\"添加模版，重复命名，点击确定，弹出提示不允许保存\")\n    # @pytest.mark.run(order=1)\n    def test_home_add_template_repeat(self, login_to_home):\n        driver = login_to_home  # WebDriver 实例\n        home = HomePage(driver)  # 用 driver 初始化 HomePage\n        home.click_button('(//div[@class=\"d-flex m-b-7 toolBar\"]//button)[2]')\n        home.enter_texts('//div[text()=\" 名称 \"]/following-sibling::div//input', \"测试模版confirm\")\n        home.click_button(\n            f'//div[@class=\"h-40px flex-justify-end flex-align-items-end b-t-s-d9e3f3\"]//span[text()=\"确定\"]')\n>       message = WebDriverWait(driver, 10).until(\n            EC.visibility_of_element_located(\n                (By.XPATH, '//div[@class=\"el-message el-message--error\"]//p')\n            )\n        )\n\nTests\\test_system\\test_home.py:162: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"c6f369594e2aeefaf7a34eb9913fac81\")>\nmethod = <function visibility_of_element_located.<locals>._predicate at 0x000001CA24E3E680>, message = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        -----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x7ff619ef6f65+78965]\nE       \tGetHandleVerifier [0x0x7ff619ef6fc0+79056]\nE       \t(No symbol) [0x0x7ff619c89dda]\nE       \t(No symbol) [0x0x7ff619ce02ea]\nE       \t(No symbol) [0x0x7ff619ce059c]\nE       \t(No symbol) [0x0x7ff619d33f37]\nE       \t(No symbol) [0x0x7ff619d086af]\nE       \t(No symbol) [0x0x7ff619d30dbe]\nE       \t(No symbol) [0x0x7ff619d08443]\nE       \t(No symbol) [0x0x7ff619cd1311]\nE       \t(No symbol) [0x0x7ff619cd20a3]\nE       \tGetHandleVerifier [0x0x7ff61a1ae26d+2926461]\nE       \tGetHandleVerifier [0x0x7ff61a1a8993+2903715]\nE       \tGetHandleVerifier [0x0x7ff61a1c6aed+3026941]\nE       \tGetHandleVerifier [0x0x7ff619f116fe+187406]\nE       \tGetHandleVerifier [0x0x7ff619f196ef+220159]\nE       \tGetHandleVerifier [0x0x7ff619effaf4+114692]\nE       \tGetHandleVerifier [0x0x7ff619effca9+115129]\nE       \tGetHandleVerifier [0x0x7ff619ee64d8+10728]\nE       \tBaseThreadInitThunk [0x0x7ffe6d247374+20]\nE       \tRtlUserThreadStart [0x0x7ffe6d7fcc91+33]\n\nmyenv\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:138: TimeoutException","steps":[],"attachments":[{"uid":"ba169d579aa118b","name":"test_home_add_template_repeat_failure","source":"ba169d579aa118b.png","type":"image/png","size":104597},{"uid":"b828e66524df985c","name":"test_home_add_template_repeat_source","source":"b828e66524df985c.html","type":"text/html","size":1805128},{"uid":"2e27a5db48ee5ec1","name":"log","source":"2e27a5db48ee5ec1.txt","type":"text/plain","size":1072}],"parameters":[],"stepsCount":0,"hasContent":true,"attachmentStep":false,"shouldDisplayMessage":true,"attachmentsCount":3},"afterStages":[{"name":"login_to_home::0","time":{"start":1753406958256,"stop":1753406960381,"duration":2125},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false,"attachmentsCount":0}],"labels":[{"name":"story","value":"添加模版，重复命名，点击确定，弹出提示不允许保存"},{"name":"feature","value":"主页设置页用例"},{"name":"parentSuite","value":"Tests.test_system"},{"name":"suite","value":"test_home"},{"name":"subSuite","value":"TestHomePage"},{"name":"host","value":"WIN-20240820MJV"},{"name":"thread","value":"28116-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"Tests.test_system.test_home"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[]}],"tags":[]},"source":"7d3941eb56e51b65.json","parameterValues":[]}