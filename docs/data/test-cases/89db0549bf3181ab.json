{"uid":"89db0549bf3181ab","name":"test_function_ref","fullName":"Tests.test_items.test_function.TestFunctionPage#test_function_ref","historyId":"31db979d15c8e6d5f4cce50f38347b20","time":{"start":1753108381511,"stop":1753108396434,"duration":14923},"status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message:","statusTrace":"self = <test_items.test_function.TestFunctionPage object at 0x0000024D1EEB4550>\nlogin_to_function = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"913307425fabb9772e0ee192a9c9fa30\")>\n\n    @allure.story(\"导航栏刷新功能成功\")\n    # @pytest.mark.run(order=1)\n    def test_function_ref(self, login_to_function):\n        driver = login_to_function\n        function = FunctionPage(driver)\n        data_list = [\"客户\", \"物品组\", \"物品\"]\n        function.go_navigation(data_list[0], data_list[1], data_list[2])\n        item = function.get_find_element_xpath(f'//div[@class=\"scroll-body\"]//div[text()=\" {data_list[2]} \"]')\n        function.click_button(f'//div[@class=\"scroll-body\"]//div[text()=\" {data_list[2]} \"]')\n        # 物料代码筛选框输入123\n>       function.enter_texts(\n            '//p[text()=\"物料代码\"]/ancestor::div[2]//input', \"123\"\n        )\n\nTests\\test_items\\test_function.py:87: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nPages\\itemsPage\\function_page.py:17: in enter_texts\n    self.enter_text(By.XPATH, xpath, text)\nPages\\base_page.py:65: in enter_text\n    element = WebDriverWait(self.driver, wait_time).until(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"913307425fabb9772e0ee192a9c9fa30\")>\nmethod = <function visibility_of_element_located.<locals>._predicate at 0x0000024D213F3370>, message = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        -----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\nmyenv\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:138: TimeoutException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"login_to_function","time":{"start":1753108375102,"stop":1753108381511,"duration":6409},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":0,"attachmentStep":false,"hasContent":false}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message:","statusTrace":"self = <test_items.test_function.TestFunctionPage object at 0x0000024D1EEB4550>\nlogin_to_function = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"913307425fabb9772e0ee192a9c9fa30\")>\n\n    @allure.story(\"导航栏刷新功能成功\")\n    # @pytest.mark.run(order=1)\n    def test_function_ref(self, login_to_function):\n        driver = login_to_function\n        function = FunctionPage(driver)\n        data_list = [\"客户\", \"物品组\", \"物品\"]\n        function.go_navigation(data_list[0], data_list[1], data_list[2])\n        item = function.get_find_element_xpath(f'//div[@class=\"scroll-body\"]//div[text()=\" {data_list[2]} \"]')\n        function.click_button(f'//div[@class=\"scroll-body\"]//div[text()=\" {data_list[2]} \"]')\n        # 物料代码筛选框输入123\n>       function.enter_texts(\n            '//p[text()=\"物料代码\"]/ancestor::div[2]//input', \"123\"\n        )\n\nTests\\test_items\\test_function.py:87: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nPages\\itemsPage\\function_page.py:17: in enter_texts\n    self.enter_text(By.XPATH, xpath, text)\nPages\\base_page.py:65: in enter_text\n    element = WebDriverWait(self.driver, wait_time).until(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"913307425fabb9772e0ee192a9c9fa30\")>\nmethod = <function visibility_of_element_located.<locals>._predicate at 0x0000024D213F3370>, message = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        -----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\nmyenv\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:138: TimeoutException","steps":[],"attachments":[{"uid":"9da2ee94227776ab","name":"test_function_ref_failure","source":"9da2ee94227776ab.png","type":"image/png","size":78893},{"uid":"2186536fb520a71d","name":"test_function_ref_source","source":"2186536fb520a71d.html","type":"text/html","size":1425641},{"uid":"c9719c5eec6a224b","name":"log","source":"c9719c5eec6a224b.txt","type":"text/plain","size":1226}],"parameters":[],"attachmentsCount":3,"shouldDisplayMessage":true,"stepsCount":0,"attachmentStep":false,"hasContent":true},"afterStages":[{"name":"login_to_function::0","time":{"start":1753108396600,"stop":1753108398729,"duration":2129},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":0,"attachmentStep":false,"hasContent":false}],"labels":[{"name":"story","value":"导航栏刷新功能成功"},{"name":"feature","value":"导航栏测试用例"},{"name":"parentSuite","value":"Tests.test_items"},{"name":"suite","value":"test_function"},{"name":"subSuite","value":"TestFunctionPage"},{"name":"host","value":"WIN-20240820MJV"},{"name":"thread","value":"26464-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"Tests.test_items.test_function"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":[]},"source":"89db0549bf3181ab.json","parameterValues":[]}