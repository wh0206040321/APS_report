{"uid":"5291772677b379da","name":"test_menu_selectsuccess3","fullName":"Tests.test_system.test_menu.TestSMenuPage#test_menu_selectsuccess3","historyId":"0e4d21fd9167b083d711c070d37c006d","time":{"start":1760987192445,"stop":1760987218551,"duration":26106},"status":"failed","statusMessage":"AssertionError: 第 1 行不符合：td3=ABCDAA, td5=0\nassert ('计划' in 'ABCDAA' or 0 >= 4)","statusTrace":"self = <test_system.test_menu.TestSMenuPage object at 0x0000014AE2D447C0>, login_to_menu = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"412a9d4f1fe2f4a71964af58db1bde2a\")>\n\n    @allure.story(\"查询组件名称包含计划或物料优先度≥4\")\n    # @pytest.mark.run(order=1)\n    def test_menu_selectsuccess3(self, login_to_menu):\n        driver = login_to_menu  # WebDriver 实例\n        menu = ExpressionPage(driver)  # 用 driver 初始化 ExpressionPage\n    \n        name = \"计划\"\n        num = 4\n        # 点击查询\n        menu.click_all_button(\"查询\")\n        sleep(1)\n    \n        # 定位名称输入框\n        element_to_double_click = driver.find_element(\n            By.XPATH,\n            '(//div[@class=\"vxe-table--render-wrapper\"])[3]/div[1]/div[2]//tr[1]/td[4]',\n        )\n        # 创建一个 ActionChains 对象\n        actions = ActionChains(driver)\n        # 双击命令\n        actions.double_click(element_to_double_click).perform()\n        sleep(1)\n        # 点击物料名称\n        menu.click_button('//div[text()=\"组件名称\" and contains(@optid,\"opt_\")]')\n        sleep(1)\n        # 点击（\n        menu.click_button(\n            '(//div[@class=\"vxe-table--render-wrapper\"])[3]/div[1]/div[2]//tr[1]/td[3]'\n        )\n        menu.click_button('//div[text()=\"(\" and contains(@optid,\"opt_\")]')\n        # 点击比较关系框\n        menu.click_button(\n            '(//div[@class=\"vxe-table--render-wrapper\"])[3]/div[1]/div[2]//tr[1]/td[5]//input'\n        )\n        sleep(1)\n        # 点击包含\n        menu.click_button('//div[text()=\"包含\" and contains(@optid,\"opt_\")]')\n        sleep(1)\n        # 点击输入数值\n        menu.enter_texts(\n            '(//div[@class=\"vxe-table--render-wrapper\"])[3]/div[1]/div[2]//tr[1]/td[6]//input',\n            name,\n        )\n    \n        # 点击（\n        menu.click_button(\n            '(//div[@class=\"vxe-table--render-wrapper\"])[3]/div[1]/div[2]//tr[1]/td[7]'\n        )\n        menu.click_button('//div[text()=\")\" and contains(@optid,\"opt_\")]')\n    \n        sleep(1)\n        double_click = driver.find_element(\n            By.XPATH,\n            '(//div[@class=\"vxe-table--render-wrapper\"])[3]/div[1]/div[2]//tr[2]/td[2]',\n        )\n        # 双击命令\n        sleep(1)\n        actions.double_click(double_click).perform()\n        # 定义or元素的XPath\n        or_xpath = '//div[text()=\"or\" and contains(@optid,\"opt_\")]'\n    \n        try:\n            # 首先尝试直接查找并点击or元素\n            and_element = WebDriverWait(driver, 2).until(\n                EC.presence_of_element_located((By.XPATH, or_xpath))\n            )\n            and_element.click()\n        except:\n            # 如果直接查找失败，进入循环双击操作\n            max_attempts = 5\n            attempt = 0\n            or_found = False\n    \n            while attempt < max_attempts and not or_found:\n                try:\n                    # 执行双击操作\n                    actions.double_click(double_click).perform()\n                    sleep(1)\n    \n                    # 再次尝试查找or元素\n                    or_element = WebDriverWait(driver, 2).until(\n                        EC.presence_of_element_located((By.XPATH, or_xpath))\n                    )\n                    or_element.click()\n                    or_found = True\n                except:\n                    attempt += 1\n                    sleep(1)\n    \n            if not or_found:\n                raise Exception(f\"在{max_attempts}次尝试后仍未找到并点击到'or'元素\")\n    \n        # 点击（\n        menu.click_button(\n            '(//div[@class=\"vxe-table--render-wrapper\"])[3]/div[1]/div[2]//tr[2]/td[3]'\n        )\n        menu.click_button('//div[text()=\"(\" and contains(@optid,\"opt_\")]')\n        # 点击物料优先度\n        menu.click_button(\n            '(//div[@class=\"vxe-table--render-wrapper\"])[3]/div[1]/div[2]//tr[2]/td[4]'\n        )\n        menu.click_button('//div[text()=\"排序\" and contains(@optid,\"opt_\")]')\n        sleep(1)\n        # 点击比较关系框\n        menu.click_button(\n            '(//div[@class=\"vxe-table--render-wrapper\"])[3]/div[1]/div[2]//tr[2]/td[5]//input'\n        )\n        # 点击>\n        menu.click_button('//div[text()=\"≥\" and contains(@optid,\"opt_\")]')\n        sleep(1)\n        # 点击输入数值0\n        menu.enter_texts(\n            '(//div[@class=\"vxe-table--render-wrapper\"])[3]/div[1]/div[2]//tr[2]/td[6]//input',\n            num,\n        )\n        # 点击（\n        menu.click_button(\n            '(//div[@class=\"vxe-table--render-wrapper\"])[3]/div[1]/div[2]//tr[2]/td[7]'\n        )\n        menu.click_button('//div[text()=\")\" and contains(@optid,\"opt_\")]')\n    \n        sleep(1)\n    \n        # 点击确认\n        menu.click_button(\n            '(//div[@class=\"demo-drawer-footer\"])[2]/button[2]'\n        )\n        sleep(1)\n        # 获取目标表格第2个 vxe 表格中的所有数据行\n        xpath_rows = '(//table[contains(@class, \"vxe-table--body\")])[2]//tr[contains(@class,\"vxe-body--row\")]'\n    \n        # 先拿到总行数\n        base_rows = driver.find_elements(By.XPATH, xpath_rows)\n        total = len(base_rows)\n    \n        valid_count = 0\n        for idx in range(total):\n            try:\n                # 每次都按索引重新定位这一行\n                row = driver.find_elements(By.XPATH, xpath_rows)[idx]\n                tds = row.find_elements(By.TAG_NAME, \"td\")\n                td3 = tds[2].text.strip()\n                td5_raw = tds[4].text.strip()\n                td5_raw = int(td5_raw) if td5_raw else 0\n    \n>               assert name in td3 or td5_raw >= num, f\"第 {idx + 1} 行不符合：td3={td3}, td5={td5_raw}\"\nE               AssertionError: 第 1 行不符合：td3=ABCDAA, td5=0\nE               assert ('计划' in 'ABCDAA' or 0 >= 4)\n\nTests\\test_system\\test_menu.py:683: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"login_to_menu","time":{"start":1760987176449,"stop":1760987192444,"duration":15995},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"stepsCount":0,"attachmentStep":false,"shouldDisplayMessage":false,"attachmentsCount":0}],"testStage":{"status":"failed","statusMessage":"AssertionError: 第 1 行不符合：td3=ABCDAA, td5=0\nassert ('计划' in 'ABCDAA' or 0 >= 4)","statusTrace":"self = <test_system.test_menu.TestSMenuPage object at 0x0000014AE2D447C0>, login_to_menu = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"412a9d4f1fe2f4a71964af58db1bde2a\")>\n\n    @allure.story(\"查询组件名称包含计划或物料优先度≥4\")\n    # @pytest.mark.run(order=1)\n    def test_menu_selectsuccess3(self, login_to_menu):\n        driver = login_to_menu  # WebDriver 实例\n        menu = ExpressionPage(driver)  # 用 driver 初始化 ExpressionPage\n    \n        name = \"计划\"\n        num = 4\n        # 点击查询\n        menu.click_all_button(\"查询\")\n        sleep(1)\n    \n        # 定位名称输入框\n        element_to_double_click = driver.find_element(\n            By.XPATH,\n            '(//div[@class=\"vxe-table--render-wrapper\"])[3]/div[1]/div[2]//tr[1]/td[4]',\n        )\n        # 创建一个 ActionChains 对象\n        actions = ActionChains(driver)\n        # 双击命令\n        actions.double_click(element_to_double_click).perform()\n        sleep(1)\n        # 点击物料名称\n        menu.click_button('//div[text()=\"组件名称\" and contains(@optid,\"opt_\")]')\n        sleep(1)\n        # 点击（\n        menu.click_button(\n            '(//div[@class=\"vxe-table--render-wrapper\"])[3]/div[1]/div[2]//tr[1]/td[3]'\n        )\n        menu.click_button('//div[text()=\"(\" and contains(@optid,\"opt_\")]')\n        # 点击比较关系框\n        menu.click_button(\n            '(//div[@class=\"vxe-table--render-wrapper\"])[3]/div[1]/div[2]//tr[1]/td[5]//input'\n        )\n        sleep(1)\n        # 点击包含\n        menu.click_button('//div[text()=\"包含\" and contains(@optid,\"opt_\")]')\n        sleep(1)\n        # 点击输入数值\n        menu.enter_texts(\n            '(//div[@class=\"vxe-table--render-wrapper\"])[3]/div[1]/div[2]//tr[1]/td[6]//input',\n            name,\n        )\n    \n        # 点击（\n        menu.click_button(\n            '(//div[@class=\"vxe-table--render-wrapper\"])[3]/div[1]/div[2]//tr[1]/td[7]'\n        )\n        menu.click_button('//div[text()=\")\" and contains(@optid,\"opt_\")]')\n    \n        sleep(1)\n        double_click = driver.find_element(\n            By.XPATH,\n            '(//div[@class=\"vxe-table--render-wrapper\"])[3]/div[1]/div[2]//tr[2]/td[2]',\n        )\n        # 双击命令\n        sleep(1)\n        actions.double_click(double_click).perform()\n        # 定义or元素的XPath\n        or_xpath = '//div[text()=\"or\" and contains(@optid,\"opt_\")]'\n    \n        try:\n            # 首先尝试直接查找并点击or元素\n            and_element = WebDriverWait(driver, 2).until(\n                EC.presence_of_element_located((By.XPATH, or_xpath))\n            )\n            and_element.click()\n        except:\n            # 如果直接查找失败，进入循环双击操作\n            max_attempts = 5\n            attempt = 0\n            or_found = False\n    \n            while attempt < max_attempts and not or_found:\n                try:\n                    # 执行双击操作\n                    actions.double_click(double_click).perform()\n                    sleep(1)\n    \n                    # 再次尝试查找or元素\n                    or_element = WebDriverWait(driver, 2).until(\n                        EC.presence_of_element_located((By.XPATH, or_xpath))\n                    )\n                    or_element.click()\n                    or_found = True\n                except:\n                    attempt += 1\n                    sleep(1)\n    \n            if not or_found:\n                raise Exception(f\"在{max_attempts}次尝试后仍未找到并点击到'or'元素\")\n    \n        # 点击（\n        menu.click_button(\n            '(//div[@class=\"vxe-table--render-wrapper\"])[3]/div[1]/div[2]//tr[2]/td[3]'\n        )\n        menu.click_button('//div[text()=\"(\" and contains(@optid,\"opt_\")]')\n        # 点击物料优先度\n        menu.click_button(\n            '(//div[@class=\"vxe-table--render-wrapper\"])[3]/div[1]/div[2]//tr[2]/td[4]'\n        )\n        menu.click_button('//div[text()=\"排序\" and contains(@optid,\"opt_\")]')\n        sleep(1)\n        # 点击比较关系框\n        menu.click_button(\n            '(//div[@class=\"vxe-table--render-wrapper\"])[3]/div[1]/div[2]//tr[2]/td[5]//input'\n        )\n        # 点击>\n        menu.click_button('//div[text()=\"≥\" and contains(@optid,\"opt_\")]')\n        sleep(1)\n        # 点击输入数值0\n        menu.enter_texts(\n            '(//div[@class=\"vxe-table--render-wrapper\"])[3]/div[1]/div[2]//tr[2]/td[6]//input',\n            num,\n        )\n        # 点击（\n        menu.click_button(\n            '(//div[@class=\"vxe-table--render-wrapper\"])[3]/div[1]/div[2]//tr[2]/td[7]'\n        )\n        menu.click_button('//div[text()=\")\" and contains(@optid,\"opt_\")]')\n    \n        sleep(1)\n    \n        # 点击确认\n        menu.click_button(\n            '(//div[@class=\"demo-drawer-footer\"])[2]/button[2]'\n        )\n        sleep(1)\n        # 获取目标表格第2个 vxe 表格中的所有数据行\n        xpath_rows = '(//table[contains(@class, \"vxe-table--body\")])[2]//tr[contains(@class,\"vxe-body--row\")]'\n    \n        # 先拿到总行数\n        base_rows = driver.find_elements(By.XPATH, xpath_rows)\n        total = len(base_rows)\n    \n        valid_count = 0\n        for idx in range(total):\n            try:\n                # 每次都按索引重新定位这一行\n                row = driver.find_elements(By.XPATH, xpath_rows)[idx]\n                tds = row.find_elements(By.TAG_NAME, \"td\")\n                td3 = tds[2].text.strip()\n                td5_raw = tds[4].text.strip()\n                td5_raw = int(td5_raw) if td5_raw else 0\n    \n>               assert name in td3 or td5_raw >= num, f\"第 {idx + 1} 行不符合：td3={td3}, td5={td5_raw}\"\nE               AssertionError: 第 1 行不符合：td3=ABCDAA, td5=0\nE               assert ('计划' in 'ABCDAA' or 0 >= 4)\n\nTests\\test_system\\test_menu.py:683: AssertionError","steps":[],"attachments":[{"uid":"90421b979fb0bed6","name":"test_menu_selectsuccess3_failure","source":"90421b979fb0bed6.png","type":"image/png","size":114204},{"uid":"3c2685ebe664664a","name":"test_menu_selectsuccess3_source","source":"3c2685ebe664664a.html","type":"text/html","size":1341614},{"uid":"3881eb457c36aa37","name":"log","source":"3881eb457c36aa37.txt","type":"text/plain","size":3122}],"parameters":[],"hasContent":true,"stepsCount":0,"attachmentStep":false,"shouldDisplayMessage":true,"attachmentsCount":3},"afterStages":[{"name":"login_to_menu::0","time":{"start":1760987219244,"stop":1760987221759,"duration":2515},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"stepsCount":0,"attachmentStep":false,"shouldDisplayMessage":false,"attachmentsCount":0}],"labels":[{"name":"feature","value":"菜单组件页用例"},{"name":"story","value":"查询组件名称包含计划或物料优先度≥4"},{"name":"parentSuite","value":"Tests.test_system"},{"name":"suite","value":"test_menu"},{"name":"subSuite","value":"TestSMenuPage"},{"name":"host","value":"WIN-20240820MJV"},{"name":"thread","value":"3232-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"Tests.test_system.test_menu"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[]}],"tags":[]},"source":"5291772677b379da.json","parameterValues":[]}