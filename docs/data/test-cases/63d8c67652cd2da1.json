{"uid":"63d8c67652cd2da1","name":"test_customer_editcodesuccess","fullName":"Tests.test_items.test_customer.TestCustomerPage#test_customer_editcodesuccess","historyId":"31fa0fbe276e272bf0e82c276934e570","time":{"start":1758714891367,"stop":1758714901512,"duration":10145},"status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message: 点击失败，找不到元素：xpath = //tr[./td[2][.//span[text()=\"1测试A\"]]]/td[2]","statusTrace":"self = <Pages.itemsPage.customer_page.CustomerPage object at 0x00000271F36E08E0>, by_or_element = 'xpath', value = '//tr[./td[2][.//span[text()=\"1测试A\"]]]/td[2]', wait_time = 10\n\n    def click(self, by_or_element, value=None, wait_time=10):\n        if value is not None:\n            by = by_or_element\n            logging.info(f\"点击元素：By = {by}, Value = {value}\")\n            try:\n>               element = WebDriverWait(self.driver, wait_time).until(\n                    EC.element_to_be_clickable((by, value))\n                )\n\nPages\\base_page.py:45: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"6453350a25db407bd6ca0bffecf9c786\")>, method = <function element_to_be_clickable.<locals>._predicate at 0x00000271F37B1750>, message = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        -----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x7ff7ee406f65+78965]\nE       \tGetHandleVerifier [0x0x7ff7ee406fc0+79056]\nE       \t(No symbol) [0x0x7ff7ee199dda]\nE       \t(No symbol) [0x0x7ff7ee1f02ea]\nE       \t(No symbol) [0x0x7ff7ee1f059c]\nE       \t(No symbol) [0x0x7ff7ee243f37]\nE       \t(No symbol) [0x0x7ff7ee2186af]\nE       \t(No symbol) [0x0x7ff7ee240dbe]\nE       \t(No symbol) [0x0x7ff7ee218443]\nE       \t(No symbol) [0x0x7ff7ee1e1311]\nE       \t(No symbol) [0x0x7ff7ee1e20a3]\nE       \tGetHandleVerifier [0x0x7ff7ee6be26d+2926461]\nE       \tGetHandleVerifier [0x0x7ff7ee6b8993+2903715]\nE       \tGetHandleVerifier [0x0x7ff7ee6d6aed+3026941]\nE       \tGetHandleVerifier [0x0x7ff7ee4216fe+187406]\nE       \tGetHandleVerifier [0x0x7ff7ee4296ef+220159]\nE       \tGetHandleVerifier [0x0x7ff7ee40faf4+114692]\nE       \tGetHandleVerifier [0x0x7ff7ee40fca9+115129]\nE       \tGetHandleVerifier [0x0x7ff7ee3f64d8+10728]\nE       \tBaseThreadInitThunk [0x0x7ffcefb37374+20]\nE       \tRtlUserThreadStart [0x0x7ffcf06bcc91+33]\n\nmyenv\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:138: TimeoutException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_items.test_customer.TestCustomerPage object at 0x00000271F339C3D0>, login_to_customer = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"6453350a25db407bd6ca0bffecf9c786\")>\n\n    @allure.story(\"修改客户代码成功\")\n    # @pytest.mark.run(order=1)\n    def test_customer_editcodesuccess(self, login_to_customer):\n        driver = login_to_customer  # WebDriver 实例\n        customer = CustomerPage(driver)  # 用 driver 初始化 CustomerPage\n        name = \"1测试A\"\n        # 选中1测试A客户代码\n>       customer.click_button(f'//tr[./td[2][.//span[text()=\"{name}\"]]]/td[2]')\n\nTests\\test_items\\test_customer.py:306: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nPages\\itemsPage\\customer_page.py:42: in click_button\n    self.click(By.XPATH, xpath)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Pages.itemsPage.customer_page.CustomerPage object at 0x00000271F36E08E0>, by_or_element = 'xpath', value = '//tr[./td[2][.//span[text()=\"1测试A\"]]]/td[2]', wait_time = 10\n\n    def click(self, by_or_element, value=None, wait_time=10):\n        if value is not None:\n            by = by_or_element\n            logging.info(f\"点击元素：By = {by}, Value = {value}\")\n            try:\n                element = WebDriverWait(self.driver, wait_time).until(\n                    EC.element_to_be_clickable((by, value))\n                )\n            except TimeoutException:\n                logging.warning(f\"❌ 点击超时：元素 {by} = {value} 未在 {wait_time} 秒内变为可点击\")\n>               raise TimeoutException(f\"点击失败，找不到元素：{by} = {value}\")\nE               selenium.common.exceptions.TimeoutException: Message: 点击失败，找不到元素：xpath = //tr[./td[2][.//span[text()=\"1测试A\"]]]/td[2]\n\nPages\\base_page.py:50: TimeoutException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"login_to_customer","time":{"start":1758714881961,"stop":1758714891366,"duration":9405},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentStep":false,"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message: 点击失败，找不到元素：xpath = //tr[./td[2][.//span[text()=\"1测试A\"]]]/td[2]","statusTrace":"self = <Pages.itemsPage.customer_page.CustomerPage object at 0x00000271F36E08E0>, by_or_element = 'xpath', value = '//tr[./td[2][.//span[text()=\"1测试A\"]]]/td[2]', wait_time = 10\n\n    def click(self, by_or_element, value=None, wait_time=10):\n        if value is not None:\n            by = by_or_element\n            logging.info(f\"点击元素：By = {by}, Value = {value}\")\n            try:\n>               element = WebDriverWait(self.driver, wait_time).until(\n                    EC.element_to_be_clickable((by, value))\n                )\n\nPages\\base_page.py:45: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"6453350a25db407bd6ca0bffecf9c786\")>, method = <function element_to_be_clickable.<locals>._predicate at 0x00000271F37B1750>, message = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        -----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x7ff7ee406f65+78965]\nE       \tGetHandleVerifier [0x0x7ff7ee406fc0+79056]\nE       \t(No symbol) [0x0x7ff7ee199dda]\nE       \t(No symbol) [0x0x7ff7ee1f02ea]\nE       \t(No symbol) [0x0x7ff7ee1f059c]\nE       \t(No symbol) [0x0x7ff7ee243f37]\nE       \t(No symbol) [0x0x7ff7ee2186af]\nE       \t(No symbol) [0x0x7ff7ee240dbe]\nE       \t(No symbol) [0x0x7ff7ee218443]\nE       \t(No symbol) [0x0x7ff7ee1e1311]\nE       \t(No symbol) [0x0x7ff7ee1e20a3]\nE       \tGetHandleVerifier [0x0x7ff7ee6be26d+2926461]\nE       \tGetHandleVerifier [0x0x7ff7ee6b8993+2903715]\nE       \tGetHandleVerifier [0x0x7ff7ee6d6aed+3026941]\nE       \tGetHandleVerifier [0x0x7ff7ee4216fe+187406]\nE       \tGetHandleVerifier [0x0x7ff7ee4296ef+220159]\nE       \tGetHandleVerifier [0x0x7ff7ee40faf4+114692]\nE       \tGetHandleVerifier [0x0x7ff7ee40fca9+115129]\nE       \tGetHandleVerifier [0x0x7ff7ee3f64d8+10728]\nE       \tBaseThreadInitThunk [0x0x7ffcefb37374+20]\nE       \tRtlUserThreadStart [0x0x7ffcf06bcc91+33]\n\nmyenv\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:138: TimeoutException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_items.test_customer.TestCustomerPage object at 0x00000271F339C3D0>, login_to_customer = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"6453350a25db407bd6ca0bffecf9c786\")>\n\n    @allure.story(\"修改客户代码成功\")\n    # @pytest.mark.run(order=1)\n    def test_customer_editcodesuccess(self, login_to_customer):\n        driver = login_to_customer  # WebDriver 实例\n        customer = CustomerPage(driver)  # 用 driver 初始化 CustomerPage\n        name = \"1测试A\"\n        # 选中1测试A客户代码\n>       customer.click_button(f'//tr[./td[2][.//span[text()=\"{name}\"]]]/td[2]')\n\nTests\\test_items\\test_customer.py:306: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nPages\\itemsPage\\customer_page.py:42: in click_button\n    self.click(By.XPATH, xpath)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Pages.itemsPage.customer_page.CustomerPage object at 0x00000271F36E08E0>, by_or_element = 'xpath', value = '//tr[./td[2][.//span[text()=\"1测试A\"]]]/td[2]', wait_time = 10\n\n    def click(self, by_or_element, value=None, wait_time=10):\n        if value is not None:\n            by = by_or_element\n            logging.info(f\"点击元素：By = {by}, Value = {value}\")\n            try:\n                element = WebDriverWait(self.driver, wait_time).until(\n                    EC.element_to_be_clickable((by, value))\n                )\n            except TimeoutException:\n                logging.warning(f\"❌ 点击超时：元素 {by} = {value} 未在 {wait_time} 秒内变为可点击\")\n>               raise TimeoutException(f\"点击失败，找不到元素：{by} = {value}\")\nE               selenium.common.exceptions.TimeoutException: Message: 点击失败，找不到元素：xpath = //tr[./td[2][.//span[text()=\"1测试A\"]]]/td[2]\n\nPages\\base_page.py:50: TimeoutException","steps":[],"attachments":[{"uid":"b5ec0c872eee5a3e","name":"test_customer_editcodesuccess_failure","source":"b5ec0c872eee5a3e.png","type":"image/png","size":110201},{"uid":"1d4549661b579f3e","name":"test_customer_editcodesuccess_source","source":"1d4549661b579f3e.html","type":"text/html","size":1338496},{"uid":"ff2ce984adf365be","name":"log","source":"ff2ce984adf365be.txt","type":"text/plain","size":1049}],"parameters":[],"hasContent":true,"attachmentStep":false,"stepsCount":0,"shouldDisplayMessage":true,"attachmentsCount":3},"afterStages":[{"name":"login_to_customer::0","time":{"start":1758714901706,"stop":1758714903866,"duration":2160},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentStep":false,"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0}],"labels":[{"name":"story","value":"修改客户代码成功"},{"name":"feature","value":"客户表测试用例"},{"name":"parentSuite","value":"Tests.test_items"},{"name":"suite","value":"test_customer"},{"name":"subSuite","value":"TestCustomerPage"},{"name":"host","value":"WIN-20240820MJV"},{"name":"thread","value":"15904-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"Tests.test_items.test_customer"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[]}],"tags":[]},"source":"63d8c67652cd2da1.json","parameterValues":[]}