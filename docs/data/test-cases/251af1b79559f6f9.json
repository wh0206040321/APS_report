{"uid":"251af1b79559f6f9","name":"test_coverage_textverify","fullName":"Tests.test_items.test_coverage.TestCoveragePage#test_coverage_textverify","historyId":"0220fdb92bfa413147af274c57f8d93e","time":{"start":1761140600070,"stop":1761140613646,"duration":13576},"status":"failed","statusMessage":"AssertionError: assert ('1\\u6d4b\\u8bd5\\u8d44\\u6e90B' == '1\\u6d4b\\u8bd5\\u8d44\\u6e90B'\n  \n  \u001B[0m\u001B[90m \u001B[39;49;00m 1测试资源B\u001B[90m\u001B[39;49;00m and '2027/08/21 00:00:00' == '2027/08/21 00:00:00'\n  \n  \u001B[0m\u001B[90m \u001B[39;49;00m 2027/08/21 00:00:00\u001B[90m\u001B[39;49;00m and '2028/07/21 00:00:00' == '2028/07/21 00:00:00'\n  \n  \u001B[0m\u001B[90m \u001B[39;49;00m 2028/07/21 00:00:00\u001B[90m\u001B[39;49;00m and '2027/08/21 0...7/21 00:00:00' == '2027/08/21 0...7/21 00:00:00'\n  \n  \u001B[0m\u001B[90m \u001B[39;49;00m 2027/08/21 00:00:00;2028/07/21 00:00:00\u001B[90m\u001B[39;49;00m and '4' == '4'\n  \n  \u001B[0m\u001B[90m \u001B[39;49;00m 4\u001B[90m\u001B[39;49;00m and '111111111111...1111111111111' == '111111111111...1111111111111'\n  \n  \u001B[0m\u001B[90m \u001B[39;49;00m 111111111111111133331122221111222221111111113333111111144444111111111111111111111111111111111111111111111111\u001B[90m\u001B[39;49;00m and '10000' == '9999999999'\n  \n  \u001B[0m\u001B[91m- 9999999999\u001B[39;49;00m\u001B[90m\u001B[39;49;00m\n  \u001B[92m+ 10000\u001B[39;49;00m\u001B[90m\u001B[39;49;00m)","statusTrace":"self = <test_items.test_coverage.TestCoveragePage object at 0x0000027FE5CE5D20>, login_to_coverage = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"7163ea16790fe61956b53d6ee7894197\")>\n\n    @allure.story(\"校验数字文本框和文本框成功\")\n    # @pytest.mark.run(order=1)\n    def test_coverage_textverify(self, login_to_coverage):\n        driver = login_to_coverage  # WebDriver 实例\n        coverage = Coverage(driver)  # 用 driver 初始化 Coverage\n        start = \"2027/08/21 00:00:00\"\n        end = \"2028/07/21 00:00:00\"\n        name = '111111111111111133331122221111222221111111113333111111144444111111111111111111111111111111111111111111111111'\n        coverage.click_add_button()\n    \n        # 点击资源\n        coverage.click_button(\n            '//div[@id=\"2ssy7pog-1nb7\"]//i'\n        )\n        # 勾选框\n        random_int = random.randint(1, 8)\n        sleep(1)\n        coverage.click_button(f'(//span[@class=\"vxe-cell--checkbox\"])[{random_int}]')\n        sleep(1)\n        coverage.click_button(\n            '(//div[@class=\"h-40px flex-justify-end vxe-modal-footer1 flex-align-items-end b-t-s-d9e3f3\"])[2]/button[1]'\n        )\n        sleep(1)\n        # 获取勾选的资源代码\n        resource = coverage.get_find_element_xpath(\n            '//div[@id=\"2ssy7pog-1nb7\"]//input'\n        ).get_attribute(\"value\")\n    \n        coverage.enter_texts(f'//div[@id=\"9la8xi09-07ws\"]//input', 3)\n    \n        # 时序\n        coverage.enter_texts(\n            '//div[@id=\"tg89jocr-6to2\"]//input', f\"{start};{end}\"\n        )\n        chronology = coverage.get_find_element_xpath(\n            '//div[@id=\"tg89jocr-6to2\"]//input'\n        ).get_attribute(\"value\")\n    \n        # 资源量\n        coverage.enter_texts('//div[@id=\"k0z05daz-8tok\"]//input', \"4\")\n        resources = coverage.get_find_element_xpath(\n            '//div[@id=\"k0z05daz-8tok\"]//input'\n        ).get_attribute(\"value\")\n        # 校验文本框\n        coverage.enter_texts('//div[@id=\"9la8xi09-07ws\"]//input', name)\n        coverage.enter_texts('//div[@id=\"luvfyssv-uxe2\"]//input', name)\n        sleep(1)\n        coverage.click_button(\n            '(//div[@class=\"h-40px flex-justify-end vxe-modal-footer1 flex-align-items-end b-t-s-d9e3f3\"])[1]/button[1]'\n        )\n        driver.execute_script(\"document.body.style.zoom='0.6'\")\n        sleep(1)\n        coverage.click_button(\n            '//span[text()=\" 更新时间\"]/following-sibling::div'\n        )\n        sleep(1)\n        coverage.click_button(\n            '//span[text()=\" 更新时间\"]/following-sibling::div'\n        )\n        sleep(1)\n        addcoverage = coverage.get_find_element_xpath(\n            f'(//span[text()=\"{resource}\"])[1]/ancestor::tr[1]/td[2]'\n        ).text\n        addstart = coverage.get_find_element_xpath(\n            f'(//span[text()=\"{resource}\"])[1]/ancestor::tr[1]/td[3]'\n        ).text\n        addend = coverage.get_find_element_xpath(\n            f'(//span[text()=\"{resource}\"])[1]/ancestor::tr[1]/td[4]'\n        ).text\n        addchronology = coverage.get_find_element_xpath(\n            f'(//span[text()=\"{resource}\"])[1]/ancestor::tr[1]/td[7]'\n        ).text\n        addresources = coverage.get_find_element_xpath(\n            f'(//span[text()=\"{resource}\"])[1]/ancestor::tr[1]/td[8]'\n        ).text\n        text_ = coverage.get_find_element_xpath(\n            f'(//span[text()=\"{resource}\"])[1]/ancestor::tr[1]/td[12]'\n        ).text\n        num_ = coverage.get_find_element_xpath(\n            f'(//span[text()=\"{resource}\"])[1]/ancestor::tr[1]/td[5]'\n        ).text\n>       assert (\n                resource == addcoverage\n                and start == addstart\n                and end == addend\n                and chronology == addchronology\n                and resources == addresources\n                and text_ == name\n                and num_ == '9999999999'\n        )\nE       AssertionError: assert ('1\\u6d4b\\u8bd5\\u8d44\\u6e90B' == '1\\u6d4b\\u8bd5\\u8d44\\u6e90B'\nE         \nE         \u001B[0m\u001B[90m \u001B[39;49;00m 1测试资源B\u001B[90m\u001B[39;49;00m and '2027/08/21 00:00:00' == '2027/08/21 00:00:00'\nE         \nE         \u001B[0m\u001B[90m \u001B[39;49;00m 2027/08/21 00:00:00\u001B[90m\u001B[39;49;00m and '2028/07/21 00:00:00' == '2028/07/21 00:00:00'\nE         \nE         \u001B[0m\u001B[90m \u001B[39;49;00m 2028/07/21 00:00:00\u001B[90m\u001B[39;49;00m and '2027/08/21 0...7/21 00:00:00' == '2027/08/21 0...7/21 00:00:00'\nE         \nE         \u001B[0m\u001B[90m \u001B[39;49;00m 2027/08/21 00:00:00;2028/07/21 00:00:00\u001B[90m\u001B[39;49;00m and '4' == '4'\nE         \nE         \u001B[0m\u001B[90m \u001B[39;49;00m 4\u001B[90m\u001B[39;49;00m and '111111111111...1111111111111' == '111111111111...1111111111111'\nE         \nE         \u001B[0m\u001B[90m \u001B[39;49;00m 111111111111111133331122221111222221111111113333111111144444111111111111111111111111111111111111111111111111\u001B[90m\u001B[39;49;00m and '10000' == '9999999999'\nE         \nE         \u001B[0m\u001B[91m- 9999999999\u001B[39;49;00m\u001B[90m\u001B[39;49;00m\nE         \u001B[92m+ 10000\u001B[39;49;00m\u001B[90m\u001B[39;49;00m)\n\nTests\\test_items\\test_coverage.py:401: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"login_to_coverage","time":{"start":1761140586975,"stop":1761140600069,"duration":13094},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert ('1\\u6d4b\\u8bd5\\u8d44\\u6e90B' == '1\\u6d4b\\u8bd5\\u8d44\\u6e90B'\n  \n  \u001B[0m\u001B[90m \u001B[39;49;00m 1测试资源B\u001B[90m\u001B[39;49;00m and '2027/08/21 00:00:00' == '2027/08/21 00:00:00'\n  \n  \u001B[0m\u001B[90m \u001B[39;49;00m 2027/08/21 00:00:00\u001B[90m\u001B[39;49;00m and '2028/07/21 00:00:00' == '2028/07/21 00:00:00'\n  \n  \u001B[0m\u001B[90m \u001B[39;49;00m 2028/07/21 00:00:00\u001B[90m\u001B[39;49;00m and '2027/08/21 0...7/21 00:00:00' == '2027/08/21 0...7/21 00:00:00'\n  \n  \u001B[0m\u001B[90m \u001B[39;49;00m 2027/08/21 00:00:00;2028/07/21 00:00:00\u001B[90m\u001B[39;49;00m and '4' == '4'\n  \n  \u001B[0m\u001B[90m \u001B[39;49;00m 4\u001B[90m\u001B[39;49;00m and '111111111111...1111111111111' == '111111111111...1111111111111'\n  \n  \u001B[0m\u001B[90m \u001B[39;49;00m 111111111111111133331122221111222221111111113333111111144444111111111111111111111111111111111111111111111111\u001B[90m\u001B[39;49;00m and '10000' == '9999999999'\n  \n  \u001B[0m\u001B[91m- 9999999999\u001B[39;49;00m\u001B[90m\u001B[39;49;00m\n  \u001B[92m+ 10000\u001B[39;49;00m\u001B[90m\u001B[39;49;00m)","statusTrace":"self = <test_items.test_coverage.TestCoveragePage object at 0x0000027FE5CE5D20>, login_to_coverage = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"7163ea16790fe61956b53d6ee7894197\")>\n\n    @allure.story(\"校验数字文本框和文本框成功\")\n    # @pytest.mark.run(order=1)\n    def test_coverage_textverify(self, login_to_coverage):\n        driver = login_to_coverage  # WebDriver 实例\n        coverage = Coverage(driver)  # 用 driver 初始化 Coverage\n        start = \"2027/08/21 00:00:00\"\n        end = \"2028/07/21 00:00:00\"\n        name = '111111111111111133331122221111222221111111113333111111144444111111111111111111111111111111111111111111111111'\n        coverage.click_add_button()\n    \n        # 点击资源\n        coverage.click_button(\n            '//div[@id=\"2ssy7pog-1nb7\"]//i'\n        )\n        # 勾选框\n        random_int = random.randint(1, 8)\n        sleep(1)\n        coverage.click_button(f'(//span[@class=\"vxe-cell--checkbox\"])[{random_int}]')\n        sleep(1)\n        coverage.click_button(\n            '(//div[@class=\"h-40px flex-justify-end vxe-modal-footer1 flex-align-items-end b-t-s-d9e3f3\"])[2]/button[1]'\n        )\n        sleep(1)\n        # 获取勾选的资源代码\n        resource = coverage.get_find_element_xpath(\n            '//div[@id=\"2ssy7pog-1nb7\"]//input'\n        ).get_attribute(\"value\")\n    \n        coverage.enter_texts(f'//div[@id=\"9la8xi09-07ws\"]//input', 3)\n    \n        # 时序\n        coverage.enter_texts(\n            '//div[@id=\"tg89jocr-6to2\"]//input', f\"{start};{end}\"\n        )\n        chronology = coverage.get_find_element_xpath(\n            '//div[@id=\"tg89jocr-6to2\"]//input'\n        ).get_attribute(\"value\")\n    \n        # 资源量\n        coverage.enter_texts('//div[@id=\"k0z05daz-8tok\"]//input', \"4\")\n        resources = coverage.get_find_element_xpath(\n            '//div[@id=\"k0z05daz-8tok\"]//input'\n        ).get_attribute(\"value\")\n        # 校验文本框\n        coverage.enter_texts('//div[@id=\"9la8xi09-07ws\"]//input', name)\n        coverage.enter_texts('//div[@id=\"luvfyssv-uxe2\"]//input', name)\n        sleep(1)\n        coverage.click_button(\n            '(//div[@class=\"h-40px flex-justify-end vxe-modal-footer1 flex-align-items-end b-t-s-d9e3f3\"])[1]/button[1]'\n        )\n        driver.execute_script(\"document.body.style.zoom='0.6'\")\n        sleep(1)\n        coverage.click_button(\n            '//span[text()=\" 更新时间\"]/following-sibling::div'\n        )\n        sleep(1)\n        coverage.click_button(\n            '//span[text()=\" 更新时间\"]/following-sibling::div'\n        )\n        sleep(1)\n        addcoverage = coverage.get_find_element_xpath(\n            f'(//span[text()=\"{resource}\"])[1]/ancestor::tr[1]/td[2]'\n        ).text\n        addstart = coverage.get_find_element_xpath(\n            f'(//span[text()=\"{resource}\"])[1]/ancestor::tr[1]/td[3]'\n        ).text\n        addend = coverage.get_find_element_xpath(\n            f'(//span[text()=\"{resource}\"])[1]/ancestor::tr[1]/td[4]'\n        ).text\n        addchronology = coverage.get_find_element_xpath(\n            f'(//span[text()=\"{resource}\"])[1]/ancestor::tr[1]/td[7]'\n        ).text\n        addresources = coverage.get_find_element_xpath(\n            f'(//span[text()=\"{resource}\"])[1]/ancestor::tr[1]/td[8]'\n        ).text\n        text_ = coverage.get_find_element_xpath(\n            f'(//span[text()=\"{resource}\"])[1]/ancestor::tr[1]/td[12]'\n        ).text\n        num_ = coverage.get_find_element_xpath(\n            f'(//span[text()=\"{resource}\"])[1]/ancestor::tr[1]/td[5]'\n        ).text\n>       assert (\n                resource == addcoverage\n                and start == addstart\n                and end == addend\n                and chronology == addchronology\n                and resources == addresources\n                and text_ == name\n                and num_ == '9999999999'\n        )\nE       AssertionError: assert ('1\\u6d4b\\u8bd5\\u8d44\\u6e90B' == '1\\u6d4b\\u8bd5\\u8d44\\u6e90B'\nE         \nE         \u001B[0m\u001B[90m \u001B[39;49;00m 1测试资源B\u001B[90m\u001B[39;49;00m and '2027/08/21 00:00:00' == '2027/08/21 00:00:00'\nE         \nE         \u001B[0m\u001B[90m \u001B[39;49;00m 2027/08/21 00:00:00\u001B[90m\u001B[39;49;00m and '2028/07/21 00:00:00' == '2028/07/21 00:00:00'\nE         \nE         \u001B[0m\u001B[90m \u001B[39;49;00m 2028/07/21 00:00:00\u001B[90m\u001B[39;49;00m and '2027/08/21 0...7/21 00:00:00' == '2027/08/21 0...7/21 00:00:00'\nE         \nE         \u001B[0m\u001B[90m \u001B[39;49;00m 2027/08/21 00:00:00;2028/07/21 00:00:00\u001B[90m\u001B[39;49;00m and '4' == '4'\nE         \nE         \u001B[0m\u001B[90m \u001B[39;49;00m 4\u001B[90m\u001B[39;49;00m and '111111111111...1111111111111' == '111111111111...1111111111111'\nE         \nE         \u001B[0m\u001B[90m \u001B[39;49;00m 111111111111111133331122221111222221111111113333111111144444111111111111111111111111111111111111111111111111\u001B[90m\u001B[39;49;00m and '10000' == '9999999999'\nE         \nE         \u001B[0m\u001B[91m- 9999999999\u001B[39;49;00m\u001B[90m\u001B[39;49;00m\nE         \u001B[92m+ 10000\u001B[39;49;00m\u001B[90m\u001B[39;49;00m)\n\nTests\\test_items\\test_coverage.py:401: AssertionError","steps":[],"attachments":[{"uid":"e32268f076943a33","name":"test_coverage_textverify_failure","source":"e32268f076943a33.png","type":"image/png","size":248717},{"uid":"794899591540988a","name":"test_coverage_textverify_source","source":"794899591540988a.html","type":"text/html","size":869096},{"uid":"459710a9a6258b6","name":"test_coverage_textverify_failure","source":"459710a9a6258b6.png","type":"image/png","size":55820},{"uid":"8d2f7c495e3b5620","name":"test_coverage_textverify_source","source":"8d2f7c495e3b5620.html","type":"text/html","size":1233616},{"uid":"162470db59c81361","name":"log","source":"162470db59c81361.txt","type":"text/plain","size":2848}],"parameters":[],"shouldDisplayMessage":true,"attachmentsCount":5,"stepsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"login_to_coverage::0","time":{"start":1761140614199,"stop":1761140616430,"duration":2231},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"feature","value":"覆盖日历表测试用例"},{"name":"story","value":"校验数字文本框和文本框成功"},{"name":"parentSuite","value":"Tests.test_items"},{"name":"suite","value":"test_coverage"},{"name":"subSuite","value":"TestCoveragePage"},{"name":"host","value":"WIN-20240820MJV"},{"name":"thread","value":"25856-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"Tests.test_items.test_coverage"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":[]},"source":"251af1b79559f6f9.json","parameterValues":[]}