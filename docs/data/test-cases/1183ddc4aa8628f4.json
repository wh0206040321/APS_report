{"uid":"1183ddc4aa8628f4","name":"test_spec_editnamesuccess","fullName":"Tests.test_items.test_spec1.TestSpecPage#test_spec_editnamesuccess","historyId":"a077dfe91a0cffec061838983bf4b7fc","time":{"start":1760961208174,"stop":1760961214079,"duration":5905},"status":"failed","statusMessage":"AssertionError: assert ('1测试A' == '1测试A1'\n  \n  \u001B[0m\u001B[91m- 1测试A1\u001B[39;49;00m\u001B[90m\u001B[39;49;00m\n  ?     -\u001B[90m\u001B[39;49;00m\n  \u001B[92m+ 1测试A\u001B[39;49;00m\u001B[90m\u001B[39;49;00m)","statusTrace":"self = <test_items.test_spec1.TestSpecPage object at 0x0000014AE2C78220>, login_to_spec1 = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"5ae774f682ee186d6fd847d1b344f2a0\")>\n\n    @allure.story(\"修改名称，显示颜色成功\")\n    # @pytest.mark.run(order=1)\n    def test_spec_editnamesuccess(self, login_to_spec1):\n        driver = login_to_spec1  # WebDriver 实例\n        spec = Spec1Page(driver)  # 用 driver 初始化 Spec1Page\n        name = \"1测试A\"\n        # 选中代码\n        spec.click_button(f'//tr[./td[2][.//span[text()=\"{name}\"]]]/td[2]')\n        # 点击修改按钮\n        spec.click_edi_button()\n        sleep(1)\n        # 生成随机数\n        random_int = random.randint(1, 10)\n        text = name + f\"{random_int}\"\n        # 输入修改的物料名称\n        spec.enter_texts(\n            '(//label[text()=\"名称\"])[1]/parent::div//input', f\"{text}\"\n        )\n        # 获取修改好的值\n        editname = spec.get_find_element_xpath(\n            '(//label[text()=\"名称\"])[1]/parent::div//input'\n        ).get_attribute(\"value\")\n    \n        # 修改显示颜色下拉框\n        spec.click_button('(//label[text()=\"显示颜色\"])[1]/parent::div//i')\n        sleep(0.5)\n        spec.click_button('(//label[text()=\"显示颜色\"])[1]/parent::div//i')\n        # 显示颜色\n        spec.click_button('//span[text()=\"RGB(242,128,255)\"]')\n        # 获取下拉框数据\n        specsel = spec.get_find_element_xpath(\n            '//div[label[text()=\"显示颜色\"]]/div//span[@class=\"ivu-select-selected-value\"]'\n        ).text\n        # 点击确定\n        spec.click_button(\n            '(//div[@class=\"h-40px flex-justify-end flex-align-items-end b-t-s-d9e3f3\"])[1]/button[1]'\n        )\n        sleep(1)\n        # 定位表格内容\n        itemname = spec.get_find_element_xpath(\n            f'//tr[./td[2][.//span[text()=\"{name}\"]]]/td[3]/div'\n        ).text\n        color = spec.get_find_element_xpath(\n            f'//tr[./td[2][.//span[text()=\"{name}\"]]]/td[4]/div'\n        ).text\n        sleep(1)\n>       assert (\n            itemname == editname\n            and specsel == color\n        )\nE       AssertionError: assert ('1测试A' == '1测试A1'\nE         \nE         \u001B[0m\u001B[91m- 1测试A1\u001B[39;49;00m\u001B[90m\u001B[39;49;00m\nE         ?     -\u001B[90m\u001B[39;49;00m\nE         \u001B[92m+ 1测试A\u001B[39;49;00m\u001B[90m\u001B[39;49;00m)\n\nTests\\test_items\\test_spec1.py:347: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"login_to_spec1","time":{"start":1760961195530,"stop":1760961208174,"duration":12644},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentStep":false,"hasContent":false,"attachmentsCount":0,"shouldDisplayMessage":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert ('1测试A' == '1测试A1'\n  \n  \u001B[0m\u001B[91m- 1测试A1\u001B[39;49;00m\u001B[90m\u001B[39;49;00m\n  ?     -\u001B[90m\u001B[39;49;00m\n  \u001B[92m+ 1测试A\u001B[39;49;00m\u001B[90m\u001B[39;49;00m)","statusTrace":"self = <test_items.test_spec1.TestSpecPage object at 0x0000014AE2C78220>, login_to_spec1 = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"5ae774f682ee186d6fd847d1b344f2a0\")>\n\n    @allure.story(\"修改名称，显示颜色成功\")\n    # @pytest.mark.run(order=1)\n    def test_spec_editnamesuccess(self, login_to_spec1):\n        driver = login_to_spec1  # WebDriver 实例\n        spec = Spec1Page(driver)  # 用 driver 初始化 Spec1Page\n        name = \"1测试A\"\n        # 选中代码\n        spec.click_button(f'//tr[./td[2][.//span[text()=\"{name}\"]]]/td[2]')\n        # 点击修改按钮\n        spec.click_edi_button()\n        sleep(1)\n        # 生成随机数\n        random_int = random.randint(1, 10)\n        text = name + f\"{random_int}\"\n        # 输入修改的物料名称\n        spec.enter_texts(\n            '(//label[text()=\"名称\"])[1]/parent::div//input', f\"{text}\"\n        )\n        # 获取修改好的值\n        editname = spec.get_find_element_xpath(\n            '(//label[text()=\"名称\"])[1]/parent::div//input'\n        ).get_attribute(\"value\")\n    \n        # 修改显示颜色下拉框\n        spec.click_button('(//label[text()=\"显示颜色\"])[1]/parent::div//i')\n        sleep(0.5)\n        spec.click_button('(//label[text()=\"显示颜色\"])[1]/parent::div//i')\n        # 显示颜色\n        spec.click_button('//span[text()=\"RGB(242,128,255)\"]')\n        # 获取下拉框数据\n        specsel = spec.get_find_element_xpath(\n            '//div[label[text()=\"显示颜色\"]]/div//span[@class=\"ivu-select-selected-value\"]'\n        ).text\n        # 点击确定\n        spec.click_button(\n            '(//div[@class=\"h-40px flex-justify-end flex-align-items-end b-t-s-d9e3f3\"])[1]/button[1]'\n        )\n        sleep(1)\n        # 定位表格内容\n        itemname = spec.get_find_element_xpath(\n            f'//tr[./td[2][.//span[text()=\"{name}\"]]]/td[3]/div'\n        ).text\n        color = spec.get_find_element_xpath(\n            f'//tr[./td[2][.//span[text()=\"{name}\"]]]/td[4]/div'\n        ).text\n        sleep(1)\n>       assert (\n            itemname == editname\n            and specsel == color\n        )\nE       AssertionError: assert ('1测试A' == '1测试A1'\nE         \nE         \u001B[0m\u001B[91m- 1测试A1\u001B[39;49;00m\u001B[90m\u001B[39;49;00m\nE         ?     -\u001B[90m\u001B[39;49;00m\nE         \u001B[92m+ 1测试A\u001B[39;49;00m\u001B[90m\u001B[39;49;00m)\n\nTests\\test_items\\test_spec1.py:347: AssertionError","steps":[],"attachments":[{"uid":"71f631f658cc4f70","name":"test_spec_editnamesuccess_failure","source":"71f631f658cc4f70.png","type":"image/png","size":90022},{"uid":"86953d8bf4d5d1cc","name":"test_spec_editnamesuccess_source","source":"86953d8bf4d5d1cc.html","type":"text/html","size":1313743},{"uid":"7493fc1b67b5f5f6","name":"log","source":"7493fc1b67b5f5f6.txt","type":"text/plain","size":2002}],"parameters":[],"stepsCount":0,"attachmentStep":false,"hasContent":true,"attachmentsCount":3,"shouldDisplayMessage":true},"afterStages":[{"name":"login_to_spec1::0","time":{"start":1760961214245,"stop":1760961216395,"duration":2150},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentStep":false,"hasContent":false,"attachmentsCount":0,"shouldDisplayMessage":false}],"labels":[{"name":"story","value":"修改名称，显示颜色成功"},{"name":"feature","value":"生产特征表测试用例"},{"name":"parentSuite","value":"Tests.test_items"},{"name":"suite","value":"test_spec1"},{"name":"subSuite","value":"TestSpecPage"},{"name":"host","value":"WIN-20240820MJV"},{"name":"thread","value":"3232-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"Tests.test_items.test_spec1"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[]}],"tags":[]},"source":"1183ddc4aa8628f4.json","parameterValues":[]}