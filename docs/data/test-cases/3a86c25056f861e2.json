{"uid":"3a86c25056f861e2","name":"test_process_editnamesuccess","fullName":"Tests.test_items.test_process.TestProcessPage#test_process_editnamesuccess","historyId":"ec85f2a371b6c14fa4b30a44d07f622d","time":{"start":1761051028442,"stop":1761051034418,"duration":5976},"status":"failed","statusMessage":"AssertionError: assert ('1测试A' == '1测试A3'\n  \n  \u001B[0m\u001B[91m- 1测试A3\u001B[39;49;00m\u001B[90m\u001B[39;49;00m\n  ?     -\u001B[90m\u001B[39;49;00m\n  \u001B[92m+ 1测试A\u001B[39;49;00m\u001B[90m\u001B[39;49;00m)","statusTrace":"self = <test_items.test_process.TestProcessPage object at 0x00000173A64E8CD0>, login_to_process = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"d1e2056ea89e51adae8e281e004d013a\")>\n\n    @allure.story(\"修改工序名，显示颜色成功\")\n    # @pytest.mark.run(order=1)\n    def test_process_editnamesuccess(self, login_to_process):\n        driver = login_to_process  # WebDriver 实例\n        process = ProcessPage(driver)  # 用 driver 初始化 ProcessPage\n        name = \"1测试A\"\n        # 选中工序代码\n        process.click_button('//tr[.//span[text()=\"1测试A\"]]/td[2]')\n        # 点击修改按钮\n        process.click_edi_button()\n        sleep(1)\n        # 生成随机数\n        random_int = random.randint(1, 8)\n        text = name + f\"{random_int}\"\n        # 输入修改的工序名\n        process.enter_texts(\n            '(//label[text()=\"工序名\"])[1]/parent::div//input', f\"{text}\"\n        )\n        # 获取修改好的值\n        editname = process.get_find_element_xpath(\n            '(//label[text()=\"工序名\"])[1]/parent::div//input'\n        ).get_attribute(\"value\")\n    \n        # 显示颜色下拉框\n        process.click_button('(//label[text()=\"显示颜色\"])[1]/parent::div//i')\n        sleep(2)\n        # 显示颜色\n        process.click_button(f'//span[text()=\"{random_int}\"]')\n        # 获取下拉框数据\n        processsel = process.get_find_element_xpath(\n            '//div[label[text()=\"显示颜色\"]]/div//span[@class=\"ivu-select-selected-value\"]'\n        ).text\n        # 点击确定\n        process.click_button('//div[@class=\"h-40px flex-justify-end flex-align-items-end b-t-s-d9e3f3\"]//span[text()=\"确定\"]')\n        sleep(1)\n        # 定位表格内容\n        processname = process.get_find_element_xpath(\n            f'(//span[text()=\"{name}\"])[1]/ancestor::tr/td[3]/div'\n        ).text\n        processautoGenerateFlag = process.get_find_element_xpath(\n            f'(//span[text()=\"{name}\"])[1]/ancestor::tr/td[4]/div'\n        ).text\n>       assert processname == editname and processautoGenerateFlag == processsel\nE       AssertionError: assert ('1测试A' == '1测试A3'\nE         \nE         \u001B[0m\u001B[91m- 1测试A3\u001B[39;49;00m\u001B[90m\u001B[39;49;00m\nE         ?     -\u001B[90m\u001B[39;49;00m\nE         \u001B[92m+ 1测试A\u001B[39;49;00m\u001B[90m\u001B[39;49;00m)\n\nTests\\test_items\\test_process.py:387: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":1,"retriesStatusChange":true,"beforeStages":[{"name":"login_to_process","time":{"start":1761051016393,"stop":1761051028441,"duration":12048},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert ('1测试A' == '1测试A3'\n  \n  \u001B[0m\u001B[91m- 1测试A3\u001B[39;49;00m\u001B[90m\u001B[39;49;00m\n  ?     -\u001B[90m\u001B[39;49;00m\n  \u001B[92m+ 1测试A\u001B[39;49;00m\u001B[90m\u001B[39;49;00m)","statusTrace":"self = <test_items.test_process.TestProcessPage object at 0x00000173A64E8CD0>, login_to_process = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"d1e2056ea89e51adae8e281e004d013a\")>\n\n    @allure.story(\"修改工序名，显示颜色成功\")\n    # @pytest.mark.run(order=1)\n    def test_process_editnamesuccess(self, login_to_process):\n        driver = login_to_process  # WebDriver 实例\n        process = ProcessPage(driver)  # 用 driver 初始化 ProcessPage\n        name = \"1测试A\"\n        # 选中工序代码\n        process.click_button('//tr[.//span[text()=\"1测试A\"]]/td[2]')\n        # 点击修改按钮\n        process.click_edi_button()\n        sleep(1)\n        # 生成随机数\n        random_int = random.randint(1, 8)\n        text = name + f\"{random_int}\"\n        # 输入修改的工序名\n        process.enter_texts(\n            '(//label[text()=\"工序名\"])[1]/parent::div//input', f\"{text}\"\n        )\n        # 获取修改好的值\n        editname = process.get_find_element_xpath(\n            '(//label[text()=\"工序名\"])[1]/parent::div//input'\n        ).get_attribute(\"value\")\n    \n        # 显示颜色下拉框\n        process.click_button('(//label[text()=\"显示颜色\"])[1]/parent::div//i')\n        sleep(2)\n        # 显示颜色\n        process.click_button(f'//span[text()=\"{random_int}\"]')\n        # 获取下拉框数据\n        processsel = process.get_find_element_xpath(\n            '//div[label[text()=\"显示颜色\"]]/div//span[@class=\"ivu-select-selected-value\"]'\n        ).text\n        # 点击确定\n        process.click_button('//div[@class=\"h-40px flex-justify-end flex-align-items-end b-t-s-d9e3f3\"]//span[text()=\"确定\"]')\n        sleep(1)\n        # 定位表格内容\n        processname = process.get_find_element_xpath(\n            f'(//span[text()=\"{name}\"])[1]/ancestor::tr/td[3]/div'\n        ).text\n        processautoGenerateFlag = process.get_find_element_xpath(\n            f'(//span[text()=\"{name}\"])[1]/ancestor::tr/td[4]/div'\n        ).text\n>       assert processname == editname and processautoGenerateFlag == processsel\nE       AssertionError: assert ('1测试A' == '1测试A3'\nE         \nE         \u001B[0m\u001B[91m- 1测试A3\u001B[39;49;00m\u001B[90m\u001B[39;49;00m\nE         ?     -\u001B[90m\u001B[39;49;00m\nE         \u001B[92m+ 1测试A\u001B[39;49;00m\u001B[90m\u001B[39;49;00m)\n\nTests\\test_items\\test_process.py:387: AssertionError","steps":[],"attachments":[{"uid":"9f15e0fd8518fae1","name":"test_process_editnamesuccess_failure","source":"9f15e0fd8518fae1.png","type":"image/png","size":107099},{"uid":"88f1cbfa00eb8314","name":"test_process_editnamesuccess_source","source":"88f1cbfa00eb8314.html","type":"text/html","size":1288597},{"uid":"7a397d609c86fff6","name":"log","source":"7a397d609c86fff6.txt","type":"text/plain","size":3583}],"parameters":[],"attachmentsCount":3,"shouldDisplayMessage":true,"stepsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"login_to_process::0","time":{"start":1761051034662,"stop":1761051036882,"duration":2220},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"feature","value":"工序表测试用例"},{"name":"story","value":"修改工序名，显示颜色成功"},{"name":"parentSuite","value":"Tests.test_items"},{"name":"suite","value":"test_process"},{"name":"subSuite","value":"TestProcessPage"},{"name":"host","value":"WIN-20240820MJV"},{"name":"thread","value":"14388-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"Tests.test_items.test_process"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"9a0e7ae87debafbe","status":"broken","statusDetails":"selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n\tGetHandleVerifier [0x0x7ff719876f65+78965]\n\tGetHandleVerifier [0x0x7ff719876fc0+79056]\n\t(No symbol) [0x0x7ff719609dda]\n\t(No symbol) [0x0x7ff7196602ea]\n\t(No symbol) [0x0x7ff71966059c]\n\t(No symbol) [0x0x7ff7196b3f37]\n\t(No symbol) [0x0x7ff7196886af]\n\t(No symbol) [0x0x7ff7196b0dbe]\n\t(No symbol) [0x0x7ff719688443]\n\t(No symbol) [0x0x7ff719651311]\n\t(No symbol) [0x0x7ff7196520a3]\n\tGetHandleVerifier [0x0x7ff719b2e26d+2926461]\n\tGetHandleVerifier [0x0x7ff719b28993+2903715]\n\tGetHandleVerifier [0x0x7ff719b46aed+3026941]\n\tGetHandleVerifier [0x0x7ff7198916fe+187406]\n\tGetHandleVerifier [0x0x7ff7198996ef+220159]\n\tGetHandleVerifier [0x0x7ff71987faf4+114692]\n\tGetHandleVerifier [0x0x7ff71987fca9+115129]\n\tGetHandleVerifier [0x0x7ff7198664d8+10728]\n\tBaseThreadInitThunk [0x0x7ffee1537374+20]\n\tRtlUserThreadStart [0x0x7ffee1a7cc91+33]","time":{"start":1761050997828,"stop":1761051013900,"duration":16072}}],"categories":[{"name":"Product defects","matchedStatuses":[]}],"tags":[]},"source":"3a86c25056f861e2.json","parameterValues":[]}