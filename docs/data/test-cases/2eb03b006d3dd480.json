{"uid":"2eb03b006d3dd480","name":"test_apps_selectsuccess3","fullName":"Tests.test_system.test_apps.TestSAppsPage#test_apps_selectsuccess3","historyId":"053a4a824fae5d8f9c1205e91cdd43c5","time":{"start":1761256453660,"stop":1761256480289,"duration":26629},"status":"failed","statusMessage":"AssertionError: 第 3 行不符合：td3=物品切换, td8=1\nassert ('物料' in '物品切换' or 1 >= 4)","statusTrace":"self = <test_system.test_apps.TestSAppsPage object at 0x000001FC193E24D0>, login_to_apps = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"fa09caf13674bf287480850a10f7f0a4\")>\n\n    @allure.story(\"查询应用名称包含物料或排序≥4\")\n    # @pytest.mark.run(order=1)\n    def test_apps_selectsuccess3(self, login_to_apps):\n        driver = login_to_apps  # WebDriver 实例\n        apps = AppsPage(driver)  # 用 driver 初始化 ExpressionPage\n    \n        name = \"物料\"\n        num = 4\n        # 点击查询\n        apps.click_all_button(\"查询\")\n        sleep(1)\n    \n        # 定位名称输入框\n        element_to_double_click = driver.find_element(\n            By.XPATH,\n            '(//div[@class=\"vxe-table--render-wrapper\"])[3]/div[1]/div[2]//tr[1]/td[4]',\n        )\n        # 创建一个 ActionChains 对象\n        actions = ActionChains(driver)\n        # 双击命令\n        actions.double_click(element_to_double_click).perform()\n        sleep(1)\n        # 点击物料名称\n        apps.click_button('//div[text()=\"应用名称\" and contains(@optid,\"opt_\")]')\n        sleep(1)\n        # 点击（\n        apps.click_button(\n            '(//div[@class=\"vxe-table--render-wrapper\"])[3]/div[1]/div[2]//tr[1]/td[3]'\n        )\n        apps.click_button('//div[text()=\"(\" and contains(@optid,\"opt_\")]')\n        # 点击比较关系框\n        apps.click_button(\n            '(//div[@class=\"vxe-table--render-wrapper\"])[3]/div[1]/div[2]//tr[1]/td[5]//input'\n        )\n        sleep(1)\n        # 点击包含\n        apps.click_button('//div[text()=\"包含\" and contains(@optid,\"opt_\")]')\n        sleep(1)\n        # 点击输入数值\n        apps.enter_texts(\n            '(//div[@class=\"vxe-table--render-wrapper\"])[3]/div[1]/div[2]//tr[1]/td[6]//input',\n            name,\n        )\n    \n        # 点击（\n        apps.click_button(\n            '(//div[@class=\"vxe-table--render-wrapper\"])[3]/div[1]/div[2]//tr[1]/td[7]'\n        )\n        apps.click_button('//div[text()=\")\" and contains(@optid,\"opt_\")]')\n    \n        sleep(1)\n        double_click = driver.find_element(\n            By.XPATH,\n            '(//div[@class=\"vxe-table--render-wrapper\"])[3]/div[1]/div[2]//tr[2]/td[2]',\n        )\n        # 双击命令\n        sleep(1)\n        actions.double_click(double_click).perform()\n        # 定义or元素的XPath\n        or_xpath = '//div[text()=\"or\" and contains(@optid,\"opt_\")]'\n    \n        try:\n            # 首先尝试直接查找并点击or元素\n            and_element = WebDriverWait(driver, 2).until(\n                EC.presence_of_element_located((By.XPATH, or_xpath))\n            )\n            and_element.click()\n        except:\n            # 如果直接查找失败，进入循环双击操作\n            max_attempts = 5\n            attempt = 0\n            or_found = False\n    \n            while attempt < max_attempts and not or_found:\n                try:\n                    # 执行双击操作\n                    actions.double_click(double_click).perform()\n                    sleep(1)\n    \n                    # 再次尝试查找or元素\n                    or_element = WebDriverWait(driver, 2).until(\n                        EC.presence_of_element_located((By.XPATH, or_xpath))\n                    )\n                    or_element.click()\n                    or_found = True\n                except:\n                    attempt += 1\n                    sleep(1)\n    \n            if not or_found:\n                raise Exception(f\"在{max_attempts}次尝试后仍未找到并点击到'or'元素\")\n    \n        # 点击（\n        apps.click_button(\n            '(//div[@class=\"vxe-table--render-wrapper\"])[3]/div[1]/div[2]//tr[2]/td[3]'\n        )\n        apps.click_button('//div[text()=\"(\" and contains(@optid,\"opt_\")]')\n        # 点击物料优先度\n        apps.click_button(\n            '(//div[@class=\"vxe-table--render-wrapper\"])[3]/div[1]/div[2]//tr[2]/td[4]'\n        )\n        apps.click_button('//div[text()=\"排序\" and contains(@optid,\"opt_\")]')\n        sleep(1)\n        # 点击比较关系框\n        apps.click_button(\n            '(//div[@class=\"vxe-table--render-wrapper\"])[3]/div[1]/div[2]//tr[2]/td[5]//input'\n        )\n        # 点击>\n        apps.click_button('//div[text()=\"≥\" and contains(@optid,\"opt_\")]')\n        sleep(1)\n        # 点击输入数值0\n        apps.enter_texts(\n            '(//div[@class=\"vxe-table--render-wrapper\"])[3]/div[1]/div[2]//tr[2]/td[6]//input',\n            num,\n        )\n        # 点击（\n        apps.click_button(\n            '(//div[@class=\"vxe-table--render-wrapper\"])[3]/div[1]/div[2]//tr[2]/td[7]'\n        )\n        apps.click_button('//div[text()=\")\" and contains(@optid,\"opt_\")]')\n    \n        sleep(1)\n    \n        # 点击确认\n        apps.click_button(\n            '(//div[@class=\"demo-drawer-footer\"])[3]/button[2]'\n        )\n        sleep(1)\n        # 获取目标表格第2个 vxe 表格中的所有数据行\n        xpath_rows = '(//table[contains(@class, \"vxe-table--body\")])[2]//tr[contains(@class,\"vxe-body--row\")]'\n    \n        # 先拿到总行数\n        base_rows = driver.find_elements(By.XPATH, xpath_rows)\n        total = len(base_rows)\n    \n        valid_count = 0\n        for idx in range(total):\n            try:\n                # 每次都按索引重新定位这一行\n                row = driver.find_elements(By.XPATH, xpath_rows)[idx]\n                tds = row.find_elements(By.TAG_NAME, \"td\")\n                td3 = tds[2].text.strip()\n                td8_raw = tds[7].text.strip()\n                td8_raw = int(td8_raw) if td8_raw else 0\n    \n>               assert name in td3 or td8_raw >= num, f\"第 {idx + 1} 行不符合：td3={td3}, td8={td8_raw}\"\nE               AssertionError: 第 3 行不符合：td3=物品切换, td8=1\nE               assert ('物料' in '物品切换' or 1 >= 4)\n\nTests\\test_system\\test_apps.py:814: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":1,"retriesStatusChange":false,"beforeStages":[{"name":"login_to_apps","time":{"start":1761256435402,"stop":1761256453658,"duration":18256},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"stepsCount":0,"attachmentStep":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: 第 3 行不符合：td3=物品切换, td8=1\nassert ('物料' in '物品切换' or 1 >= 4)","statusTrace":"self = <test_system.test_apps.TestSAppsPage object at 0x000001FC193E24D0>, login_to_apps = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"fa09caf13674bf287480850a10f7f0a4\")>\n\n    @allure.story(\"查询应用名称包含物料或排序≥4\")\n    # @pytest.mark.run(order=1)\n    def test_apps_selectsuccess3(self, login_to_apps):\n        driver = login_to_apps  # WebDriver 实例\n        apps = AppsPage(driver)  # 用 driver 初始化 ExpressionPage\n    \n        name = \"物料\"\n        num = 4\n        # 点击查询\n        apps.click_all_button(\"查询\")\n        sleep(1)\n    \n        # 定位名称输入框\n        element_to_double_click = driver.find_element(\n            By.XPATH,\n            '(//div[@class=\"vxe-table--render-wrapper\"])[3]/div[1]/div[2]//tr[1]/td[4]',\n        )\n        # 创建一个 ActionChains 对象\n        actions = ActionChains(driver)\n        # 双击命令\n        actions.double_click(element_to_double_click).perform()\n        sleep(1)\n        # 点击物料名称\n        apps.click_button('//div[text()=\"应用名称\" and contains(@optid,\"opt_\")]')\n        sleep(1)\n        # 点击（\n        apps.click_button(\n            '(//div[@class=\"vxe-table--render-wrapper\"])[3]/div[1]/div[2]//tr[1]/td[3]'\n        )\n        apps.click_button('//div[text()=\"(\" and contains(@optid,\"opt_\")]')\n        # 点击比较关系框\n        apps.click_button(\n            '(//div[@class=\"vxe-table--render-wrapper\"])[3]/div[1]/div[2]//tr[1]/td[5]//input'\n        )\n        sleep(1)\n        # 点击包含\n        apps.click_button('//div[text()=\"包含\" and contains(@optid,\"opt_\")]')\n        sleep(1)\n        # 点击输入数值\n        apps.enter_texts(\n            '(//div[@class=\"vxe-table--render-wrapper\"])[3]/div[1]/div[2]//tr[1]/td[6]//input',\n            name,\n        )\n    \n        # 点击（\n        apps.click_button(\n            '(//div[@class=\"vxe-table--render-wrapper\"])[3]/div[1]/div[2]//tr[1]/td[7]'\n        )\n        apps.click_button('//div[text()=\")\" and contains(@optid,\"opt_\")]')\n    \n        sleep(1)\n        double_click = driver.find_element(\n            By.XPATH,\n            '(//div[@class=\"vxe-table--render-wrapper\"])[3]/div[1]/div[2]//tr[2]/td[2]',\n        )\n        # 双击命令\n        sleep(1)\n        actions.double_click(double_click).perform()\n        # 定义or元素的XPath\n        or_xpath = '//div[text()=\"or\" and contains(@optid,\"opt_\")]'\n    \n        try:\n            # 首先尝试直接查找并点击or元素\n            and_element = WebDriverWait(driver, 2).until(\n                EC.presence_of_element_located((By.XPATH, or_xpath))\n            )\n            and_element.click()\n        except:\n            # 如果直接查找失败，进入循环双击操作\n            max_attempts = 5\n            attempt = 0\n            or_found = False\n    \n            while attempt < max_attempts and not or_found:\n                try:\n                    # 执行双击操作\n                    actions.double_click(double_click).perform()\n                    sleep(1)\n    \n                    # 再次尝试查找or元素\n                    or_element = WebDriverWait(driver, 2).until(\n                        EC.presence_of_element_located((By.XPATH, or_xpath))\n                    )\n                    or_element.click()\n                    or_found = True\n                except:\n                    attempt += 1\n                    sleep(1)\n    \n            if not or_found:\n                raise Exception(f\"在{max_attempts}次尝试后仍未找到并点击到'or'元素\")\n    \n        # 点击（\n        apps.click_button(\n            '(//div[@class=\"vxe-table--render-wrapper\"])[3]/div[1]/div[2]//tr[2]/td[3]'\n        )\n        apps.click_button('//div[text()=\"(\" and contains(@optid,\"opt_\")]')\n        # 点击物料优先度\n        apps.click_button(\n            '(//div[@class=\"vxe-table--render-wrapper\"])[3]/div[1]/div[2]//tr[2]/td[4]'\n        )\n        apps.click_button('//div[text()=\"排序\" and contains(@optid,\"opt_\")]')\n        sleep(1)\n        # 点击比较关系框\n        apps.click_button(\n            '(//div[@class=\"vxe-table--render-wrapper\"])[3]/div[1]/div[2]//tr[2]/td[5]//input'\n        )\n        # 点击>\n        apps.click_button('//div[text()=\"≥\" and contains(@optid,\"opt_\")]')\n        sleep(1)\n        # 点击输入数值0\n        apps.enter_texts(\n            '(//div[@class=\"vxe-table--render-wrapper\"])[3]/div[1]/div[2]//tr[2]/td[6]//input',\n            num,\n        )\n        # 点击（\n        apps.click_button(\n            '(//div[@class=\"vxe-table--render-wrapper\"])[3]/div[1]/div[2]//tr[2]/td[7]'\n        )\n        apps.click_button('//div[text()=\")\" and contains(@optid,\"opt_\")]')\n    \n        sleep(1)\n    \n        # 点击确认\n        apps.click_button(\n            '(//div[@class=\"demo-drawer-footer\"])[3]/button[2]'\n        )\n        sleep(1)\n        # 获取目标表格第2个 vxe 表格中的所有数据行\n        xpath_rows = '(//table[contains(@class, \"vxe-table--body\")])[2]//tr[contains(@class,\"vxe-body--row\")]'\n    \n        # 先拿到总行数\n        base_rows = driver.find_elements(By.XPATH, xpath_rows)\n        total = len(base_rows)\n    \n        valid_count = 0\n        for idx in range(total):\n            try:\n                # 每次都按索引重新定位这一行\n                row = driver.find_elements(By.XPATH, xpath_rows)[idx]\n                tds = row.find_elements(By.TAG_NAME, \"td\")\n                td3 = tds[2].text.strip()\n                td8_raw = tds[7].text.strip()\n                td8_raw = int(td8_raw) if td8_raw else 0\n    \n>               assert name in td3 or td8_raw >= num, f\"第 {idx + 1} 行不符合：td3={td3}, td8={td8_raw}\"\nE               AssertionError: 第 3 行不符合：td3=物品切换, td8=1\nE               assert ('物料' in '物品切换' or 1 >= 4)\n\nTests\\test_system\\test_apps.py:814: AssertionError","steps":[],"attachments":[{"uid":"e829337b118878e3","name":"test_apps_selectsuccess3_failure","source":"e829337b118878e3.png","type":"image/png","size":167799},{"uid":"594a05b79164d739","name":"test_apps_selectsuccess3_source","source":"594a05b79164d739.html","type":"text/html","size":1400102},{"uid":"d1590e74245a4122","name":"log","source":"d1590e74245a4122.txt","type":"text/plain","size":6245}],"parameters":[],"shouldDisplayMessage":true,"attachmentsCount":3,"hasContent":true,"stepsCount":0,"attachmentStep":false},"afterStages":[{"name":"login_to_apps::0","time":{"start":1761256481114,"stop":1761256483676,"duration":2562},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"stepsCount":0,"attachmentStep":false}],"labels":[{"name":"feature","value":"应用管理页用例"},{"name":"story","value":"查询应用名称包含物料或排序≥4"},{"name":"parentSuite","value":"Tests.test_system"},{"name":"suite","value":"test_apps"},{"name":"subSuite","value":"TestSAppsPage"},{"name":"host","value":"WIN-20240820MJV"},{"name":"thread","value":"21764-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"Tests.test_system.test_apps"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"f74ab61ccef92821","status":"failed","statusDetails":"AssertionError: 第 3 行不符合：td3=物品切换, td8=1\nassert ('物料' in '物品切换' or 1 >= 4)","time":{"start":1761256405735,"stop":1761256431958,"duration":26223}}],"categories":[{"name":"Product defects","matchedStatuses":[]}],"tags":[]},"source":"2eb03b006d3dd480.json","parameterValues":[]}