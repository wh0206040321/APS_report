{"uid":"ed3f304bc8611720","name":"test_shift_delcancel","fullName":"Tests.test_items.test_shift.TestShiftPage#test_shift_delcancel","historyId":"ae1837f51a12f5a531fbd17d895ec283","time":{"start":1756195804161,"stop":1756195808318,"duration":4157},"status":"broken","statusMessage":"selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\n  (Session info: chrome=137.0.7151.69)\nStacktrace:\n\tGetHandleVerifier [0x0x7ff602d26f65+78965]\n\tGetHandleVerifier [0x0x7ff602d26fc0+79056]\n\t(No symbol) [0x0x7ff602ab9c0c]\n\t(No symbol) [0x0x7ff602b117fd]\n\t(No symbol) [0x0x7ff602b032a4]\n\t(No symbol) [0x0x7ff602b3866a]\n\t(No symbol) [0x0x7ff602b02b56]\n\t(No symbol) [0x0x7ff602b38880]\n\t(No symbol) [0x0x7ff602b60dbe]\n\t(No symbol) [0x0x7ff602b38443]\n\t(No symbol) [0x0x7ff602b01311]\n\t(No symbol) [0x0x7ff602b020a3]\n\tGetHandleVerifier [0x0x7ff602fde26d+2926461]\n\tGetHandleVerifier [0x0x7ff602fd8993+2903715]\n\tGetHandleVerifier [0x0x7ff602ff6aed+3026941]\n\tGetHandleVerifier [0x0x7ff602d416fe+187406]\n\tGetHandleVerifier [0x0x7ff602d496ef+220159]\n\tGetHandleVerifier [0x0x7ff602d2faf4+114692]\n\tGetHandleVerifier [0x0x7ff602d2fca9+115129]\n\tGetHandleVerifier [0x0x7ff602d164d8+10728]\n\tBaseThreadInitThunk [0x0x7ffe01a57374+20]\n\tRtlUserThreadStart [0x0x7ffe0239cc91+33]","statusTrace":"self = <test_items.test_shift.TestShiftPage object at 0x000001AFDD551330>, login_to_shift = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"32a3f514fbebcf5b19a015ca7c098a96\")>\n\n    @allure.story(\"取消删除数据\")\n    # @pytest.mark.run(order=1)\n    def test_shift_delcancel(self, login_to_shift):\n        driver = login_to_shift  # WebDriver 实例\n        shift = ShiftPage(driver)  # 用 driver 初始化 ShiftPage\n        name = \"111\"\n        # 定位内容为‘111’的行\n        shift.click_button(f'(//span[text()=\"{name}\"])[1]/ancestor::tr[1]/td[2]')\n        shift.click_del_button()  # 点击删除\n        # 点击取消\n>       shift.get_find_element_class(\"ivu-btn-text\").click()\n\nTests\\test_items\\test_shift.py:354: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nmyenv\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:121: in click\n    self._execute(Command.CLICK_ELEMENT)\nmyenv\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:574: in _execute\n    return self._parent.execute(command, params)\nmyenv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:447: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001AFDD556BF0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element not interactable\",\"message\":\"element not interactable\\\\n  (Sessio...ff602d164d8+10728]\\\\n\\\\tBaseThreadInitThunk [0x0x7ffe01a57374+20]\\\\n\\\\tRtlUserThreadStart [0x0x7ffe0239cc91+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\nE         (Session info: chrome=137.0.7151.69)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x7ff602d26f65+78965]\nE       \tGetHandleVerifier [0x0x7ff602d26fc0+79056]\nE       \t(No symbol) [0x0x7ff602ab9c0c]\nE       \t(No symbol) [0x0x7ff602b117fd]\nE       \t(No symbol) [0x0x7ff602b032a4]\nE       \t(No symbol) [0x0x7ff602b3866a]\nE       \t(No symbol) [0x0x7ff602b02b56]\nE       \t(No symbol) [0x0x7ff602b38880]\nE       \t(No symbol) [0x0x7ff602b60dbe]\nE       \t(No symbol) [0x0x7ff602b38443]\nE       \t(No symbol) [0x0x7ff602b01311]\nE       \t(No symbol) [0x0x7ff602b020a3]\nE       \tGetHandleVerifier [0x0x7ff602fde26d+2926461]\nE       \tGetHandleVerifier [0x0x7ff602fd8993+2903715]\nE       \tGetHandleVerifier [0x0x7ff602ff6aed+3026941]\nE       \tGetHandleVerifier [0x0x7ff602d416fe+187406]\nE       \tGetHandleVerifier [0x0x7ff602d496ef+220159]\nE       \tGetHandleVerifier [0x0x7ff602d2faf4+114692]\nE       \tGetHandleVerifier [0x0x7ff602d2fca9+115129]\nE       \tGetHandleVerifier [0x0x7ff602d164d8+10728]\nE       \tBaseThreadInitThunk [0x0x7ffe01a57374+20]\nE       \tRtlUserThreadStart [0x0x7ffe0239cc91+33]\n\nmyenv\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: ElementNotInteractableException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":1,"retriesStatusChange":true,"beforeStages":[{"name":"login_to_shift","time":{"start":1756195792483,"stop":1756195804161,"duration":11678},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"stepsCount":0,"attachmentStep":false,"shouldDisplayMessage":false,"attachmentsCount":0}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\n  (Session info: chrome=137.0.7151.69)\nStacktrace:\n\tGetHandleVerifier [0x0x7ff602d26f65+78965]\n\tGetHandleVerifier [0x0x7ff602d26fc0+79056]\n\t(No symbol) [0x0x7ff602ab9c0c]\n\t(No symbol) [0x0x7ff602b117fd]\n\t(No symbol) [0x0x7ff602b032a4]\n\t(No symbol) [0x0x7ff602b3866a]\n\t(No symbol) [0x0x7ff602b02b56]\n\t(No symbol) [0x0x7ff602b38880]\n\t(No symbol) [0x0x7ff602b60dbe]\n\t(No symbol) [0x0x7ff602b38443]\n\t(No symbol) [0x0x7ff602b01311]\n\t(No symbol) [0x0x7ff602b020a3]\n\tGetHandleVerifier [0x0x7ff602fde26d+2926461]\n\tGetHandleVerifier [0x0x7ff602fd8993+2903715]\n\tGetHandleVerifier [0x0x7ff602ff6aed+3026941]\n\tGetHandleVerifier [0x0x7ff602d416fe+187406]\n\tGetHandleVerifier [0x0x7ff602d496ef+220159]\n\tGetHandleVerifier [0x0x7ff602d2faf4+114692]\n\tGetHandleVerifier [0x0x7ff602d2fca9+115129]\n\tGetHandleVerifier [0x0x7ff602d164d8+10728]\n\tBaseThreadInitThunk [0x0x7ffe01a57374+20]\n\tRtlUserThreadStart [0x0x7ffe0239cc91+33]","statusTrace":"self = <test_items.test_shift.TestShiftPage object at 0x000001AFDD551330>, login_to_shift = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"32a3f514fbebcf5b19a015ca7c098a96\")>\n\n    @allure.story(\"取消删除数据\")\n    # @pytest.mark.run(order=1)\n    def test_shift_delcancel(self, login_to_shift):\n        driver = login_to_shift  # WebDriver 实例\n        shift = ShiftPage(driver)  # 用 driver 初始化 ShiftPage\n        name = \"111\"\n        # 定位内容为‘111’的行\n        shift.click_button(f'(//span[text()=\"{name}\"])[1]/ancestor::tr[1]/td[2]')\n        shift.click_del_button()  # 点击删除\n        # 点击取消\n>       shift.get_find_element_class(\"ivu-btn-text\").click()\n\nTests\\test_items\\test_shift.py:354: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nmyenv\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:121: in click\n    self._execute(Command.CLICK_ELEMENT)\nmyenv\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:574: in _execute\n    return self._parent.execute(command, params)\nmyenv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:447: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001AFDD556BF0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element not interactable\",\"message\":\"element not interactable\\\\n  (Sessio...ff602d164d8+10728]\\\\n\\\\tBaseThreadInitThunk [0x0x7ffe01a57374+20]\\\\n\\\\tRtlUserThreadStart [0x0x7ffe0239cc91+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\nE         (Session info: chrome=137.0.7151.69)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x7ff602d26f65+78965]\nE       \tGetHandleVerifier [0x0x7ff602d26fc0+79056]\nE       \t(No symbol) [0x0x7ff602ab9c0c]\nE       \t(No symbol) [0x0x7ff602b117fd]\nE       \t(No symbol) [0x0x7ff602b032a4]\nE       \t(No symbol) [0x0x7ff602b3866a]\nE       \t(No symbol) [0x0x7ff602b02b56]\nE       \t(No symbol) [0x0x7ff602b38880]\nE       \t(No symbol) [0x0x7ff602b60dbe]\nE       \t(No symbol) [0x0x7ff602b38443]\nE       \t(No symbol) [0x0x7ff602b01311]\nE       \t(No symbol) [0x0x7ff602b020a3]\nE       \tGetHandleVerifier [0x0x7ff602fde26d+2926461]\nE       \tGetHandleVerifier [0x0x7ff602fd8993+2903715]\nE       \tGetHandleVerifier [0x0x7ff602ff6aed+3026941]\nE       \tGetHandleVerifier [0x0x7ff602d416fe+187406]\nE       \tGetHandleVerifier [0x0x7ff602d496ef+220159]\nE       \tGetHandleVerifier [0x0x7ff602d2faf4+114692]\nE       \tGetHandleVerifier [0x0x7ff602d2fca9+115129]\nE       \tGetHandleVerifier [0x0x7ff602d164d8+10728]\nE       \tBaseThreadInitThunk [0x0x7ffe01a57374+20]\nE       \tRtlUserThreadStart [0x0x7ffe0239cc91+33]\n\nmyenv\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: ElementNotInteractableException","steps":[],"attachments":[{"uid":"ba766ed253506b69","name":"test_shift_delcancel_failure","source":"ba766ed253506b69.png","type":"image/png","size":100260},{"uid":"2a61d7c39959e844","name":"test_shift_delcancel_source","source":"2a61d7c39959e844.html","type":"text/html","size":1228163},{"uid":"b8ff47d6ab6e8198","name":"log","source":"b8ff47d6ab6e8198.txt","type":"text/plain","size":1071}],"parameters":[],"hasContent":true,"stepsCount":0,"attachmentStep":false,"shouldDisplayMessage":true,"attachmentsCount":3},"afterStages":[{"name":"login_to_shift::0","time":{"start":1756195808667,"stop":1756195810850,"duration":2183},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"stepsCount":0,"attachmentStep":false,"shouldDisplayMessage":false,"attachmentsCount":0}],"labels":[{"name":"story","value":"取消删除数据"},{"name":"feature","value":"班次表测试用例"},{"name":"parentSuite","value":"Tests.test_items"},{"name":"suite","value":"test_shift"},{"name":"subSuite","value":"TestShiftPage"},{"name":"host","value":"WIN-20240820MJV"},{"name":"thread","value":"9196-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"Tests.test_items.test_shift"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"ea307b601d1c506e","status":"passed","time":{"start":1755781580750,"stop":1755781585515,"duration":4765}}],"categories":[{"name":"Test defects","matchedStatuses":[]}],"tags":[]},"source":"ed3f304bc8611720.json","parameterValues":[]}