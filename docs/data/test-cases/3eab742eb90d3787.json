{"uid":"3eab742eb90d3787","name":"test_menu_select1","fullName":"Tests.test_system.test_menu.TestSMenuPage#test_menu_select1","historyId":"a917ec847b3765071b1485da587a236e","time":{"start":1761163894006,"stop":1761163901143,"duration":7137},"status":"failed","statusMessage":"AssertionError: 表格内容不符合预期，实际值: ['ABCDAA', 'DataInterfaceBase', 'DemandManagement', 'DevelopmentTest', 'ExtendedFunctionality', 'MaterialControlManagement', 'PlanControlTower', 'PlanningRun', 'SchedulingManagement', 'SystemManagement', 'TestCase']\nassert False\n +  where False = all(<generator object TestSMenuPage.test_menu_select1.<locals>.<genexpr> at 0x0000027FE4BB30D0>)","statusTrace":"self = <test_system.test_menu.TestSMenuPage object at 0x0000027FE5AB9AB0>, login_to_menu = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"496d766e0bb4ab60af9fd345bfcb7676\")>\n\n    @allure.story(\"过滤查组件代码成功\")\n    # @pytest.mark.run(order=1)\n    def test_menu_select1(self, login_to_menu):\n        driver = login_to_menu  # WebDriver 实例\n        menu = ExpressionPage(driver)  # 用 driver 初始化 ExpressionPage\n        sleep(2)\n        name = \"Plan\"\n        menu.select_input_menu(name)\n        sleep(2)\n        eles = menu.finds_elements(By.XPATH, '//table[@class=\"vxe-table--body\"]//tr//td[2]')\n        list_ = [ele.text for ele in eles]\n>       assert all(name in text for text in list_), f\"表格内容不符合预期，实际值: {list_}\"\nE       AssertionError: 表格内容不符合预期，实际值: ['ABCDAA', 'DataInterfaceBase', 'DemandManagement', 'DevelopmentTest', 'ExtendedFunctionality', 'MaterialControlManagement', 'PlanControlTower', 'PlanningRun', 'SchedulingManagement', 'SystemManagement', 'TestCase']\nE       assert False\nE        +  where False = all(<generator object TestSMenuPage.test_menu_select1.<locals>.<genexpr> at 0x0000027FE4BB30D0>)\n\nTests\\test_system\\test_menu.py:689: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"login_to_menu","time":{"start":1761163878058,"stop":1761163894003,"duration":15945},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false,"attachmentsCount":0}],"testStage":{"status":"failed","statusMessage":"AssertionError: 表格内容不符合预期，实际值: ['ABCDAA', 'DataInterfaceBase', 'DemandManagement', 'DevelopmentTest', 'ExtendedFunctionality', 'MaterialControlManagement', 'PlanControlTower', 'PlanningRun', 'SchedulingManagement', 'SystemManagement', 'TestCase']\nassert False\n +  where False = all(<generator object TestSMenuPage.test_menu_select1.<locals>.<genexpr> at 0x0000027FE4BB30D0>)","statusTrace":"self = <test_system.test_menu.TestSMenuPage object at 0x0000027FE5AB9AB0>, login_to_menu = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"496d766e0bb4ab60af9fd345bfcb7676\")>\n\n    @allure.story(\"过滤查组件代码成功\")\n    # @pytest.mark.run(order=1)\n    def test_menu_select1(self, login_to_menu):\n        driver = login_to_menu  # WebDriver 实例\n        menu = ExpressionPage(driver)  # 用 driver 初始化 ExpressionPage\n        sleep(2)\n        name = \"Plan\"\n        menu.select_input_menu(name)\n        sleep(2)\n        eles = menu.finds_elements(By.XPATH, '//table[@class=\"vxe-table--body\"]//tr//td[2]')\n        list_ = [ele.text for ele in eles]\n>       assert all(name in text for text in list_), f\"表格内容不符合预期，实际值: {list_}\"\nE       AssertionError: 表格内容不符合预期，实际值: ['ABCDAA', 'DataInterfaceBase', 'DemandManagement', 'DevelopmentTest', 'ExtendedFunctionality', 'MaterialControlManagement', 'PlanControlTower', 'PlanningRun', 'SchedulingManagement', 'SystemManagement', 'TestCase']\nE       assert False\nE        +  where False = all(<generator object TestSMenuPage.test_menu_select1.<locals>.<genexpr> at 0x0000027FE4BB30D0>)\n\nTests\\test_system\\test_menu.py:689: AssertionError","steps":[],"attachments":[{"uid":"3e648850104b6d5f","name":"test_menu_select1_failure","source":"3e648850104b6d5f.png","type":"image/png","size":118393},{"uid":"b59d5118ed7a5e16","name":"test_menu_select1_source","source":"b59d5118ed7a5e16.html","type":"text/html","size":1235687},{"uid":"24d284f49f8862cb","name":"log","source":"24d284f49f8862cb.txt","type":"text/plain","size":991}],"parameters":[],"stepsCount":0,"hasContent":true,"attachmentStep":false,"shouldDisplayMessage":true,"attachmentsCount":3},"afterStages":[{"name":"login_to_menu::0","time":{"start":1761163901728,"stop":1761163904205,"duration":2477},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false,"attachmentsCount":0}],"labels":[{"name":"story","value":"过滤查组件代码成功"},{"name":"feature","value":"菜单组件页用例"},{"name":"parentSuite","value":"Tests.test_system"},{"name":"suite","value":"test_menu"},{"name":"subSuite","value":"TestSMenuPage"},{"name":"host","value":"WIN-20240820MJV"},{"name":"thread","value":"25856-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"Tests.test_system.test_menu"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":[]},"source":"3eab742eb90d3787.json","parameterValues":[]}