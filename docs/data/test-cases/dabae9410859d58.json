{"uid":"dabae9410859d58","name":"test_setting_statistics_success2","fullName":"Tests.test_item.test_setting.TestSettingPage#test_setting_statistics_success2","historyId":"96bf00239d739359a318ed0518b59b89","time":{"start":1752762998372,"stop":1752763009238,"duration":10866},"status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message: 点击失败，找不到元素：xpath = //div[./span[text()=\" 统计 \"]]//i","statusTrace":"self = <Pages.setting_page.SettingPage object at 0x000001FF37FB3D90>, by_or_element = 'xpath', value = '//div[./span[text()=\" 统计 \"]]//i', wait_time = 10\n\n    def click(self, by_or_element, value=None, wait_time=10):\n        if value is not None:\n            by = by_or_element\n            logging.info(f\"点击元素：By = {by}, Value = {value}\")\n            try:\n>               element = WebDriverWait(self.driver, wait_time).until(\n                    EC.element_to_be_clickable((by, value))\n                )\n\nPages\\base_page.py:42: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"597fb4655570cfcfb89d630185f2974b\")>\nmethod = <function element_to_be_clickable.<locals>._predicate at 0x000001FF393D67A0>, message = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        -----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x7ff7445e6f65+78965]\nE       \tGetHandleVerifier [0x0x7ff7445e6fc0+79056]\nE       \t(No symbol) [0x0x7ff744379dda]\nE       \t(No symbol) [0x0x7ff7443d02ea]\nE       \t(No symbol) [0x0x7ff7443d059c]\nE       \t(No symbol) [0x0x7ff744423f37]\nE       \t(No symbol) [0x0x7ff7443f86af]\nE       \t(No symbol) [0x0x7ff744420dbe]\nE       \t(No symbol) [0x0x7ff7443f8443]\nE       \t(No symbol) [0x0x7ff7443c1311]\nE       \t(No symbol) [0x0x7ff7443c20a3]\nE       \tGetHandleVerifier [0x0x7ff74489e26d+2926461]\nE       \tGetHandleVerifier [0x0x7ff744898993+2903715]\nE       \tGetHandleVerifier [0x0x7ff7448b6aed+3026941]\nE       \tGetHandleVerifier [0x0x7ff7446016fe+187406]\nE       \tGetHandleVerifier [0x0x7ff7446096ef+220159]\nE       \tGetHandleVerifier [0x0x7ff7445efaf4+114692]\nE       \tGetHandleVerifier [0x0x7ff7445efca9+115129]\nE       \tGetHandleVerifier [0x0x7ff7445d64d8+10728]\nE       \tBaseThreadInitThunk [0x0x7ffa099e7374+20]\nE       \tRtlUserThreadStart [0x0x7ffa0b89cc91+33]\n\nmyenv\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:138: TimeoutException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_item.test_setting.TestSettingPage object at 0x000001FF3798DD50>\nlogin_to_setting = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"597fb4655570cfcfb89d630185f2974b\")>\n\n    @allure.story(\"添加柱状统计图 输入图表名 输入XY轴 点击确认 添加成功\")\n    # @pytest.mark.run(order=1)\n    def test_setting_statistics_success2(self, login_to_setting):\n        driver = login_to_setting  # WebDriver 实例\n        setting = SettingPage(driver)  # 用 driver 初始化 SettingPage\n        layout = \"测试布局A\"\n        statistics = \"统计图2\"\n        setting.click_button(f'//div[@class=\"tabsDivItemCon\"]/div[text()=\" {layout} \"]')\n>       setting.add_statistics(num=1, name=statistics, code1=\"物料种类 (type)\", code2=\"物料优先度 (itemPriority)\")\n\nTests\\test_item\\test_setting.py:1643: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nPages\\setting_page.py:61: in add_statistics\n    self.click_button('//div[./span[text()=\" 统计 \"]]//i')\nPages\\setting_page.py:22: in click_button\n    self.click(By.XPATH, xpath)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Pages.setting_page.SettingPage object at 0x000001FF37FB3D90>, by_or_element = 'xpath', value = '//div[./span[text()=\" 统计 \"]]//i', wait_time = 10\n\n    def click(self, by_or_element, value=None, wait_time=10):\n        if value is not None:\n            by = by_or_element\n            logging.info(f\"点击元素：By = {by}, Value = {value}\")\n            try:\n                element = WebDriverWait(self.driver, wait_time).until(\n                    EC.element_to_be_clickable((by, value))\n                )\n            except TimeoutException:\n                logging.warning(f\"❌ 点击超时：元素 {by} = {value} 未在 {wait_time} 秒内变为可点击\")\n                self.safe_screenshot(\"click_timeout\", test_name=\"test\")\n>               raise TimeoutException(f\"点击失败，找不到元素：{by} = {value}\")\nE               selenium.common.exceptions.TimeoutException: Message: 点击失败，找不到元素：xpath = //div[./span[text()=\" 统计 \"]]//i\n\nPages\\base_page.py:48: TimeoutException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"login_to_setting","time":{"start":1752762989305,"stop":1752762998372,"duration":9067},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentStep":false,"stepsCount":0,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message: 点击失败，找不到元素：xpath = //div[./span[text()=\" 统计 \"]]//i","statusTrace":"self = <Pages.setting_page.SettingPage object at 0x000001FF37FB3D90>, by_or_element = 'xpath', value = '//div[./span[text()=\" 统计 \"]]//i', wait_time = 10\n\n    def click(self, by_or_element, value=None, wait_time=10):\n        if value is not None:\n            by = by_or_element\n            logging.info(f\"点击元素：By = {by}, Value = {value}\")\n            try:\n>               element = WebDriverWait(self.driver, wait_time).until(\n                    EC.element_to_be_clickable((by, value))\n                )\n\nPages\\base_page.py:42: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"597fb4655570cfcfb89d630185f2974b\")>\nmethod = <function element_to_be_clickable.<locals>._predicate at 0x000001FF393D67A0>, message = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        -----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x7ff7445e6f65+78965]\nE       \tGetHandleVerifier [0x0x7ff7445e6fc0+79056]\nE       \t(No symbol) [0x0x7ff744379dda]\nE       \t(No symbol) [0x0x7ff7443d02ea]\nE       \t(No symbol) [0x0x7ff7443d059c]\nE       \t(No symbol) [0x0x7ff744423f37]\nE       \t(No symbol) [0x0x7ff7443f86af]\nE       \t(No symbol) [0x0x7ff744420dbe]\nE       \t(No symbol) [0x0x7ff7443f8443]\nE       \t(No symbol) [0x0x7ff7443c1311]\nE       \t(No symbol) [0x0x7ff7443c20a3]\nE       \tGetHandleVerifier [0x0x7ff74489e26d+2926461]\nE       \tGetHandleVerifier [0x0x7ff744898993+2903715]\nE       \tGetHandleVerifier [0x0x7ff7448b6aed+3026941]\nE       \tGetHandleVerifier [0x0x7ff7446016fe+187406]\nE       \tGetHandleVerifier [0x0x7ff7446096ef+220159]\nE       \tGetHandleVerifier [0x0x7ff7445efaf4+114692]\nE       \tGetHandleVerifier [0x0x7ff7445efca9+115129]\nE       \tGetHandleVerifier [0x0x7ff7445d64d8+10728]\nE       \tBaseThreadInitThunk [0x0x7ffa099e7374+20]\nE       \tRtlUserThreadStart [0x0x7ffa0b89cc91+33]\n\nmyenv\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:138: TimeoutException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_item.test_setting.TestSettingPage object at 0x000001FF3798DD50>\nlogin_to_setting = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"597fb4655570cfcfb89d630185f2974b\")>\n\n    @allure.story(\"添加柱状统计图 输入图表名 输入XY轴 点击确认 添加成功\")\n    # @pytest.mark.run(order=1)\n    def test_setting_statistics_success2(self, login_to_setting):\n        driver = login_to_setting  # WebDriver 实例\n        setting = SettingPage(driver)  # 用 driver 初始化 SettingPage\n        layout = \"测试布局A\"\n        statistics = \"统计图2\"\n        setting.click_button(f'//div[@class=\"tabsDivItemCon\"]/div[text()=\" {layout} \"]')\n>       setting.add_statistics(num=1, name=statistics, code1=\"物料种类 (type)\", code2=\"物料优先度 (itemPriority)\")\n\nTests\\test_item\\test_setting.py:1643: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nPages\\setting_page.py:61: in add_statistics\n    self.click_button('//div[./span[text()=\" 统计 \"]]//i')\nPages\\setting_page.py:22: in click_button\n    self.click(By.XPATH, xpath)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Pages.setting_page.SettingPage object at 0x000001FF37FB3D90>, by_or_element = 'xpath', value = '//div[./span[text()=\" 统计 \"]]//i', wait_time = 10\n\n    def click(self, by_or_element, value=None, wait_time=10):\n        if value is not None:\n            by = by_or_element\n            logging.info(f\"点击元素：By = {by}, Value = {value}\")\n            try:\n                element = WebDriverWait(self.driver, wait_time).until(\n                    EC.element_to_be_clickable((by, value))\n                )\n            except TimeoutException:\n                logging.warning(f\"❌ 点击超时：元素 {by} = {value} 未在 {wait_time} 秒内变为可点击\")\n                self.safe_screenshot(\"click_timeout\", test_name=\"test\")\n>               raise TimeoutException(f\"点击失败，找不到元素：{by} = {value}\")\nE               selenium.common.exceptions.TimeoutException: Message: 点击失败，找不到元素：xpath = //div[./span[text()=\" 统计 \"]]//i\n\nPages\\base_page.py:48: TimeoutException","steps":[],"attachments":[{"uid":"6a56052a192bc81d","name":"test_click_timeout","source":"6a56052a192bc81d.png","type":"image/png","size":131560},{"uid":"c5b1ade3cf146bec","name":"log","source":"c5b1ade3cf146bec.txt","type":"text/plain","size":1426}],"parameters":[],"attachmentStep":false,"stepsCount":0,"hasContent":true,"shouldDisplayMessage":true,"attachmentsCount":2},"afterStages":[{"name":"login_to_setting::0","time":{"start":1752763009288,"stop":1752763011399,"duration":2111},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentStep":false,"stepsCount":0,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0}],"labels":[{"name":"story","value":"添加柱状统计图 输入图表名 输入XY轴 点击确认 添加成功"},{"name":"feature","value":"标准应用设置测试用例"},{"name":"parentSuite","value":"Tests.test_item"},{"name":"suite","value":"test_setting"},{"name":"subSuite","value":"TestSettingPage"},{"name":"host","value":"WIN-20240820MJV"},{"name":"thread","value":"11236-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"Tests.test_item.test_setting"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":[]},"source":"dabae9410859d58.json","parameterValues":[]}