{"uid":"a7a2780ba4e50e20","name":"test_start","fullName":"Tests.test_items.test_start.TestStartPage#test_start","historyId":"baaad2989c73e6bc842eb5e8b6f66690","time":{"start":1755785757517,"stop":1755785819840,"duration":62323},"description":"初始化并返回 driver","descriptionHtml":"<p>初始化并返回 driver</p>\n","status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message: 点击失败，找不到元素：xpath = (//table[.//span[@class=\"vxe-cell--label\"]])[2]//tr[.//span[text()=\"1测试A\"]]/td[2]//span[text()=\"1测试A\"]","statusTrace":"self = <Pages.itemsPage.master_page.MasterPage object at 0x0000024700331C30>, by_or_element = 'xpath'\nvalue = '(//table[.//span[@class=\"vxe-cell--label\"]])[2]//tr[.//span[text()=\"1测试A\"]]/td[2]//span[text()=\"1测试A\"]', wait_time = 10\n\n    def click(self, by_or_element, value=None, wait_time=10):\n        if value is not None:\n            by = by_or_element\n            logging.info(f\"点击元素：By = {by}, Value = {value}\")\n            try:\n>               element = WebDriverWait(self.driver, wait_time).until(\n                    EC.element_to_be_clickable((by, value))\n                )\n\nPages\\base_page.py:45: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"9c9938acc6dd198e80d8387093008bef\")>\nmethod = <function element_to_be_clickable.<locals>._predicate at 0x000002470096E050>, message = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        -----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x7ff696576f65+78965]\nE       \tGetHandleVerifier [0x0x7ff696576fc0+79056]\nE       \t(No symbol) [0x0x7ff696309dda]\nE       \t(No symbol) [0x0x7ff6963602ea]\nE       \t(No symbol) [0x0x7ff69636059c]\nE       \t(No symbol) [0x0x7ff6963b3f37]\nE       \t(No symbol) [0x0x7ff6963886af]\nE       \t(No symbol) [0x0x7ff6963b0dbe]\nE       \t(No symbol) [0x0x7ff696388443]\nE       \t(No symbol) [0x0x7ff696351311]\nE       \t(No symbol) [0x0x7ff6963520a3]\nE       \tGetHandleVerifier [0x0x7ff69682e26d+2926461]\nE       \tGetHandleVerifier [0x0x7ff696828993+2903715]\nE       \tGetHandleVerifier [0x0x7ff696846aed+3026941]\nE       \tGetHandleVerifier [0x0x7ff6965916fe+187406]\nE       \tGetHandleVerifier [0x0x7ff6965996ef+220159]\nE       \tGetHandleVerifier [0x0x7ff69657faf4+114692]\nE       \tGetHandleVerifier [0x0x7ff69657fca9+115129]\nE       \tGetHandleVerifier [0x0x7ff6965664d8+10728]\nE       \tBaseThreadInitThunk [0x0x7ffd35147374+20]\nE       \tRtlUserThreadStart [0x0x7ffd35bdcc91+33]\n\nmyenv\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:138: TimeoutException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_items.test_start.TestStartPage object at 0x00000247000EB340>\n\n    @allure.story(\"添加物品，添加工艺产能，添加制造订单进行排产\")\n    # @pytest.mark.run(order=1)\n    def test_start(self):\n        \"\"\"初始化并返回 driver\"\"\"\n        date_driver = DateDriver()\n        # 初始化 driver\n        driver = create_driver(date_driver.driver_path)\n        driver.implicitly_wait(3)\n    \n        # 初始化登录页面\n        page = LoginPage(driver)  # 初始化登录页面\n        url = date_driver.url\n        print(f\"[INFO] 正在导航到 URL: {url}\")\n        # 尝试访问 URL，捕获连接错误\n        for attempt in range(2):\n            try:\n                page.navigate_to(url)\n                break\n            except WebDriverException as e:\n                capture_screenshot(driver, f\"login_fail_{attempt + 1}\")\n                logging.warning(f\"第 {attempt + 1} 次连接失败: {e}\")\n                driver.refresh()\n                sleep(date_driver.URL_RETRY_WAIT)\n        else:\n            logging.error(\"连接失败多次，测试中止\")\n            safe_quit(driver)\n            raise RuntimeError(\"无法连接到登录页面\")\n    \n        page.login(date_driver.username, date_driver.password, date_driver.planning)\n    \n        item = ItemPage(driver)  # 用 driver 初始化 ItemPage\n        # 初始化登录页面\n        page = LoginPage(driver)  # 初始化登录页面\n        # 清空之前的共享数据\n        SharedDataUtil.clear_data()\n        item.go_item()\n    \n        # 检查并添加物品（如果不存在）\n        item_names = [\"1测试A\", \"1测试B\", \"1测试C\"]\n        for name in item_names:\n            if not item.check_item_exists(name):\n                item.add_item(name, name)\n            else:\n                print(f\"物品 {name} 已存在，跳过添加\")\n    \n        page.click_button('(//span[text()=\"工艺产能\"])[1]')  # 点击工艺产能\n        master = MasterPage(driver)  # 用 driver 初始化 MasterPage\n        sleep(1)\n        # 检查工艺产能是否存在\n        if not master.check_master_exists(\"1测试C\"):\n            master.click_add_button()  # 检查点击添加\n            # 放大页面\n            master.click_button('(//div[text()=\"新增工艺产能\"])[2]/parent::div//i[1]')\n    \n            master.go_item_dialog(\"1测试C\")\n            sleep(1)\n            item_value = master.get_find_element_xpath(\n                '//span[text()=\" 物料代码： \"]/parent::div//input'\n            ).get_attribute(\"value\")\n    \n            # 点击工序选定器\n            master.click_button(\n                '//table[.//div[@class=\"vxe-input type--text size--mini is--controls\"]]//tr[1]/td[2]//input'\n            )\n    \n            # 点击新增工序编号\n            master.add_serial2()\n            # 填写工序编号\n            master.enter_texts(\n                '//table[.//div[@class=\"vxe-input type--number size--mini\"]]//tr[1]/td[2]//input',\n                \"1\",\n            )\n            # 点击下拉框\n            master.click_button(\n                '//table[.//div[@class=\"vxe-input type--text size--mini is--controls is--suffix is--readonly\"]]//tr[1]/td[3]//span'\n            )\n            random_sel1 = random.randint(1, 8)\n            sleep(1)\n            # 输入工序代码\n            master.click_button(\n                f'(//div[@class=\"vxe-select-option--wrapper\"])[1]/div[{random_sel1}]'\n            )\n    \n            # 点击新增输入指令\n            master.add_serial3()\n            # 获取物料名称\n            master.click(\n                By.XPATH,\n                '(//table[.//div[@class=\"vxe-input type--number size--mini\"]])[2]//tr[1]/td[2]//i',\n            )\n            sleep(1)\n>           master.click_button(\n                '(//table[.//span[@class=\"vxe-cell--label\"]])[2]//tr[.//span[text()=\"1测试A\"]]/td[2]//span[text()=\"1测试A\"]'\n            )\n\nTests\\test_items\\test_start.py:116: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nPages\\itemsPage\\master_page.py:43: in click_button\n    self.click(By.XPATH, xpath)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Pages.itemsPage.master_page.MasterPage object at 0x0000024700331C30>, by_or_element = 'xpath'\nvalue = '(//table[.//span[@class=\"vxe-cell--label\"]])[2]//tr[.//span[text()=\"1测试A\"]]/td[2]//span[text()=\"1测试A\"]', wait_time = 10\n\n    def click(self, by_or_element, value=None, wait_time=10):\n        if value is not None:\n            by = by_or_element\n            logging.info(f\"点击元素：By = {by}, Value = {value}\")\n            try:\n                element = WebDriverWait(self.driver, wait_time).until(\n                    EC.element_to_be_clickable((by, value))\n                )\n            except TimeoutException:\n                logging.warning(f\"❌ 点击超时：元素 {by} = {value} 未在 {wait_time} 秒内变为可点击\")\n>               raise TimeoutException(f\"点击失败，找不到元素：{by} = {value}\")\nE               selenium.common.exceptions.TimeoutException: Message: 点击失败，找不到元素：xpath = (//table[.//span[@class=\"vxe-cell--label\"]])[2]//tr[.//span[text()=\"1测试A\"]]/td[2]//span[text()=\"1测试A\"]\n\nPages\\base_page.py:50: TimeoutException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"description":"初始化并返回 driver","status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message: 点击失败，找不到元素：xpath = (//table[.//span[@class=\"vxe-cell--label\"]])[2]//tr[.//span[text()=\"1测试A\"]]/td[2]//span[text()=\"1测试A\"]","statusTrace":"self = <Pages.itemsPage.master_page.MasterPage object at 0x0000024700331C30>, by_or_element = 'xpath'\nvalue = '(//table[.//span[@class=\"vxe-cell--label\"]])[2]//tr[.//span[text()=\"1测试A\"]]/td[2]//span[text()=\"1测试A\"]', wait_time = 10\n\n    def click(self, by_or_element, value=None, wait_time=10):\n        if value is not None:\n            by = by_or_element\n            logging.info(f\"点击元素：By = {by}, Value = {value}\")\n            try:\n>               element = WebDriverWait(self.driver, wait_time).until(\n                    EC.element_to_be_clickable((by, value))\n                )\n\nPages\\base_page.py:45: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"9c9938acc6dd198e80d8387093008bef\")>\nmethod = <function element_to_be_clickable.<locals>._predicate at 0x000002470096E050>, message = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        -----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x7ff696576f65+78965]\nE       \tGetHandleVerifier [0x0x7ff696576fc0+79056]\nE       \t(No symbol) [0x0x7ff696309dda]\nE       \t(No symbol) [0x0x7ff6963602ea]\nE       \t(No symbol) [0x0x7ff69636059c]\nE       \t(No symbol) [0x0x7ff6963b3f37]\nE       \t(No symbol) [0x0x7ff6963886af]\nE       \t(No symbol) [0x0x7ff6963b0dbe]\nE       \t(No symbol) [0x0x7ff696388443]\nE       \t(No symbol) [0x0x7ff696351311]\nE       \t(No symbol) [0x0x7ff6963520a3]\nE       \tGetHandleVerifier [0x0x7ff69682e26d+2926461]\nE       \tGetHandleVerifier [0x0x7ff696828993+2903715]\nE       \tGetHandleVerifier [0x0x7ff696846aed+3026941]\nE       \tGetHandleVerifier [0x0x7ff6965916fe+187406]\nE       \tGetHandleVerifier [0x0x7ff6965996ef+220159]\nE       \tGetHandleVerifier [0x0x7ff69657faf4+114692]\nE       \tGetHandleVerifier [0x0x7ff69657fca9+115129]\nE       \tGetHandleVerifier [0x0x7ff6965664d8+10728]\nE       \tBaseThreadInitThunk [0x0x7ffd35147374+20]\nE       \tRtlUserThreadStart [0x0x7ffd35bdcc91+33]\n\nmyenv\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:138: TimeoutException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_items.test_start.TestStartPage object at 0x00000247000EB340>\n\n    @allure.story(\"添加物品，添加工艺产能，添加制造订单进行排产\")\n    # @pytest.mark.run(order=1)\n    def test_start(self):\n        \"\"\"初始化并返回 driver\"\"\"\n        date_driver = DateDriver()\n        # 初始化 driver\n        driver = create_driver(date_driver.driver_path)\n        driver.implicitly_wait(3)\n    \n        # 初始化登录页面\n        page = LoginPage(driver)  # 初始化登录页面\n        url = date_driver.url\n        print(f\"[INFO] 正在导航到 URL: {url}\")\n        # 尝试访问 URL，捕获连接错误\n        for attempt in range(2):\n            try:\n                page.navigate_to(url)\n                break\n            except WebDriverException as e:\n                capture_screenshot(driver, f\"login_fail_{attempt + 1}\")\n                logging.warning(f\"第 {attempt + 1} 次连接失败: {e}\")\n                driver.refresh()\n                sleep(date_driver.URL_RETRY_WAIT)\n        else:\n            logging.error(\"连接失败多次，测试中止\")\n            safe_quit(driver)\n            raise RuntimeError(\"无法连接到登录页面\")\n    \n        page.login(date_driver.username, date_driver.password, date_driver.planning)\n    \n        item = ItemPage(driver)  # 用 driver 初始化 ItemPage\n        # 初始化登录页面\n        page = LoginPage(driver)  # 初始化登录页面\n        # 清空之前的共享数据\n        SharedDataUtil.clear_data()\n        item.go_item()\n    \n        # 检查并添加物品（如果不存在）\n        item_names = [\"1测试A\", \"1测试B\", \"1测试C\"]\n        for name in item_names:\n            if not item.check_item_exists(name):\n                item.add_item(name, name)\n            else:\n                print(f\"物品 {name} 已存在，跳过添加\")\n    \n        page.click_button('(//span[text()=\"工艺产能\"])[1]')  # 点击工艺产能\n        master = MasterPage(driver)  # 用 driver 初始化 MasterPage\n        sleep(1)\n        # 检查工艺产能是否存在\n        if not master.check_master_exists(\"1测试C\"):\n            master.click_add_button()  # 检查点击添加\n            # 放大页面\n            master.click_button('(//div[text()=\"新增工艺产能\"])[2]/parent::div//i[1]')\n    \n            master.go_item_dialog(\"1测试C\")\n            sleep(1)\n            item_value = master.get_find_element_xpath(\n                '//span[text()=\" 物料代码： \"]/parent::div//input'\n            ).get_attribute(\"value\")\n    \n            # 点击工序选定器\n            master.click_button(\n                '//table[.//div[@class=\"vxe-input type--text size--mini is--controls\"]]//tr[1]/td[2]//input'\n            )\n    \n            # 点击新增工序编号\n            master.add_serial2()\n            # 填写工序编号\n            master.enter_texts(\n                '//table[.//div[@class=\"vxe-input type--number size--mini\"]]//tr[1]/td[2]//input',\n                \"1\",\n            )\n            # 点击下拉框\n            master.click_button(\n                '//table[.//div[@class=\"vxe-input type--text size--mini is--controls is--suffix is--readonly\"]]//tr[1]/td[3]//span'\n            )\n            random_sel1 = random.randint(1, 8)\n            sleep(1)\n            # 输入工序代码\n            master.click_button(\n                f'(//div[@class=\"vxe-select-option--wrapper\"])[1]/div[{random_sel1}]'\n            )\n    \n            # 点击新增输入指令\n            master.add_serial3()\n            # 获取物料名称\n            master.click(\n                By.XPATH,\n                '(//table[.//div[@class=\"vxe-input type--number size--mini\"]])[2]//tr[1]/td[2]//i',\n            )\n            sleep(1)\n>           master.click_button(\n                '(//table[.//span[@class=\"vxe-cell--label\"]])[2]//tr[.//span[text()=\"1测试A\"]]/td[2]//span[text()=\"1测试A\"]'\n            )\n\nTests\\test_items\\test_start.py:116: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nPages\\itemsPage\\master_page.py:43: in click_button\n    self.click(By.XPATH, xpath)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Pages.itemsPage.master_page.MasterPage object at 0x0000024700331C30>, by_or_element = 'xpath'\nvalue = '(//table[.//span[@class=\"vxe-cell--label\"]])[2]//tr[.//span[text()=\"1测试A\"]]/td[2]//span[text()=\"1测试A\"]', wait_time = 10\n\n    def click(self, by_or_element, value=None, wait_time=10):\n        if value is not None:\n            by = by_or_element\n            logging.info(f\"点击元素：By = {by}, Value = {value}\")\n            try:\n                element = WebDriverWait(self.driver, wait_time).until(\n                    EC.element_to_be_clickable((by, value))\n                )\n            except TimeoutException:\n                logging.warning(f\"❌ 点击超时：元素 {by} = {value} 未在 {wait_time} 秒内变为可点击\")\n>               raise TimeoutException(f\"点击失败，找不到元素：{by} = {value}\")\nE               selenium.common.exceptions.TimeoutException: Message: 点击失败，找不到元素：xpath = (//table[.//span[@class=\"vxe-cell--label\"]])[2]//tr[.//span[text()=\"1测试A\"]]/td[2]//span[text()=\"1测试A\"]\n\nPages\\base_page.py:50: TimeoutException","steps":[],"attachments":[{"uid":"404e644888db341","name":"test_start_failure","source":"404e644888db341.png","type":"image/png","size":92029},{"uid":"a975f770f1b148e8","name":"test_start_source","source":"a975f770f1b148e8.html","type":"text/html","size":1677371},{"uid":"ecc99256d63aa3a2","name":"log","source":"ecc99256d63aa3a2.txt","type":"text/plain","size":4089}],"parameters":[],"hasContent":true,"stepsCount":0,"attachmentStep":false,"shouldDisplayMessage":true,"attachmentsCount":3},"afterStages":[],"labels":[{"name":"story","value":"添加物品，添加工艺产能，添加制造订单进行排产"},{"name":"feature","value":"添加物品，添加工艺产能，添加制造订单测试用例"},{"name":"parentSuite","value":"Tests.test_items"},{"name":"suite","value":"test_start"},{"name":"subSuite","value":"TestStartPage"},{"name":"host","value":"WIN-20240820MJV"},{"name":"thread","value":"21852-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"Tests.test_items.test_start"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[]}],"tags":[]},"source":"a7a2780ba4e50e20.json","parameterValues":[]}