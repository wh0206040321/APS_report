{"uid":"e6c1131ec603c98e","name":"test_sched_attribute4","fullName":"Tests.test_material.test_qtProgrammeMan.TestSchedPage#test_sched_attribute4","historyId":"cec01336f413d6d623b0a6bf6f99dd88","time":{"start":1753888129784,"stop":1753888146645,"duration":16861},"status":"broken","statusMessage":"selenium.common.exceptions.NoSuchElementException: Message: 元素未找到（XPath列表第1个）: //div[contains(text(),\"方案是否循环执行 \")]/following-sibling::div; For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception","statusTrace":"self = <Pages.materialPage.qtProgrammeMan_page.SchedPage object at 0x00000201248C0A00>, by_or_element = 'xpath'\nvalue = '//div[contains(text(),\"方案是否循环执行\")]/following-sibling::div//li[contains(text(),\"是\")]', wait_time = 10\n\n    def click(self, by_or_element, value=None, wait_time=10):\n        if value is not None:\n            by = by_or_element\n            logging.info(f\"点击元素：By = {by}, Value = {value}\")\n            try:\n>               element = WebDriverWait(self.driver, wait_time).until(\n                    EC.element_to_be_clickable((by, value))\n                )\n\nPages\\base_page.py:45: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"907730387162b2b73fd76a8c1fad0381\")>\nmethod = <function element_to_be_clickable.<locals>._predicate at 0x00000201262E15A0>, message = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        -----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\nmyenv\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:138: TimeoutException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <Pages.materialPage.qtProgrammeMan_page.SchedPage object at 0x00000201248C0A00>\nxpath_list = ['//div[contains(text(),\"方案是否循环执行 \")]/following-sibling::div', '//div[contains(text(),\"物料齐套方式 \")]/following-sibling::d...tains(text(),\"是否启用最小齐套量 \")]/following-sibling::div', '//div[contains(text(),\"是否考虑物料替代 \")]/following-sibling::div', ...]\nvalue_list = ['是', '分批齐套', '否', '按下阶齐套标识物料', '否', '否', ...]\n\n    def batch_selection_dropdown(self, xpath_list, value_list):\n        \"\"\"批量选择下拉\"\"\"\n        for index, xpath in enumerate(xpath_list, 1):\n            try:\n                # 显式等待元素可见（最多等待10秒）\n                # element = WebDriverWait(self.driver, 10).until(\n                #     EC.visibility_of_element_located((\"xpath\", xpath))\n                # )\n                self.click_button(xpath)\n                text_str = value_list[index - 1]\n                print(\"text_str\", text_str)\n                sleep(1)\n                # self.click_button('//div[contains(text(),\"方案是否循环执行\")]/following-sibling::div//li[contains(text(),\"是\")]')\n>               self.click_button(f'//div[contains(text(),\"方案是否循环执行\")]/following-sibling::div//li[contains(text(),\"{text_str}\")]')\n\nPages\\materialPage\\qtProgrammeMan_page.py:213: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nPages\\materialPage\\qtProgrammeMan_page.py:69: in click_button\n    self.click(By.XPATH, xpath)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Pages.materialPage.qtProgrammeMan_page.SchedPage object at 0x00000201248C0A00>, by_or_element = 'xpath'\nvalue = '//div[contains(text(),\"方案是否循环执行\")]/following-sibling::div//li[contains(text(),\"是\")]', wait_time = 10\n\n    def click(self, by_or_element, value=None, wait_time=10):\n        if value is not None:\n            by = by_or_element\n            logging.info(f\"点击元素：By = {by}, Value = {value}\")\n            try:\n                element = WebDriverWait(self.driver, wait_time).until(\n                    EC.element_to_be_clickable((by, value))\n                )\n            except TimeoutException:\n                logging.warning(f\"❌ 点击超时：元素 {by} = {value} 未在 {wait_time} 秒内变为可点击\")\n>               raise TimeoutException(f\"点击失败，找不到元素：{by} = {value}\")\nE               selenium.common.exceptions.TimeoutException: Message: 点击失败，找不到元素：xpath = //div[contains(text(),\"方案是否循环执行\")]/following-sibling::div//li[contains(text(),\"是\")]\n\nPages\\base_page.py:50: TimeoutException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_material.test_qtProgrammeMan.TestSchedPage object at 0x0000020124597BB0>\nlogin_to_sched = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"907730387162b2b73fd76a8c1fad0381\")>\n\n    @allure.story(\"属性设置-齐套计算规则保存全部成功\")\n    # @pytest.mark.run(order=1)\n    def test_sched_attribute4(self, login_to_sched):\n        driver = login_to_sched  # WebDriver 实例\n        sched = SchedPage(driver)  # 用 driver 初始化 SchedPage\n        name = \"标准方案复制\"\n        # 选择排产方案(订单级)复制方案\n        sched.click_button(f'//ul[@visible=\"visible\"]//ul//span[text()=\"{name}\"]')\n        sched.click_attribute_button()\n    \n        # 点击tab切换齐套计算规则\n        sleep(1)\n        sched.click_button('//div[text()=\" 齐套计算规则 \"]')\n        select_xpath_list = [\n            '//div[contains(text(),\"方案是否循环执行 \")]/following-sibling::div',\n            '//div[contains(text(),\"物料齐套方式 \")]/following-sibling::div',\n            '//div[contains(text(),\"是否释放不齐套料 \")]/following-sibling::div',\n            '//div[contains(text(),\"齐套回答基准项 \")]/following-sibling::div',\n            '//div[contains(text(),\"是否启用最小齐套量 \")]/following-sibling::div',\n            '//div[contains(text(),\"是否考虑物料替代 \")]/following-sibling::div',\n            '//div[contains(text(),\"是否考虑最小替代量 \")]/following-sibling::div',\n            '//div[contains(text(),\"物料欠料计算方式 \")]/following-sibling::div',\n        ]\n        select_value_list = [\n            '是',\n            '分批齐套',\n            '否',\n            '按下阶齐套标识物料',\n            '否',\n            '否',\n            '否',\n            '考虑替代,产生分配明细',\n        ]\n>       sched.batch_selection_dropdown(select_xpath_list, select_value_list)\n\nTests\\test_material\\test_qtProgrammeMan.py:714: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Pages.materialPage.qtProgrammeMan_page.SchedPage object at 0x00000201248C0A00>\nxpath_list = ['//div[contains(text(),\"方案是否循环执行 \")]/following-sibling::div', '//div[contains(text(),\"物料齐套方式 \")]/following-sibling::d...tains(text(),\"是否启用最小齐套量 \")]/following-sibling::div', '//div[contains(text(),\"是否考虑物料替代 \")]/following-sibling::div', ...]\nvalue_list = ['是', '分批齐套', '否', '按下阶齐套标识物料', '否', '否', ...]\n\n    def batch_selection_dropdown(self, xpath_list, value_list):\n        \"\"\"批量选择下拉\"\"\"\n        for index, xpath in enumerate(xpath_list, 1):\n            try:\n                # 显式等待元素可见（最多等待10秒）\n                # element = WebDriverWait(self.driver, 10).until(\n                #     EC.visibility_of_element_located((\"xpath\", xpath))\n                # )\n                self.click_button(xpath)\n                text_str = value_list[index - 1]\n                print(\"text_str\", text_str)\n                sleep(1)\n                # self.click_button('//div[contains(text(),\"方案是否循环执行\")]/following-sibling::div//li[contains(text(),\"是\")]')\n                self.click_button(f'//div[contains(text(),\"方案是否循环执行\")]/following-sibling::div//li[contains(text(),\"{text_str}\")]')\n                # 获取输入框的值\n                # value = element.get_attribute(\"value\")\n                # if value == val_list[index - 1]:\n                #     values.append(value)\n    \n            except TimeoutException:\n>               raise NoSuchElementException(\n                    f\"元素未找到（XPath列表第{index}个）: {xpath}\"\n                )\nE               selenium.common.exceptions.NoSuchElementException: Message: 元素未找到（XPath列表第1个）: //div[contains(text(),\"方案是否循环执行 \")]/following-sibling::div; For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception\n\nPages\\materialPage\\qtProgrammeMan_page.py:220: NoSuchElementException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"login_to_sched","time":{"start":1753887865499,"stop":1753887874060,"duration":8561},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false,"attachmentsCount":0}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.NoSuchElementException: Message: 元素未找到（XPath列表第1个）: //div[contains(text(),\"方案是否循环执行 \")]/following-sibling::div; For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception","statusTrace":"self = <Pages.materialPage.qtProgrammeMan_page.SchedPage object at 0x00000201248C0A00>, by_or_element = 'xpath'\nvalue = '//div[contains(text(),\"方案是否循环执行\")]/following-sibling::div//li[contains(text(),\"是\")]', wait_time = 10\n\n    def click(self, by_or_element, value=None, wait_time=10):\n        if value is not None:\n            by = by_or_element\n            logging.info(f\"点击元素：By = {by}, Value = {value}\")\n            try:\n>               element = WebDriverWait(self.driver, wait_time).until(\n                    EC.element_to_be_clickable((by, value))\n                )\n\nPages\\base_page.py:45: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"907730387162b2b73fd76a8c1fad0381\")>\nmethod = <function element_to_be_clickable.<locals>._predicate at 0x00000201262E15A0>, message = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        -----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\nmyenv\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:138: TimeoutException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <Pages.materialPage.qtProgrammeMan_page.SchedPage object at 0x00000201248C0A00>\nxpath_list = ['//div[contains(text(),\"方案是否循环执行 \")]/following-sibling::div', '//div[contains(text(),\"物料齐套方式 \")]/following-sibling::d...tains(text(),\"是否启用最小齐套量 \")]/following-sibling::div', '//div[contains(text(),\"是否考虑物料替代 \")]/following-sibling::div', ...]\nvalue_list = ['是', '分批齐套', '否', '按下阶齐套标识物料', '否', '否', ...]\n\n    def batch_selection_dropdown(self, xpath_list, value_list):\n        \"\"\"批量选择下拉\"\"\"\n        for index, xpath in enumerate(xpath_list, 1):\n            try:\n                # 显式等待元素可见（最多等待10秒）\n                # element = WebDriverWait(self.driver, 10).until(\n                #     EC.visibility_of_element_located((\"xpath\", xpath))\n                # )\n                self.click_button(xpath)\n                text_str = value_list[index - 1]\n                print(\"text_str\", text_str)\n                sleep(1)\n                # self.click_button('//div[contains(text(),\"方案是否循环执行\")]/following-sibling::div//li[contains(text(),\"是\")]')\n>               self.click_button(f'//div[contains(text(),\"方案是否循环执行\")]/following-sibling::div//li[contains(text(),\"{text_str}\")]')\n\nPages\\materialPage\\qtProgrammeMan_page.py:213: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nPages\\materialPage\\qtProgrammeMan_page.py:69: in click_button\n    self.click(By.XPATH, xpath)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Pages.materialPage.qtProgrammeMan_page.SchedPage object at 0x00000201248C0A00>, by_or_element = 'xpath'\nvalue = '//div[contains(text(),\"方案是否循环执行\")]/following-sibling::div//li[contains(text(),\"是\")]', wait_time = 10\n\n    def click(self, by_or_element, value=None, wait_time=10):\n        if value is not None:\n            by = by_or_element\n            logging.info(f\"点击元素：By = {by}, Value = {value}\")\n            try:\n                element = WebDriverWait(self.driver, wait_time).until(\n                    EC.element_to_be_clickable((by, value))\n                )\n            except TimeoutException:\n                logging.warning(f\"❌ 点击超时：元素 {by} = {value} 未在 {wait_time} 秒内变为可点击\")\n>               raise TimeoutException(f\"点击失败，找不到元素：{by} = {value}\")\nE               selenium.common.exceptions.TimeoutException: Message: 点击失败，找不到元素：xpath = //div[contains(text(),\"方案是否循环执行\")]/following-sibling::div//li[contains(text(),\"是\")]\n\nPages\\base_page.py:50: TimeoutException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_material.test_qtProgrammeMan.TestSchedPage object at 0x0000020124597BB0>\nlogin_to_sched = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"907730387162b2b73fd76a8c1fad0381\")>\n\n    @allure.story(\"属性设置-齐套计算规则保存全部成功\")\n    # @pytest.mark.run(order=1)\n    def test_sched_attribute4(self, login_to_sched):\n        driver = login_to_sched  # WebDriver 实例\n        sched = SchedPage(driver)  # 用 driver 初始化 SchedPage\n        name = \"标准方案复制\"\n        # 选择排产方案(订单级)复制方案\n        sched.click_button(f'//ul[@visible=\"visible\"]//ul//span[text()=\"{name}\"]')\n        sched.click_attribute_button()\n    \n        # 点击tab切换齐套计算规则\n        sleep(1)\n        sched.click_button('//div[text()=\" 齐套计算规则 \"]')\n        select_xpath_list = [\n            '//div[contains(text(),\"方案是否循环执行 \")]/following-sibling::div',\n            '//div[contains(text(),\"物料齐套方式 \")]/following-sibling::div',\n            '//div[contains(text(),\"是否释放不齐套料 \")]/following-sibling::div',\n            '//div[contains(text(),\"齐套回答基准项 \")]/following-sibling::div',\n            '//div[contains(text(),\"是否启用最小齐套量 \")]/following-sibling::div',\n            '//div[contains(text(),\"是否考虑物料替代 \")]/following-sibling::div',\n            '//div[contains(text(),\"是否考虑最小替代量 \")]/following-sibling::div',\n            '//div[contains(text(),\"物料欠料计算方式 \")]/following-sibling::div',\n        ]\n        select_value_list = [\n            '是',\n            '分批齐套',\n            '否',\n            '按下阶齐套标识物料',\n            '否',\n            '否',\n            '否',\n            '考虑替代,产生分配明细',\n        ]\n>       sched.batch_selection_dropdown(select_xpath_list, select_value_list)\n\nTests\\test_material\\test_qtProgrammeMan.py:714: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Pages.materialPage.qtProgrammeMan_page.SchedPage object at 0x00000201248C0A00>\nxpath_list = ['//div[contains(text(),\"方案是否循环执行 \")]/following-sibling::div', '//div[contains(text(),\"物料齐套方式 \")]/following-sibling::d...tains(text(),\"是否启用最小齐套量 \")]/following-sibling::div', '//div[contains(text(),\"是否考虑物料替代 \")]/following-sibling::div', ...]\nvalue_list = ['是', '分批齐套', '否', '按下阶齐套标识物料', '否', '否', ...]\n\n    def batch_selection_dropdown(self, xpath_list, value_list):\n        \"\"\"批量选择下拉\"\"\"\n        for index, xpath in enumerate(xpath_list, 1):\n            try:\n                # 显式等待元素可见（最多等待10秒）\n                # element = WebDriverWait(self.driver, 10).until(\n                #     EC.visibility_of_element_located((\"xpath\", xpath))\n                # )\n                self.click_button(xpath)\n                text_str = value_list[index - 1]\n                print(\"text_str\", text_str)\n                sleep(1)\n                # self.click_button('//div[contains(text(),\"方案是否循环执行\")]/following-sibling::div//li[contains(text(),\"是\")]')\n                self.click_button(f'//div[contains(text(),\"方案是否循环执行\")]/following-sibling::div//li[contains(text(),\"{text_str}\")]')\n                # 获取输入框的值\n                # value = element.get_attribute(\"value\")\n                # if value == val_list[index - 1]:\n                #     values.append(value)\n    \n            except TimeoutException:\n>               raise NoSuchElementException(\n                    f\"元素未找到（XPath列表第{index}个）: {xpath}\"\n                )\nE               selenium.common.exceptions.NoSuchElementException: Message: 元素未找到（XPath列表第1个）: //div[contains(text(),\"方案是否循环执行 \")]/following-sibling::div; For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception\n\nPages\\materialPage\\qtProgrammeMan_page.py:220: NoSuchElementException","steps":[],"attachments":[{"uid":"9ab9b3cd0d6ad5d1","name":"log","source":"9ab9b3cd0d6ad5d1.txt","type":"text/plain","size":1256}],"parameters":[],"stepsCount":0,"hasContent":true,"attachmentStep":false,"shouldDisplayMessage":true,"attachmentsCount":1},"afterStages":[{"name":"login_to_sched::0","time":{"start":1753888672745,"stop":1753888674971,"duration":2226},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false,"attachmentsCount":0}],"labels":[{"name":"feature","value":"物控方案管理表测试用例"},{"name":"story","value":"属性设置-齐套计算规则保存全部成功"},{"name":"parentSuite","value":"Tests.test_material"},{"name":"suite","value":"test_qtProgrammeMan"},{"name":"subSuite","value":"TestSchedPage"},{"name":"host","value":"WIN-20240820MJV"},{"name":"thread","value":"47600-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"Tests.test_material.test_qtProgrammeMan"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":[]},"source":"e6c1131ec603c98e.json","parameterValues":[]}