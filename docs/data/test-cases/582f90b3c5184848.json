{"uid":"582f90b3c5184848","name":"test_customer_editnamesuccess","fullName":"Tests.test_items.test_customer.TestCustomerPage#test_customer_editnamesuccess","historyId":"c06062abf1c3bd2e8c1ae1114f1f646c","time":{"start":1761223046368,"stop":1761223059848,"duration":13480},"status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message: 点击失败，找不到元素：xpath = //div[@class=\"d-flex\"]/span[text()=\"5\"]","statusTrace":"self = <Pages.itemsPage.customer_page.CustomerPage object at 0x000001FC192A6620>, by_or_element = 'xpath', value = '//div[@class=\"d-flex\"]/span[text()=\"5\"]', wait_time = 10\n\n    def click(self, by_or_element, value=None, wait_time=10):\n        if value is not None:\n            by = by_or_element\n            logging.info(f\"点击元素：By = {by}, Value = {value}\")\n            try:\n>               element = WebDriverWait(self.driver, wait_time).until(\n                    EC.element_to_be_clickable((by, value))\n                )\n\nPages\\base_page.py:45: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"4e56a0aa58285833fa8eebcffa4af29b\")>, method = <function element_to_be_clickable.<locals>._predicate at 0x000001FC192C6440>, message = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        -----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\nmyenv\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:138: TimeoutException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_items.test_customer.TestCustomerPage object at 0x000001FC18FBD9C0>, login_to_customer = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"4e56a0aa58285833fa8eebcffa4af29b\")>\n\n    @allure.story(\"修改客户名称，显示颜色，显示顺序\")\n    # @pytest.mark.run(order=1)\n    def test_customer_editnamesuccess(self, login_to_customer):\n        driver = login_to_customer  # WebDriver 实例\n        customer = CustomerPage(driver)  # 用 driver 初始化 CustomerPage\n        name = \"1测试A\"\n        # 选中客户代码\n        customer.click_button(f'//tr[./td[2][.//span[text()=\"{name}\"]]]/td[2]')\n        # 点击修改按钮\n        customer.click_edi_button()\n        sleep(1)\n        # 生成随机数\n        random_int = random.randint(1, 10)\n        text = name + f\"{random_int}\"\n        # 输入修改的客户名称\n        customer.enter_texts(\n            '(//label[text()=\"客户名称\"])[1]/parent::div//input', f\"{text}\"\n        )\n        # 获取修改好的值\n        editname = customer.get_find_element_xpath(\n            '(//label[text()=\"客户名称\"])[1]/parent::div//input'\n        ).get_attribute(\"value\")\n    \n        # 修改显示颜色\n        customer.click_button(\n            '//div[label[text()=\"显示颜色\"]]//i'\n        )\n        # 选择5\n>       customer.click_button('//div[@class=\"d-flex\"]/span[text()=\"5\"]')\n\nTests\\test_items\\test_customer.py:377: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nPages\\itemsPage\\customer_page.py:42: in click_button\n    self.click(By.XPATH, xpath)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Pages.itemsPage.customer_page.CustomerPage object at 0x000001FC192A6620>, by_or_element = 'xpath', value = '//div[@class=\"d-flex\"]/span[text()=\"5\"]', wait_time = 10\n\n    def click(self, by_or_element, value=None, wait_time=10):\n        if value is not None:\n            by = by_or_element\n            logging.info(f\"点击元素：By = {by}, Value = {value}\")\n            try:\n                element = WebDriverWait(self.driver, wait_time).until(\n                    EC.element_to_be_clickable((by, value))\n                )\n            except TimeoutException:\n                logging.warning(f\"❌ 点击超时：元素 {by} = {value} 未在 {wait_time} 秒内变为可点击\")\n>               raise TimeoutException(f\"点击失败，找不到元素：{by} = {value}\")\nE               selenium.common.exceptions.TimeoutException: Message: 点击失败，找不到元素：xpath = //div[@class=\"d-flex\"]/span[text()=\"5\"]\n\nPages\\base_page.py:50: TimeoutException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":1,"retriesStatusChange":true,"beforeStages":[{"name":"login_to_customer","time":{"start":1761223032537,"stop":1761223046368,"duration":13831},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentStep":false,"hasContent":false,"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message: 点击失败，找不到元素：xpath = //div[@class=\"d-flex\"]/span[text()=\"5\"]","statusTrace":"self = <Pages.itemsPage.customer_page.CustomerPage object at 0x000001FC192A6620>, by_or_element = 'xpath', value = '//div[@class=\"d-flex\"]/span[text()=\"5\"]', wait_time = 10\n\n    def click(self, by_or_element, value=None, wait_time=10):\n        if value is not None:\n            by = by_or_element\n            logging.info(f\"点击元素：By = {by}, Value = {value}\")\n            try:\n>               element = WebDriverWait(self.driver, wait_time).until(\n                    EC.element_to_be_clickable((by, value))\n                )\n\nPages\\base_page.py:45: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"4e56a0aa58285833fa8eebcffa4af29b\")>, method = <function element_to_be_clickable.<locals>._predicate at 0x000001FC192C6440>, message = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        -----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\nmyenv\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:138: TimeoutException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_items.test_customer.TestCustomerPage object at 0x000001FC18FBD9C0>, login_to_customer = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"4e56a0aa58285833fa8eebcffa4af29b\")>\n\n    @allure.story(\"修改客户名称，显示颜色，显示顺序\")\n    # @pytest.mark.run(order=1)\n    def test_customer_editnamesuccess(self, login_to_customer):\n        driver = login_to_customer  # WebDriver 实例\n        customer = CustomerPage(driver)  # 用 driver 初始化 CustomerPage\n        name = \"1测试A\"\n        # 选中客户代码\n        customer.click_button(f'//tr[./td[2][.//span[text()=\"{name}\"]]]/td[2]')\n        # 点击修改按钮\n        customer.click_edi_button()\n        sleep(1)\n        # 生成随机数\n        random_int = random.randint(1, 10)\n        text = name + f\"{random_int}\"\n        # 输入修改的客户名称\n        customer.enter_texts(\n            '(//label[text()=\"客户名称\"])[1]/parent::div//input', f\"{text}\"\n        )\n        # 获取修改好的值\n        editname = customer.get_find_element_xpath(\n            '(//label[text()=\"客户名称\"])[1]/parent::div//input'\n        ).get_attribute(\"value\")\n    \n        # 修改显示颜色\n        customer.click_button(\n            '//div[label[text()=\"显示颜色\"]]//i'\n        )\n        # 选择5\n>       customer.click_button('//div[@class=\"d-flex\"]/span[text()=\"5\"]')\n\nTests\\test_items\\test_customer.py:377: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nPages\\itemsPage\\customer_page.py:42: in click_button\n    self.click(By.XPATH, xpath)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Pages.itemsPage.customer_page.CustomerPage object at 0x000001FC192A6620>, by_or_element = 'xpath', value = '//div[@class=\"d-flex\"]/span[text()=\"5\"]', wait_time = 10\n\n    def click(self, by_or_element, value=None, wait_time=10):\n        if value is not None:\n            by = by_or_element\n            logging.info(f\"点击元素：By = {by}, Value = {value}\")\n            try:\n                element = WebDriverWait(self.driver, wait_time).until(\n                    EC.element_to_be_clickable((by, value))\n                )\n            except TimeoutException:\n                logging.warning(f\"❌ 点击超时：元素 {by} = {value} 未在 {wait_time} 秒内变为可点击\")\n>               raise TimeoutException(f\"点击失败，找不到元素：{by} = {value}\")\nE               selenium.common.exceptions.TimeoutException: Message: 点击失败，找不到元素：xpath = //div[@class=\"d-flex\"]/span[text()=\"5\"]\n\nPages\\base_page.py:50: TimeoutException","steps":[],"attachments":[{"uid":"1ea4482cd2baba66","name":"test_customer_editnamesuccess_failure","source":"1ea4482cd2baba66.png","type":"image/png","size":132448},{"uid":"5dc6b920aec8a7c6","name":"test_customer_editnamesuccess_source","source":"5dc6b920aec8a7c6.html","type":"text/html","size":1383017},{"uid":"c8449c753aaddfee","name":"log","source":"c8449c753aaddfee.txt","type":"text/plain","size":3707}],"parameters":[],"attachmentStep":false,"hasContent":true,"stepsCount":0,"shouldDisplayMessage":true,"attachmentsCount":3},"afterStages":[{"name":"login_to_customer::0","time":{"start":1761223060063,"stop":1761223062279,"duration":2216},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentStep":false,"hasContent":false,"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0}],"labels":[{"name":"feature","value":"客户表测试用例"},{"name":"story","value":"修改客户名称，显示颜色，显示顺序"},{"name":"parentSuite","value":"Tests.test_items"},{"name":"suite","value":"test_customer"},{"name":"subSuite","value":"TestCustomerPage"},{"name":"host","value":"WIN-20240820MJV"},{"name":"thread","value":"21764-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"Tests.test_items.test_customer"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"b2ec9262ba82fe84","status":"failed","statusDetails":"AssertionError: assert ('1测试A' == '1测试A6'\n  \n  \u001B[0m\u001B[91m- 1测试A6\u001B[39;49;00m\u001B[90m\u001B[39;49;00m\n  ?     -\u001B[90m\u001B[39;49;00m\n  \u001B[92m+ 1测试A\u001B[39;49;00m\u001B[90m\u001B[39;49;00m)","time":{"start":1761223022970,"stop":1761223030070,"duration":7100}}],"categories":[{"name":"Test defects","matchedStatuses":[]}],"tags":[]},"source":"582f90b3c5184848.json","parameterValues":[]}