{"uid":"91d7af6a6202913","name":"test_itemgroup_textverify","fullName":"Tests.test_items.test_itemgroup.TestItemGroupPage#test_itemgroup_textverify","historyId":"e76006ebeff081962377a02fa8a8ad7c","time":{"start":1761224598315,"stop":1761224620401,"duration":22086},"status":"failed","statusMessage":"AssertionError: 预期数据是111，实际得到111111111111111133331122221111222221111111113333111111144444111111111111111111111111111111111111111111111111\nassert ('111111111111...1111111111111' == '111111111111...1111111111111'\n  \n  \u001B[0m\u001B[90m \u001B[39;49;00m 111111111111111133331122221111222221111111113333111111144444111111111111111111111111111111111111111111111111\u001B[90m\u001B[39;49;00m and '9999999999' == '99999999999'\n  \n  \u001B[0m\u001B[91m- 99999999999\u001B[39;49;00m\u001B[90m\u001B[39;49;00m\n  ?           -\u001B[90m\u001B[39;49;00m\n  \u001B[92m+ 9999999999\u001B[39;49;00m\u001B[90m\u001B[39;49;00m)","statusTrace":"self = <test_items.test_itemgroup.TestItemGroupPage object at 0x000001FC18FC87F0>, login_to_itemgroup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"52d5dc8c973eff490941c41f8d342385\")>\n\n    @allure.story(\"校验数字文本框和文本框成功\")\n    # @pytest.mark.run(order=1)\n    def test_itemgroup_textverify(self, login_to_itemgroup):\n        driver = login_to_itemgroup  # WebDriver 实例\n        item = ItemPage(driver)  # 用 driver 初始化 ItemPage\n    \n        name = \"111111111111111133331122221111222221111111113333111111144444111111111111111111111111111111111111111111111111\"\n        item.add_test_item_group(name)\n        item.enter_texts('(//label[text()=\"物料优先度\"])[1]/parent::div//input', name)\n        # 点击确定\n        item.click_button(\n            '//div[@class=\"h-40px flex-justify-end flex-align-items-end b-t-s-d9e3f3\"]//span[text()=\"确定\"]')\n        sleep(1)\n        adddata = item.get_find_element_xpath(\n            f'//tr[./td[2][.//span[text()=\"{name}\"]]]/td[2]'\n        ).text\n        num_ = item.get_find_element_xpath(\n            f'//tr[./td[2][.//span[text()=\"{name}\"]]]/td[6]'\n        ).text\n>       assert adddata == name and num_ == \"99999999999\", f\"预期数据是111，实际得到{adddata}\"\nE       AssertionError: 预期数据是111，实际得到111111111111111133331122221111222221111111113333111111144444111111111111111111111111111111111111111111111111\nE       assert ('111111111111...1111111111111' == '111111111111...1111111111111'\nE         \nE         \u001B[0m\u001B[90m \u001B[39;49;00m 111111111111111133331122221111222221111111113333111111144444111111111111111111111111111111111111111111111111\u001B[90m\u001B[39;49;00m and '9999999999' == '99999999999'\nE         \nE         \u001B[0m\u001B[91m- 99999999999\u001B[39;49;00m\u001B[90m\u001B[39;49;00m\nE         ?           -\u001B[90m\u001B[39;49;00m\nE         \u001B[92m+ 9999999999\u001B[39;49;00m\u001B[90m\u001B[39;49;00m)\n\nTests\\test_items\\test_itemgroup.py:235: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"login_to_itemgroup","time":{"start":1761224585483,"stop":1761224598315,"duration":12832},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentStep":false,"stepsCount":0,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0}],"testStage":{"status":"failed","statusMessage":"AssertionError: 预期数据是111，实际得到111111111111111133331122221111222221111111113333111111144444111111111111111111111111111111111111111111111111\nassert ('111111111111...1111111111111' == '111111111111...1111111111111'\n  \n  \u001B[0m\u001B[90m \u001B[39;49;00m 111111111111111133331122221111222221111111113333111111144444111111111111111111111111111111111111111111111111\u001B[90m\u001B[39;49;00m and '9999999999' == '99999999999'\n  \n  \u001B[0m\u001B[91m- 99999999999\u001B[39;49;00m\u001B[90m\u001B[39;49;00m\n  ?           -\u001B[90m\u001B[39;49;00m\n  \u001B[92m+ 9999999999\u001B[39;49;00m\u001B[90m\u001B[39;49;00m)","statusTrace":"self = <test_items.test_itemgroup.TestItemGroupPage object at 0x000001FC18FC87F0>, login_to_itemgroup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"52d5dc8c973eff490941c41f8d342385\")>\n\n    @allure.story(\"校验数字文本框和文本框成功\")\n    # @pytest.mark.run(order=1)\n    def test_itemgroup_textverify(self, login_to_itemgroup):\n        driver = login_to_itemgroup  # WebDriver 实例\n        item = ItemPage(driver)  # 用 driver 初始化 ItemPage\n    \n        name = \"111111111111111133331122221111222221111111113333111111144444111111111111111111111111111111111111111111111111\"\n        item.add_test_item_group(name)\n        item.enter_texts('(//label[text()=\"物料优先度\"])[1]/parent::div//input', name)\n        # 点击确定\n        item.click_button(\n            '//div[@class=\"h-40px flex-justify-end flex-align-items-end b-t-s-d9e3f3\"]//span[text()=\"确定\"]')\n        sleep(1)\n        adddata = item.get_find_element_xpath(\n            f'//tr[./td[2][.//span[text()=\"{name}\"]]]/td[2]'\n        ).text\n        num_ = item.get_find_element_xpath(\n            f'//tr[./td[2][.//span[text()=\"{name}\"]]]/td[6]'\n        ).text\n>       assert adddata == name and num_ == \"99999999999\", f\"预期数据是111，实际得到{adddata}\"\nE       AssertionError: 预期数据是111，实际得到111111111111111133331122221111222221111111113333111111144444111111111111111111111111111111111111111111111111\nE       assert ('111111111111...1111111111111' == '111111111111...1111111111111'\nE         \nE         \u001B[0m\u001B[90m \u001B[39;49;00m 111111111111111133331122221111222221111111113333111111144444111111111111111111111111111111111111111111111111\u001B[90m\u001B[39;49;00m and '9999999999' == '99999999999'\nE         \nE         \u001B[0m\u001B[91m- 99999999999\u001B[39;49;00m\u001B[90m\u001B[39;49;00m\nE         ?           -\u001B[90m\u001B[39;49;00m\nE         \u001B[92m+ 9999999999\u001B[39;49;00m\u001B[90m\u001B[39;49;00m)\n\nTests\\test_items\\test_itemgroup.py:235: AssertionError","steps":[],"attachments":[{"uid":"3304bd5d3e869fac","name":"test_itemgroup_textverify_failure","source":"3304bd5d3e869fac.png","type":"image/png","size":247971},{"uid":"925fbc79819b388a","name":"test_itemgroup_textverify_source","source":"925fbc79819b388a.html","type":"text/html","size":869096},{"uid":"50bfad70659d309f","name":"test_itemgroup_textverify_failure","source":"50bfad70659d309f.png","type":"image/png","size":136746},{"uid":"55c2f4ec7b6dbc03","name":"test_itemgroup_textverify_source","source":"55c2f4ec7b6dbc03.html","type":"text/html","size":1486446},{"uid":"52f277b5ac6d6263","name":"log","source":"52f277b5ac6d6263.txt","type":"text/plain","size":1463}],"parameters":[],"attachmentStep":false,"stepsCount":0,"hasContent":true,"shouldDisplayMessage":true,"attachmentsCount":5},"afterStages":[{"name":"login_to_itemgroup::0","time":{"start":1761224621113,"stop":1761224623366,"duration":2253},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentStep":false,"stepsCount":0,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0}],"labels":[{"name":"story","value":"校验数字文本框和文本框成功"},{"name":"feature","value":"物料组表测试用例"},{"name":"parentSuite","value":"Tests.test_items"},{"name":"suite","value":"test_itemgroup"},{"name":"subSuite","value":"TestItemGroupPage"},{"name":"host","value":"WIN-20240820MJV"},{"name":"thread","value":"21764-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"Tests.test_items.test_itemgroup"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":[]},"source":"91d7af6a6202913.json","parameterValues":[]}