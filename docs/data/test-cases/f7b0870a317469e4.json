{"uid":"f7b0870a317469e4","name":"test_setting_display6","fullName":"Tests.test_item.test_setting.TestSettingPage#test_setting_display6","historyId":"204da17c209c660f226e3f961a1ed2e4","time":{"start":1752762337997,"stop":1752762349449,"duration":11452},"status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message: 点击失败，找不到元素：xpath = //div[text()=\" 显示设置 \"]","statusTrace":"self = <Pages.setting_page.SettingPage object at 0x000001FF3800AEF0>, by_or_element = 'xpath', value = '//div[text()=\" 显示设置 \"]', wait_time = 10\n\n    def click(self, by_or_element, value=None, wait_time=10):\n        if value is not None:\n            by = by_or_element\n            logging.info(f\"点击元素：By = {by}, Value = {value}\")\n            try:\n>               element = WebDriverWait(self.driver, wait_time).until(\n                    EC.element_to_be_clickable((by, value))\n                )\n\nPages\\base_page.py:42: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"34d701afc3948873ded9802c52a153d3\")>\nmethod = <function element_to_be_clickable.<locals>._predicate at 0x000001FF380E2F80>, message = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        -----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\nmyenv\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:138: TimeoutException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_item.test_setting.TestSettingPage object at 0x000001FF37972AA0>\nlogin_to_setting = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"34d701afc3948873ded9802c52a153d3\")>\n\n    @allure.story(\"设置表格布局-改变关联条件列的顺序\")\n    # @pytest.mark.run(order=1)\n    def test_setting_display6(self, login_to_setting):\n        driver = login_to_setting  # WebDriver 实例\n        setting = SettingPage(driver)  # 用 driver 初始化 SettingPage\n        layout = \"测试布局A\"\n        setting.click_button(f'//div[@class=\"tabsDivItemCon\"]/div[text()=\" {layout} \"]')\n        after_text = setting.get_find_element_xpath(\n            '//table[.//th[.//p[text()=\"物料代码\"]]]//th[10]//p'\n        ).text\n        # 点击设置按钮，进入显示设置界面\n        setting.click_setting_button()\n>       setting.click_button('//div[text()=\" 显示设置 \"]')\n\nTests\\test_item\\test_setting.py:796: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nPages\\setting_page.py:22: in click_button\n    self.click(By.XPATH, xpath)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Pages.setting_page.SettingPage object at 0x000001FF3800AEF0>, by_or_element = 'xpath', value = '//div[text()=\" 显示设置 \"]', wait_time = 10\n\n    def click(self, by_or_element, value=None, wait_time=10):\n        if value is not None:\n            by = by_or_element\n            logging.info(f\"点击元素：By = {by}, Value = {value}\")\n            try:\n                element = WebDriverWait(self.driver, wait_time).until(\n                    EC.element_to_be_clickable((by, value))\n                )\n            except TimeoutException:\n                logging.warning(f\"❌ 点击超时：元素 {by} = {value} 未在 {wait_time} 秒内变为可点击\")\n                self.safe_screenshot(\"click_timeout\", test_name=\"test\")\n>               raise TimeoutException(f\"点击失败，找不到元素：{by} = {value}\")\nE               selenium.common.exceptions.TimeoutException: Message: 点击失败，找不到元素：xpath = //div[text()=\" 显示设置 \"]\n\nPages\\base_page.py:48: TimeoutException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":1,"retriesStatusChange":false,"beforeStages":[{"name":"login_to_setting","time":{"start":1752762328959,"stop":1752762337996,"duration":9037},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"stepsCount":0,"attachmentStep":false,"shouldDisplayMessage":false,"attachmentsCount":0}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message: 点击失败，找不到元素：xpath = //div[text()=\" 显示设置 \"]","statusTrace":"self = <Pages.setting_page.SettingPage object at 0x000001FF3800AEF0>, by_or_element = 'xpath', value = '//div[text()=\" 显示设置 \"]', wait_time = 10\n\n    def click(self, by_or_element, value=None, wait_time=10):\n        if value is not None:\n            by = by_or_element\n            logging.info(f\"点击元素：By = {by}, Value = {value}\")\n            try:\n>               element = WebDriverWait(self.driver, wait_time).until(\n                    EC.element_to_be_clickable((by, value))\n                )\n\nPages\\base_page.py:42: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"34d701afc3948873ded9802c52a153d3\")>\nmethod = <function element_to_be_clickable.<locals>._predicate at 0x000001FF380E2F80>, message = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        -----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\nmyenv\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:138: TimeoutException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_item.test_setting.TestSettingPage object at 0x000001FF37972AA0>\nlogin_to_setting = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"34d701afc3948873ded9802c52a153d3\")>\n\n    @allure.story(\"设置表格布局-改变关联条件列的顺序\")\n    # @pytest.mark.run(order=1)\n    def test_setting_display6(self, login_to_setting):\n        driver = login_to_setting  # WebDriver 实例\n        setting = SettingPage(driver)  # 用 driver 初始化 SettingPage\n        layout = \"测试布局A\"\n        setting.click_button(f'//div[@class=\"tabsDivItemCon\"]/div[text()=\" {layout} \"]')\n        after_text = setting.get_find_element_xpath(\n            '//table[.//th[.//p[text()=\"物料代码\"]]]//th[10]//p'\n        ).text\n        # 点击设置按钮，进入显示设置界面\n        setting.click_setting_button()\n>       setting.click_button('//div[text()=\" 显示设置 \"]')\n\nTests\\test_item\\test_setting.py:796: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nPages\\setting_page.py:22: in click_button\n    self.click(By.XPATH, xpath)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Pages.setting_page.SettingPage object at 0x000001FF3800AEF0>, by_or_element = 'xpath', value = '//div[text()=\" 显示设置 \"]', wait_time = 10\n\n    def click(self, by_or_element, value=None, wait_time=10):\n        if value is not None:\n            by = by_or_element\n            logging.info(f\"点击元素：By = {by}, Value = {value}\")\n            try:\n                element = WebDriverWait(self.driver, wait_time).until(\n                    EC.element_to_be_clickable((by, value))\n                )\n            except TimeoutException:\n                logging.warning(f\"❌ 点击超时：元素 {by} = {value} 未在 {wait_time} 秒内变为可点击\")\n                self.safe_screenshot(\"click_timeout\", test_name=\"test\")\n>               raise TimeoutException(f\"点击失败，找不到元素：{by} = {value}\")\nE               selenium.common.exceptions.TimeoutException: Message: 点击失败，找不到元素：xpath = //div[text()=\" 显示设置 \"]\n\nPages\\base_page.py:48: TimeoutException","steps":[],"attachments":[{"uid":"fca5fa3e111fb369","name":"test_click_timeout","source":"fca5fa3e111fb369.png","type":"image/png","size":126527},{"uid":"9a73dbb2d4e6f42f","name":"log","source":"9a73dbb2d4e6f42f.txt","type":"text/plain","size":3067}],"parameters":[],"hasContent":true,"stepsCount":0,"attachmentStep":false,"shouldDisplayMessage":true,"attachmentsCount":2},"afterStages":[{"name":"login_to_setting::0","time":{"start":1752762349531,"stop":1752762351641,"duration":2110},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"stepsCount":0,"attachmentStep":false,"shouldDisplayMessage":false,"attachmentsCount":0}],"labels":[{"name":"story","value":"设置表格布局-改变关联条件列的顺序"},{"name":"feature","value":"标准应用设置测试用例"},{"name":"parentSuite","value":"Tests.test_item"},{"name":"suite","value":"test_setting"},{"name":"subSuite","value":"TestSettingPage"},{"name":"host","value":"WIN-20240820MJV"},{"name":"thread","value":"11236-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"Tests.test_item.test_setting"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"1e33a3d8eaf41093","status":"broken","statusDetails":"selenium.common.exceptions.TimeoutException: Message: 点击失败，找不到元素：xpath = //div[text()=\" 显示设置 \"]","time":{"start":1752762315335,"stop":1752762326783,"duration":11448}}],"categories":[{"name":"Test defects","matchedStatuses":[]}],"tags":[]},"source":"f7b0870a317469e4.json","parameterValues":[]}