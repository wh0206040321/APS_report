{"uid":"6a74fbfb3bd52b4b","name":"test_customer_selectsuccess3","fullName":"Tests.test_items.test_customer.TestCustomerPage#test_customer_selectsuccess3","historyId":"da16d49d8d3616e733e73777b955b6bc","time":{"start":1760357645459,"stop":1760357665823,"duration":20364},"status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message: 点击失败，找不到元素：xpath = //div[text()=\"表示顺序\" and contains(@optid,\"opt_\")]","statusTrace":"self = <Pages.itemsPage.customer_page.CustomerPage object at 0x00000216A27BF9A0>, by_or_element = 'xpath', value = '//div[text()=\"表示顺序\" and contains(@optid,\"opt_\")]', wait_time = 10\n\n    def click(self, by_or_element, value=None, wait_time=10):\n        if value is not None:\n            by = by_or_element\n            logging.info(f\"点击元素：By = {by}, Value = {value}\")\n            try:\n>               element = WebDriverWait(self.driver, wait_time).until(\n                    EC.element_to_be_clickable((by, value))\n                )\n\nPages\\base_page.py:45: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"a80626bf59eef9f46a5bf6a7e749d381\")>, method = <function element_to_be_clickable.<locals>._predicate at 0x00000216A2A7F6D0>, message = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        -----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x7ff71bec6f65+78965]\nE       \tGetHandleVerifier [0x0x7ff71bec6fc0+79056]\nE       \t(No symbol) [0x0x7ff71bc59dda]\nE       \t(No symbol) [0x0x7ff71bcb02ea]\nE       \t(No symbol) [0x0x7ff71bcb059c]\nE       \t(No symbol) [0x0x7ff71bd03f37]\nE       \t(No symbol) [0x0x7ff71bcd86af]\nE       \t(No symbol) [0x0x7ff71bd00dbe]\nE       \t(No symbol) [0x0x7ff71bcd8443]\nE       \t(No symbol) [0x0x7ff71bca1311]\nE       \t(No symbol) [0x0x7ff71bca20a3]\nE       \tGetHandleVerifier [0x0x7ff71c17e26d+2926461]\nE       \tGetHandleVerifier [0x0x7ff71c178993+2903715]\nE       \tGetHandleVerifier [0x0x7ff71c196aed+3026941]\nE       \tGetHandleVerifier [0x0x7ff71bee16fe+187406]\nE       \tGetHandleVerifier [0x0x7ff71bee96ef+220159]\nE       \tGetHandleVerifier [0x0x7ff71becfaf4+114692]\nE       \tGetHandleVerifier [0x0x7ff71becfca9+115129]\nE       \tGetHandleVerifier [0x0x7ff71beb64d8+10728]\nE       \tBaseThreadInitThunk [0x0x7ffe68f47374+20]\nE       \tRtlUserThreadStart [0x0x7ffe691dcc91+33]\n\nmyenv\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:138: TimeoutException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_items.test_customer.TestCustomerPage object at 0x00000216A20D5F60>, login_to_customer = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"a80626bf59eef9f46a5bf6a7e749d381\")>\n\n    @allure.story(\"查询客户名称以美开头或表示顺序>10\")\n    # @pytest.mark.run(order=1)\n    def test_customer_selectsuccess3(self, login_to_customer):\n        driver = login_to_customer  # WebDriver 实例\n        customer = CustomerPage(driver)  # 用 driver 初始化 CustomerPage\n    \n        # 点击查询\n        customer.click_sel_button()\n        sleep(1)\n    \n        # 定位名称输入框\n        element_to_double_click = driver.find_element(\n            By.XPATH,\n            '(//div[@class=\"vxe-table--render-wrapper\"])[3]/div[1]/div[2]//tr[1]/td[4]',\n        )\n        # 创建一个 ActionChains 对象\n        actions = ActionChains(driver)\n        # 双击命令\n        actions.double_click(element_to_double_click).perform()\n        sleep(1)\n        # 点击名称\n        customer.click_button('//div[text()=\"客户名称\" and contains(@optid,\"opt_\")]')\n        sleep(1)\n        # 点击（\n        customer.click_button(\n            '(//div[@class=\"vxe-table--render-wrapper\"])[3]/div[1]/div[2]//tr[1]/td[3]'\n        )\n        customer.click_button('//div[text()=\"(\" and contains(@optid,\"opt_\")]')\n        # 点击比较关系框\n        customer.click_button(\n            '(//div[@class=\"vxe-table--render-wrapper\"])[3]/div[1]/div[2]//tr[1]/td[5]//input'\n        )\n        sleep(1)\n        # 点击包含\n        customer.click_button('//div[text()=\"Begins with\" and contains(@optid,\"opt_\")]')\n        sleep(1)\n        # 点击输入数值\n        customer.enter_texts(\n            '(//div[@class=\"vxe-table--render-wrapper\"])[3]/div[1]/div[2]//tr[1]/td[6]//input',\n            \"美\",\n        )\n    \n        # 点击（\n        customer.click_button(\n            '(//div[@class=\"vxe-table--render-wrapper\"])[3]/div[1]/div[2]//tr[1]/td[7]'\n        )\n        customer.click_button('//div[text()=\")\" and contains(@optid,\"opt_\")]')\n    \n        sleep(1)\n        double_click = driver.find_element(\n            By.XPATH,\n            '(//div[@class=\"vxe-table--render-wrapper\"])[3]/div[1]/div[2]//tr[2]/td[2]',\n        )\n        # 双击命令\n        sleep(1)\n        actions.double_click(double_click).perform()\n        # 定义or元素的XPath\n        or_xpath = '//div[text()=\"or\" and contains(@optid,\"opt_\")]'\n    \n        try:\n            # 首先尝试直接查找并点击or元素\n            and_element = WebDriverWait(driver, 2).until(\n                EC.presence_of_element_located((By.XPATH, or_xpath))\n            )\n            and_element.click()\n        except:\n            # 如果直接查找失败，进入循环双击操作\n            max_attempts = 5\n            attempt = 0\n            or_found = False\n    \n            while attempt < max_attempts and not or_found:\n                try:\n                    # 执行双击操作\n                    actions.double_click(double_click).perform()\n                    sleep(1)\n    \n                    # 再次尝试查找or元素\n                    or_element = WebDriverWait(driver, 2).until(\n                        EC.presence_of_element_located((By.XPATH, or_xpath))\n                    )\n                    or_element.click()\n                    or_found = True\n                except:\n                    attempt += 1\n                    sleep(1)\n    \n            if not or_found:\n                raise Exception(f\"在{max_attempts}次尝试后仍未找到并点击到'or'元素\")\n    \n        # 点击（\n        customer.click_button(\n            '(//div[@class=\"vxe-table--render-wrapper\"])[3]/div[1]/div[2]//tr[2]/td[3]'\n        )\n        customer.click_button('//div[text()=\"(\" and contains(@optid,\"opt_\")]')\n        # 点击显示顺序\n        customer.click_button(\n            '(//div[@class=\"vxe-table--render-wrapper\"])[3]/div[1]/div[2]//tr[2]/td[4]'\n        )\n>       customer.click_button('//div[text()=\"表示顺序\" and contains(@optid,\"opt_\")]')\n\nTests\\test_items\\test_customer.py:866: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nPages\\itemsPage\\customer_page.py:42: in click_button\n    self.click(By.XPATH, xpath)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Pages.itemsPage.customer_page.CustomerPage object at 0x00000216A27BF9A0>, by_or_element = 'xpath', value = '//div[text()=\"表示顺序\" and contains(@optid,\"opt_\")]', wait_time = 10\n\n    def click(self, by_or_element, value=None, wait_time=10):\n        if value is not None:\n            by = by_or_element\n            logging.info(f\"点击元素：By = {by}, Value = {value}\")\n            try:\n                element = WebDriverWait(self.driver, wait_time).until(\n                    EC.element_to_be_clickable((by, value))\n                )\n            except TimeoutException:\n                logging.warning(f\"❌ 点击超时：元素 {by} = {value} 未在 {wait_time} 秒内变为可点击\")\n>               raise TimeoutException(f\"点击失败，找不到元素：{by} = {value}\")\nE               selenium.common.exceptions.TimeoutException: Message: 点击失败，找不到元素：xpath = //div[text()=\"表示顺序\" and contains(@optid,\"opt_\")]\n\nPages\\base_page.py:50: TimeoutException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"login_to_customer","time":{"start":1760357636079,"stop":1760357645458,"duration":9379},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false,"attachmentsCount":0}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message: 点击失败，找不到元素：xpath = //div[text()=\"表示顺序\" and contains(@optid,\"opt_\")]","statusTrace":"self = <Pages.itemsPage.customer_page.CustomerPage object at 0x00000216A27BF9A0>, by_or_element = 'xpath', value = '//div[text()=\"表示顺序\" and contains(@optid,\"opt_\")]', wait_time = 10\n\n    def click(self, by_or_element, value=None, wait_time=10):\n        if value is not None:\n            by = by_or_element\n            logging.info(f\"点击元素：By = {by}, Value = {value}\")\n            try:\n>               element = WebDriverWait(self.driver, wait_time).until(\n                    EC.element_to_be_clickable((by, value))\n                )\n\nPages\\base_page.py:45: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"a80626bf59eef9f46a5bf6a7e749d381\")>, method = <function element_to_be_clickable.<locals>._predicate at 0x00000216A2A7F6D0>, message = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        -----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x7ff71bec6f65+78965]\nE       \tGetHandleVerifier [0x0x7ff71bec6fc0+79056]\nE       \t(No symbol) [0x0x7ff71bc59dda]\nE       \t(No symbol) [0x0x7ff71bcb02ea]\nE       \t(No symbol) [0x0x7ff71bcb059c]\nE       \t(No symbol) [0x0x7ff71bd03f37]\nE       \t(No symbol) [0x0x7ff71bcd86af]\nE       \t(No symbol) [0x0x7ff71bd00dbe]\nE       \t(No symbol) [0x0x7ff71bcd8443]\nE       \t(No symbol) [0x0x7ff71bca1311]\nE       \t(No symbol) [0x0x7ff71bca20a3]\nE       \tGetHandleVerifier [0x0x7ff71c17e26d+2926461]\nE       \tGetHandleVerifier [0x0x7ff71c178993+2903715]\nE       \tGetHandleVerifier [0x0x7ff71c196aed+3026941]\nE       \tGetHandleVerifier [0x0x7ff71bee16fe+187406]\nE       \tGetHandleVerifier [0x0x7ff71bee96ef+220159]\nE       \tGetHandleVerifier [0x0x7ff71becfaf4+114692]\nE       \tGetHandleVerifier [0x0x7ff71becfca9+115129]\nE       \tGetHandleVerifier [0x0x7ff71beb64d8+10728]\nE       \tBaseThreadInitThunk [0x0x7ffe68f47374+20]\nE       \tRtlUserThreadStart [0x0x7ffe691dcc91+33]\n\nmyenv\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:138: TimeoutException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_items.test_customer.TestCustomerPage object at 0x00000216A20D5F60>, login_to_customer = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"a80626bf59eef9f46a5bf6a7e749d381\")>\n\n    @allure.story(\"查询客户名称以美开头或表示顺序>10\")\n    # @pytest.mark.run(order=1)\n    def test_customer_selectsuccess3(self, login_to_customer):\n        driver = login_to_customer  # WebDriver 实例\n        customer = CustomerPage(driver)  # 用 driver 初始化 CustomerPage\n    \n        # 点击查询\n        customer.click_sel_button()\n        sleep(1)\n    \n        # 定位名称输入框\n        element_to_double_click = driver.find_element(\n            By.XPATH,\n            '(//div[@class=\"vxe-table--render-wrapper\"])[3]/div[1]/div[2]//tr[1]/td[4]',\n        )\n        # 创建一个 ActionChains 对象\n        actions = ActionChains(driver)\n        # 双击命令\n        actions.double_click(element_to_double_click).perform()\n        sleep(1)\n        # 点击名称\n        customer.click_button('//div[text()=\"客户名称\" and contains(@optid,\"opt_\")]')\n        sleep(1)\n        # 点击（\n        customer.click_button(\n            '(//div[@class=\"vxe-table--render-wrapper\"])[3]/div[1]/div[2]//tr[1]/td[3]'\n        )\n        customer.click_button('//div[text()=\"(\" and contains(@optid,\"opt_\")]')\n        # 点击比较关系框\n        customer.click_button(\n            '(//div[@class=\"vxe-table--render-wrapper\"])[3]/div[1]/div[2]//tr[1]/td[5]//input'\n        )\n        sleep(1)\n        # 点击包含\n        customer.click_button('//div[text()=\"Begins with\" and contains(@optid,\"opt_\")]')\n        sleep(1)\n        # 点击输入数值\n        customer.enter_texts(\n            '(//div[@class=\"vxe-table--render-wrapper\"])[3]/div[1]/div[2]//tr[1]/td[6]//input',\n            \"美\",\n        )\n    \n        # 点击（\n        customer.click_button(\n            '(//div[@class=\"vxe-table--render-wrapper\"])[3]/div[1]/div[2]//tr[1]/td[7]'\n        )\n        customer.click_button('//div[text()=\")\" and contains(@optid,\"opt_\")]')\n    \n        sleep(1)\n        double_click = driver.find_element(\n            By.XPATH,\n            '(//div[@class=\"vxe-table--render-wrapper\"])[3]/div[1]/div[2]//tr[2]/td[2]',\n        )\n        # 双击命令\n        sleep(1)\n        actions.double_click(double_click).perform()\n        # 定义or元素的XPath\n        or_xpath = '//div[text()=\"or\" and contains(@optid,\"opt_\")]'\n    \n        try:\n            # 首先尝试直接查找并点击or元素\n            and_element = WebDriverWait(driver, 2).until(\n                EC.presence_of_element_located((By.XPATH, or_xpath))\n            )\n            and_element.click()\n        except:\n            # 如果直接查找失败，进入循环双击操作\n            max_attempts = 5\n            attempt = 0\n            or_found = False\n    \n            while attempt < max_attempts and not or_found:\n                try:\n                    # 执行双击操作\n                    actions.double_click(double_click).perform()\n                    sleep(1)\n    \n                    # 再次尝试查找or元素\n                    or_element = WebDriverWait(driver, 2).until(\n                        EC.presence_of_element_located((By.XPATH, or_xpath))\n                    )\n                    or_element.click()\n                    or_found = True\n                except:\n                    attempt += 1\n                    sleep(1)\n    \n            if not or_found:\n                raise Exception(f\"在{max_attempts}次尝试后仍未找到并点击到'or'元素\")\n    \n        # 点击（\n        customer.click_button(\n            '(//div[@class=\"vxe-table--render-wrapper\"])[3]/div[1]/div[2]//tr[2]/td[3]'\n        )\n        customer.click_button('//div[text()=\"(\" and contains(@optid,\"opt_\")]')\n        # 点击显示顺序\n        customer.click_button(\n            '(//div[@class=\"vxe-table--render-wrapper\"])[3]/div[1]/div[2]//tr[2]/td[4]'\n        )\n>       customer.click_button('//div[text()=\"表示顺序\" and contains(@optid,\"opt_\")]')\n\nTests\\test_items\\test_customer.py:866: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nPages\\itemsPage\\customer_page.py:42: in click_button\n    self.click(By.XPATH, xpath)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Pages.itemsPage.customer_page.CustomerPage object at 0x00000216A27BF9A0>, by_or_element = 'xpath', value = '//div[text()=\"表示顺序\" and contains(@optid,\"opt_\")]', wait_time = 10\n\n    def click(self, by_or_element, value=None, wait_time=10):\n        if value is not None:\n            by = by_or_element\n            logging.info(f\"点击元素：By = {by}, Value = {value}\")\n            try:\n                element = WebDriverWait(self.driver, wait_time).until(\n                    EC.element_to_be_clickable((by, value))\n                )\n            except TimeoutException:\n                logging.warning(f\"❌ 点击超时：元素 {by} = {value} 未在 {wait_time} 秒内变为可点击\")\n>               raise TimeoutException(f\"点击失败，找不到元素：{by} = {value}\")\nE               selenium.common.exceptions.TimeoutException: Message: 点击失败，找不到元素：xpath = //div[text()=\"表示顺序\" and contains(@optid,\"opt_\")]\n\nPages\\base_page.py:50: TimeoutException","steps":[],"attachments":[{"uid":"7266d2fd7bd9e13c","name":"test_customer_selectsuccess3_failure","source":"7266d2fd7bd9e13c.png","type":"image/png","size":120337},{"uid":"b8e5758c153e2e2a","name":"test_customer_selectsuccess3_source","source":"b8e5758c153e2e2a.html","type":"text/html","size":1442802},{"uid":"84efdfc5ceaabd42","name":"log","source":"84efdfc5ceaabd42.txt","type":"text/plain","size":2530}],"parameters":[],"stepsCount":0,"hasContent":true,"attachmentStep":false,"shouldDisplayMessage":true,"attachmentsCount":3},"afterStages":[{"name":"login_to_customer::0","time":{"start":1760357666030,"stop":1760357668202,"duration":2172},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false,"attachmentsCount":0}],"labels":[{"name":"story","value":"查询客户名称以美开头或表示顺序>10"},{"name":"feature","value":"客户表测试用例"},{"name":"parentSuite","value":"Tests.test_items"},{"name":"suite","value":"test_customer"},{"name":"subSuite","value":"TestCustomerPage"},{"name":"host","value":"WIN-20240820MJV"},{"name":"thread","value":"26508-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"Tests.test_items.test_customer"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[]}],"tags":[]},"source":"6a74fbfb3bd52b4b.json","parameterValues":[]}