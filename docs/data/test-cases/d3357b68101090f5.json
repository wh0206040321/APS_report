{"uid":"d3357b68101090f5","name":"test_setting_select_numinput","fullName":"Tests.test_items.test_setting.TestSettingPage#test_setting_select_numinput","historyId":"c40f8b552d37cc592dd86507383d15de","time":{"start":1758724655867,"stop":1758724661843,"duration":5976},"status":"failed","statusMessage":"AssertionError: assert ('' == '' and '' == '0'\n  \n  \u001B[0m\u001B[91m- 0\u001B[39;49;00m\u001B[90m\u001B[39;49;00m)","statusTrace":"self = <test_items.test_setting.TestSettingPage object at 0x00000271F349A3B0>, login_to_setting = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"21f41051bf1a9ba12297a9b6ec341727\")>\n\n    @allure.story(\"设置表格布局-物料优先度快速查询-数字输入框\")\n    # @pytest.mark.run(order=1)\n    def test_setting_select_numinput(self, login_to_setting):\n        driver = login_to_setting  # WebDriver 实例\n        setting = SettingPage(driver)  # 用 driver 初始化 SettingPage\n        layout = \"测试布局A\"\n        setting.click_button(f'//div[@class=\"tabsDivItemCon\"]/div[text()=\" {layout} \"]')\n        code = \"物料优先度\"\n        # 点击设置按钮，进入显示设置界面\n        setting.click_setting_button()\n        # 点击快速查询按钮，以展开查询选项\n        setting.click_button('//div[text()=\" 快速查询 \"]')\n    \n        # 根据特定代码点击相应的行按钮，以选择特定的查询条件\n        setting.click_button(\n            f'//tr[./td[3][.//span[text()=\"{code}\"]]]/td[4]//input[@placeholder=\"请选择\"]'\n        )\n    \n        # 点击数字输入框按钮，准备输入数值\n        setting.click_button('//div[text()=\"数字输入框\"]')\n    \n        # 确认数字输入框的弹窗，以应用所选条件\n        setting.click_button('(//div[@class=\"demo-drawer-footer\"])[3]/button[2]')\n    \n        # 在指定的输入框中输入特殊字符，以测试系统的稳定性和正确性\n        setting.enter_texts(\n            f'//div[text()=\"{code}\"]/following-sibling::div//input', \"q的 /?=-+0]>\"\n        )\n    \n        # 等待系统处理输入，确保数据被正确应用\n        sleep(1)\n    \n        # 点击查询按钮，启动查询过程\n        setting.click_button('//div[@class=\"queryBtn\"]/button[1]')\n    \n        # 等待查询结果加载，确保数据展示正确\n        sleep(1)\n    \n        # 获取查询结果中第一行的特定数据\n        num1 = setting.get_find_element_xpath(\n            '(//div[@class=\"vxe-table--body-wrapper body--wrapper\"])[2]/table//tr[1]/td[6]'\n        ).text\n    \n        # 获取查询结果中第二行的特定数据\n        num2 = setting.get_find_element_xpath(\n            '(//div[@class=\"vxe-table--body-wrapper body--wrapper\"])[2]/table//tr[2]/td[6]'\n        ).text\n    \n        # 获取查询结果中第三行的特定数据\n        num3 = setting.get_find_element_xpath(\n            '(//div[@class=\"vxe-table--body-wrapper body--wrapper\"])[2]/table//tr[3]/td[6]'\n        ).text\n    \n        # 断言查询结果中的数据均为0，以验证查询功能的准确性\n>       assert num1 == num2 == num3 and num1 == \"0\"\nE       AssertionError: assert ('' == '' and '' == '0'\nE         \nE         \u001B[0m\u001B[91m- 0\u001B[39;49;00m\u001B[90m\u001B[39;49;00m)\n\nTests\\test_items\\test_setting.py:869: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"login_to_setting","time":{"start":1758724647473,"stop":1758724655866,"duration":8393},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentStep":false,"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert ('' == '' and '' == '0'\n  \n  \u001B[0m\u001B[91m- 0\u001B[39;49;00m\u001B[90m\u001B[39;49;00m)","statusTrace":"self = <test_items.test_setting.TestSettingPage object at 0x00000271F349A3B0>, login_to_setting = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"21f41051bf1a9ba12297a9b6ec341727\")>\n\n    @allure.story(\"设置表格布局-物料优先度快速查询-数字输入框\")\n    # @pytest.mark.run(order=1)\n    def test_setting_select_numinput(self, login_to_setting):\n        driver = login_to_setting  # WebDriver 实例\n        setting = SettingPage(driver)  # 用 driver 初始化 SettingPage\n        layout = \"测试布局A\"\n        setting.click_button(f'//div[@class=\"tabsDivItemCon\"]/div[text()=\" {layout} \"]')\n        code = \"物料优先度\"\n        # 点击设置按钮，进入显示设置界面\n        setting.click_setting_button()\n        # 点击快速查询按钮，以展开查询选项\n        setting.click_button('//div[text()=\" 快速查询 \"]')\n    \n        # 根据特定代码点击相应的行按钮，以选择特定的查询条件\n        setting.click_button(\n            f'//tr[./td[3][.//span[text()=\"{code}\"]]]/td[4]//input[@placeholder=\"请选择\"]'\n        )\n    \n        # 点击数字输入框按钮，准备输入数值\n        setting.click_button('//div[text()=\"数字输入框\"]')\n    \n        # 确认数字输入框的弹窗，以应用所选条件\n        setting.click_button('(//div[@class=\"demo-drawer-footer\"])[3]/button[2]')\n    \n        # 在指定的输入框中输入特殊字符，以测试系统的稳定性和正确性\n        setting.enter_texts(\n            f'//div[text()=\"{code}\"]/following-sibling::div//input', \"q的 /?=-+0]>\"\n        )\n    \n        # 等待系统处理输入，确保数据被正确应用\n        sleep(1)\n    \n        # 点击查询按钮，启动查询过程\n        setting.click_button('//div[@class=\"queryBtn\"]/button[1]')\n    \n        # 等待查询结果加载，确保数据展示正确\n        sleep(1)\n    \n        # 获取查询结果中第一行的特定数据\n        num1 = setting.get_find_element_xpath(\n            '(//div[@class=\"vxe-table--body-wrapper body--wrapper\"])[2]/table//tr[1]/td[6]'\n        ).text\n    \n        # 获取查询结果中第二行的特定数据\n        num2 = setting.get_find_element_xpath(\n            '(//div[@class=\"vxe-table--body-wrapper body--wrapper\"])[2]/table//tr[2]/td[6]'\n        ).text\n    \n        # 获取查询结果中第三行的特定数据\n        num3 = setting.get_find_element_xpath(\n            '(//div[@class=\"vxe-table--body-wrapper body--wrapper\"])[2]/table//tr[3]/td[6]'\n        ).text\n    \n        # 断言查询结果中的数据均为0，以验证查询功能的准确性\n>       assert num1 == num2 == num3 and num1 == \"0\"\nE       AssertionError: assert ('' == '' and '' == '0'\nE         \nE         \u001B[0m\u001B[91m- 0\u001B[39;49;00m\u001B[90m\u001B[39;49;00m)\n\nTests\\test_items\\test_setting.py:869: AssertionError","steps":[],"attachments":[{"uid":"26329b7022b17faa","name":"test_setting_select_numinput_failure","source":"26329b7022b17faa.png","type":"image/png","size":117303},{"uid":"3dc5892921e51e18","name":"test_setting_select_numinput_source","source":"3dc5892921e51e18.html","type":"text/html","size":1446317},{"uid":"2c4361c2e46cb8ac","name":"log","source":"2c4361c2e46cb8ac.txt","type":"text/plain","size":2081}],"parameters":[],"hasContent":true,"attachmentStep":false,"stepsCount":0,"shouldDisplayMessage":true,"attachmentsCount":3},"afterStages":[{"name":"login_to_setting::0","time":{"start":1758724662053,"stop":1758724664249,"duration":2196},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentStep":false,"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0}],"labels":[{"name":"story","value":"设置表格布局-物料优先度快速查询-数字输入框"},{"name":"feature","value":"标准应用设置测试用例"},{"name":"parentSuite","value":"Tests.test_items"},{"name":"suite","value":"test_setting"},{"name":"subSuite","value":"TestSettingPage"},{"name":"host","value":"WIN-20240820MJV"},{"name":"thread","value":"15904-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"Tests.test_items.test_setting"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[]}],"tags":[]},"source":"d3357b68101090f5.json","parameterValues":[]}