{"uid":"9e3ee8b12b294abd","name":"test_itemgroup_textverify","fullName":"Tests.test_items.test_itemgroup.TestItemGroupPage#test_itemgroup_textverify","historyId":"e76006ebeff081962377a02fa8a8ad7c","time":{"start":1761224634108,"stop":1761224656212,"duration":22104},"status":"failed","statusMessage":"AssertionError: 预期数据是111，实际得到111111111111111133331122221111222221111111113333111111144444111111111111111111111111111111111111111111111111\nassert ('111111111111...1111111111111' == '111111111111...1111111111111'\n  \n  \u001B[0m\u001B[90m \u001B[39;49;00m 111111111111111133331122221111222221111111113333111111144444111111111111111111111111111111111111111111111111\u001B[90m\u001B[39;49;00m and '9999999999' == '99999999999'\n  \n  \u001B[0m\u001B[91m- 99999999999\u001B[39;49;00m\u001B[90m\u001B[39;49;00m\n  ?           -\u001B[90m\u001B[39;49;00m\n  \u001B[92m+ 9999999999\u001B[39;49;00m\u001B[90m\u001B[39;49;00m)","statusTrace":"self = <test_items.test_itemgroup.TestItemGroupPage object at 0x000001FC18FC87F0>, login_to_itemgroup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"a86fb06655a3a4549d25a6e15c8facf7\")>\n\n    @allure.story(\"校验数字文本框和文本框成功\")\n    # @pytest.mark.run(order=1)\n    def test_itemgroup_textverify(self, login_to_itemgroup):\n        driver = login_to_itemgroup  # WebDriver 实例\n        item = ItemPage(driver)  # 用 driver 初始化 ItemPage\n    \n        name = \"111111111111111133331122221111222221111111113333111111144444111111111111111111111111111111111111111111111111\"\n        item.add_test_item_group(name)\n        item.enter_texts('(//label[text()=\"物料优先度\"])[1]/parent::div//input', name)\n        # 点击确定\n        item.click_button(\n            '//div[@class=\"h-40px flex-justify-end flex-align-items-end b-t-s-d9e3f3\"]//span[text()=\"确定\"]')\n        sleep(1)\n        adddata = item.get_find_element_xpath(\n            f'//tr[./td[2][.//span[text()=\"{name}\"]]]/td[2]'\n        ).text\n        num_ = item.get_find_element_xpath(\n            f'//tr[./td[2][.//span[text()=\"{name}\"]]]/td[6]'\n        ).text\n>       assert adddata == name and num_ == \"99999999999\", f\"预期数据是111，实际得到{adddata}\"\nE       AssertionError: 预期数据是111，实际得到111111111111111133331122221111222221111111113333111111144444111111111111111111111111111111111111111111111111\nE       assert ('111111111111...1111111111111' == '111111111111...1111111111111'\nE         \nE         \u001B[0m\u001B[90m \u001B[39;49;00m 111111111111111133331122221111222221111111113333111111144444111111111111111111111111111111111111111111111111\u001B[90m\u001B[39;49;00m and '9999999999' == '99999999999'\nE         \nE         \u001B[0m\u001B[91m- 99999999999\u001B[39;49;00m\u001B[90m\u001B[39;49;00m\nE         ?           -\u001B[90m\u001B[39;49;00m\nE         \u001B[92m+ 9999999999\u001B[39;49;00m\u001B[90m\u001B[39;49;00m)\n\nTests\\test_items\\test_itemgroup.py:235: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":1,"retriesStatusChange":false,"beforeStages":[{"name":"login_to_itemgroup","time":{"start":1761224623372,"stop":1761224634107,"duration":10735},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentStep":false,"hasContent":false,"attachmentsCount":0,"shouldDisplayMessage":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: 预期数据是111，实际得到111111111111111133331122221111222221111111113333111111144444111111111111111111111111111111111111111111111111\nassert ('111111111111...1111111111111' == '111111111111...1111111111111'\n  \n  \u001B[0m\u001B[90m \u001B[39;49;00m 111111111111111133331122221111222221111111113333111111144444111111111111111111111111111111111111111111111111\u001B[90m\u001B[39;49;00m and '9999999999' == '99999999999'\n  \n  \u001B[0m\u001B[91m- 99999999999\u001B[39;49;00m\u001B[90m\u001B[39;49;00m\n  ?           -\u001B[90m\u001B[39;49;00m\n  \u001B[92m+ 9999999999\u001B[39;49;00m\u001B[90m\u001B[39;49;00m)","statusTrace":"self = <test_items.test_itemgroup.TestItemGroupPage object at 0x000001FC18FC87F0>, login_to_itemgroup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"a86fb06655a3a4549d25a6e15c8facf7\")>\n\n    @allure.story(\"校验数字文本框和文本框成功\")\n    # @pytest.mark.run(order=1)\n    def test_itemgroup_textverify(self, login_to_itemgroup):\n        driver = login_to_itemgroup  # WebDriver 实例\n        item = ItemPage(driver)  # 用 driver 初始化 ItemPage\n    \n        name = \"111111111111111133331122221111222221111111113333111111144444111111111111111111111111111111111111111111111111\"\n        item.add_test_item_group(name)\n        item.enter_texts('(//label[text()=\"物料优先度\"])[1]/parent::div//input', name)\n        # 点击确定\n        item.click_button(\n            '//div[@class=\"h-40px flex-justify-end flex-align-items-end b-t-s-d9e3f3\"]//span[text()=\"确定\"]')\n        sleep(1)\n        adddata = item.get_find_element_xpath(\n            f'//tr[./td[2][.//span[text()=\"{name}\"]]]/td[2]'\n        ).text\n        num_ = item.get_find_element_xpath(\n            f'//tr[./td[2][.//span[text()=\"{name}\"]]]/td[6]'\n        ).text\n>       assert adddata == name and num_ == \"99999999999\", f\"预期数据是111，实际得到{adddata}\"\nE       AssertionError: 预期数据是111，实际得到111111111111111133331122221111222221111111113333111111144444111111111111111111111111111111111111111111111111\nE       assert ('111111111111...1111111111111' == '111111111111...1111111111111'\nE         \nE         \u001B[0m\u001B[90m \u001B[39;49;00m 111111111111111133331122221111222221111111113333111111144444111111111111111111111111111111111111111111111111\u001B[90m\u001B[39;49;00m and '9999999999' == '99999999999'\nE         \nE         \u001B[0m\u001B[91m- 99999999999\u001B[39;49;00m\u001B[90m\u001B[39;49;00m\nE         ?           -\u001B[90m\u001B[39;49;00m\nE         \u001B[92m+ 9999999999\u001B[39;49;00m\u001B[90m\u001B[39;49;00m)\n\nTests\\test_items\\test_itemgroup.py:235: AssertionError","steps":[],"attachments":[{"uid":"9c04f59ce82d3acd","name":"test_itemgroup_textverify_failure","source":"9c04f59ce82d3acd.png","type":"image/png","size":129933},{"uid":"d826f2688bfdbddc","name":"test_itemgroup_textverify_source","source":"d826f2688bfdbddc.html","type":"text/html","size":1486901},{"uid":"eda2e5c91306af75","name":"log","source":"eda2e5c91306af75.txt","type":"text/plain","size":2927}],"parameters":[],"stepsCount":0,"attachmentStep":false,"hasContent":true,"attachmentsCount":3,"shouldDisplayMessage":true},"afterStages":[{"name":"login_to_itemgroup::0","time":{"start":1761224656615,"stop":1761224658880,"duration":2265},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentStep":false,"hasContent":false,"attachmentsCount":0,"shouldDisplayMessage":false}],"labels":[{"name":"story","value":"校验数字文本框和文本框成功"},{"name":"feature","value":"物料组表测试用例"},{"name":"parentSuite","value":"Tests.test_items"},{"name":"suite","value":"test_itemgroup"},{"name":"subSuite","value":"TestItemGroupPage"},{"name":"host","value":"WIN-20240820MJV"},{"name":"thread","value":"21764-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"Tests.test_items.test_itemgroup"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"351b4df834a31711","status":"failed","statusDetails":"AssertionError: 预期数据是111，实际得到111111111111111133331122221111222221111111113333111111144444111111111111111111111111111111111111111111111111\nassert ('111111111111...1111111111111' == '111111111111...1111111111111'\n  \n  \u001B[0m\u001B[90m \u001B[39;49;00m 111111111111111133331122221111222221111111113333111111144444111111111111111111111111111111111111111111111111\u001B[90m\u001B[39;49;00m and '9999999999' == '99999999999'\n  \n  \u001B[0m\u001B[91m- 99999999999\u001B[39;49;00m\u001B[90m\u001B[39;49;00m\n  ?           -\u001B[90m\u001B[39;49;00m\n  \u001B[92m+ 9999999999\u001B[39;49;00m\u001B[90m\u001B[39;49;00m)","time":{"start":1761224598315,"stop":1761224620401,"duration":22086}}],"categories":[{"name":"Product defects","matchedStatuses":[]}],"tags":[]},"source":"9e3ee8b12b294abd.json","parameterValues":[]}