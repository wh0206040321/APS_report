{"uid":"c439134a7d8cc737","name":"test_itemgroup_editnamesuccess","fullName":"Tests.test_items.test_itemgroup.TestItemGroupPage#test_itemgroup_editnamesuccess","historyId":"8a0f1269e2d9e6b91e49fe1d3854e697","time":{"start":1760963219122,"stop":1760963227950,"duration":8828},"status":"failed","statusMessage":"AssertionError: assert ('1测试A' == '1测试A10'\n  \n  \u001B[0m\u001B[91m- 1测试A10\u001B[39;49;00m\u001B[90m\u001B[39;49;00m\n  ?     --\u001B[90m\u001B[39;49;00m\n  \u001B[92m+ 1测试A\u001B[39;49;00m\u001B[90m\u001B[39;49;00m)","statusTrace":"self = <test_items.test_itemgroup.TestItemGroupPage object at 0x0000014AE2BFD960>, login_to_itemgroup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"2593b68ab8028aac19144c639f229fdf\")>\n\n    @allure.story(\"修改物料组名称，自动补充标识，关联条件成功\")\n    # @pytest.mark.run(order=1)\n    def test_itemgroup_editnamesuccess(self, login_to_itemgroup):\n        driver = login_to_itemgroup  # WebDriver 实例\n        item = ItemPage(driver)  # 用 driver 初始化 ItemPage\n        name = \"1测试A\"\n        # 选中物料组代码\n        item.click_button(f'//tr[./td[2][.//span[text()=\"{name}\"]]]/td[2]')\n        # 点击修改按钮\n        item.click_edi_button()\n        sleep(1)\n        # 生成随机数\n        random_int = random.randint(1, 10)\n        text = name + f\"{random_int}\"\n        # 输入修改的物料组名称\n        item.enter_texts(\n            '(//label[text()=\"物料组名称\"])[1]/parent::div//input', f\"{text}\"\n        )\n        # 获取修改好的值\n        editname = item.get_find_element_xpath(\n            '(//label[text()=\"物料组名称\"])[1]/parent::div//input'\n        ).get_attribute(\"value\")\n    \n        # 修改自动补充标识 自动补充标志下拉框\n        item.click_button(\n            '(//label[text()=\"自动补充标志\"])[1]/parent::div//input[@class=\"ivu-select-input\"]'\n        )\n        # 自动补充标志选择是(是库存+1对1制造)\n        item.click_button('//li[text()=\"是(库存+1对1制造)\"]')\n        # 获取自动补充标志下拉框的值\n        itemsel = item.get_find_element_xpath(\n            '(//label[text()=\"自动补充标志\"])[1]/parent::div//input[@class=\"ivu-select-input\"]'\n        ).get_attribute(\"value\")\n    \n        # 修改关联条件 点击代码设计器\n        item.click_button('(//label[text()=\"关联条件\"])[1]/parent::div//i')\n        # 点击标准登录\n        item.click_button('(//div[text()=\" 标准登录 \"])[1]')\n        # 首先，定位到你想要双击的元素\n        element_to_double_click = driver.find_element(\n            By.XPATH, '(//span[text()=\"订单规格1相等\"])[1]'\n        )\n        # 创建一个 ActionChains 对象\n        actions = ActionChains(driver)\n        # 双击命令\n        actions.double_click(element_to_double_click).perform()\n        # 点击确认\n        item.click_button(\n            '(//div[@class=\"h-40px flex-justify-end flex-align-items-end b-t-s-d9e3f3\"])[2]/button[1]'\n        )\n        # 获取代码设计器文本框\n        sleep(1)\n        itemcode = item.get_find_element_xpath(\n            '(//label[text()=\"关联条件\"])[1]/parent::div//input'\n        ).get_attribute(\"value\")\n        # 点击确定\n        item.click_button(\n            '(//div[@class=\"h-40px flex-justify-end flex-align-items-end b-t-s-d9e3f3\"])[1]/button[1]'\n        )\n        sleep(1)\n        # 定位表格内容\n        itemname = item.get_find_element_xpath(\n            f'//tr[./td[2][.//span[text()=\"{name}\"]]]/td[3]/div'\n        ).text\n        itemautoGenerateFlag = item.get_find_element_xpath(\n            f'//tr[./td[2][.//span[text()=\"{name}\"]]]/td[8]/div'\n        ).text\n        sleep(1)\n        itempeggingConditionExpr = item.get_find_element_xpath(\n            f'//tr[./td[2][.//span[text()=\"{name}\"]]]/td[10]/div'\n        ).text\n>       assert (\n            itemname == editname\n            and itemautoGenerateFlag == itemsel\n            and itempeggingConditionExpr == itemcode\n        )\nE       AssertionError: assert ('1测试A' == '1测试A10'\nE         \nE         \u001B[0m\u001B[91m- 1测试A10\u001B[39;49;00m\u001B[90m\u001B[39;49;00m\nE         ?     --\u001B[90m\u001B[39;49;00m\nE         \u001B[92m+ 1测试A\u001B[39;49;00m\u001B[90m\u001B[39;49;00m)\n\nTests\\test_items\\test_itemgroup.py:460: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"login_to_itemgroup","time":{"start":1760963207891,"stop":1760963219121,"duration":11230},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentStep":false,"hasContent":false,"attachmentsCount":0,"shouldDisplayMessage":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert ('1测试A' == '1测试A10'\n  \n  \u001B[0m\u001B[91m- 1测试A10\u001B[39;49;00m\u001B[90m\u001B[39;49;00m\n  ?     --\u001B[90m\u001B[39;49;00m\n  \u001B[92m+ 1测试A\u001B[39;49;00m\u001B[90m\u001B[39;49;00m)","statusTrace":"self = <test_items.test_itemgroup.TestItemGroupPage object at 0x0000014AE2BFD960>, login_to_itemgroup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"2593b68ab8028aac19144c639f229fdf\")>\n\n    @allure.story(\"修改物料组名称，自动补充标识，关联条件成功\")\n    # @pytest.mark.run(order=1)\n    def test_itemgroup_editnamesuccess(self, login_to_itemgroup):\n        driver = login_to_itemgroup  # WebDriver 实例\n        item = ItemPage(driver)  # 用 driver 初始化 ItemPage\n        name = \"1测试A\"\n        # 选中物料组代码\n        item.click_button(f'//tr[./td[2][.//span[text()=\"{name}\"]]]/td[2]')\n        # 点击修改按钮\n        item.click_edi_button()\n        sleep(1)\n        # 生成随机数\n        random_int = random.randint(1, 10)\n        text = name + f\"{random_int}\"\n        # 输入修改的物料组名称\n        item.enter_texts(\n            '(//label[text()=\"物料组名称\"])[1]/parent::div//input', f\"{text}\"\n        )\n        # 获取修改好的值\n        editname = item.get_find_element_xpath(\n            '(//label[text()=\"物料组名称\"])[1]/parent::div//input'\n        ).get_attribute(\"value\")\n    \n        # 修改自动补充标识 自动补充标志下拉框\n        item.click_button(\n            '(//label[text()=\"自动补充标志\"])[1]/parent::div//input[@class=\"ivu-select-input\"]'\n        )\n        # 自动补充标志选择是(是库存+1对1制造)\n        item.click_button('//li[text()=\"是(库存+1对1制造)\"]')\n        # 获取自动补充标志下拉框的值\n        itemsel = item.get_find_element_xpath(\n            '(//label[text()=\"自动补充标志\"])[1]/parent::div//input[@class=\"ivu-select-input\"]'\n        ).get_attribute(\"value\")\n    \n        # 修改关联条件 点击代码设计器\n        item.click_button('(//label[text()=\"关联条件\"])[1]/parent::div//i')\n        # 点击标准登录\n        item.click_button('(//div[text()=\" 标准登录 \"])[1]')\n        # 首先，定位到你想要双击的元素\n        element_to_double_click = driver.find_element(\n            By.XPATH, '(//span[text()=\"订单规格1相等\"])[1]'\n        )\n        # 创建一个 ActionChains 对象\n        actions = ActionChains(driver)\n        # 双击命令\n        actions.double_click(element_to_double_click).perform()\n        # 点击确认\n        item.click_button(\n            '(//div[@class=\"h-40px flex-justify-end flex-align-items-end b-t-s-d9e3f3\"])[2]/button[1]'\n        )\n        # 获取代码设计器文本框\n        sleep(1)\n        itemcode = item.get_find_element_xpath(\n            '(//label[text()=\"关联条件\"])[1]/parent::div//input'\n        ).get_attribute(\"value\")\n        # 点击确定\n        item.click_button(\n            '(//div[@class=\"h-40px flex-justify-end flex-align-items-end b-t-s-d9e3f3\"])[1]/button[1]'\n        )\n        sleep(1)\n        # 定位表格内容\n        itemname = item.get_find_element_xpath(\n            f'//tr[./td[2][.//span[text()=\"{name}\"]]]/td[3]/div'\n        ).text\n        itemautoGenerateFlag = item.get_find_element_xpath(\n            f'//tr[./td[2][.//span[text()=\"{name}\"]]]/td[8]/div'\n        ).text\n        sleep(1)\n        itempeggingConditionExpr = item.get_find_element_xpath(\n            f'//tr[./td[2][.//span[text()=\"{name}\"]]]/td[10]/div'\n        ).text\n>       assert (\n            itemname == editname\n            and itemautoGenerateFlag == itemsel\n            and itempeggingConditionExpr == itemcode\n        )\nE       AssertionError: assert ('1测试A' == '1测试A10'\nE         \nE         \u001B[0m\u001B[91m- 1测试A10\u001B[39;49;00m\u001B[90m\u001B[39;49;00m\nE         ?     --\u001B[90m\u001B[39;49;00m\nE         \u001B[92m+ 1测试A\u001B[39;49;00m\u001B[90m\u001B[39;49;00m)\n\nTests\\test_items\\test_itemgroup.py:460: AssertionError","steps":[],"attachments":[{"uid":"1d7e23ab6ac28294","name":"test_itemgroup_editnamesuccess_failure","source":"1d7e23ab6ac28294.png","type":"image/png","size":248439},{"uid":"a51a0a3d47524e5b","name":"test_itemgroup_editnamesuccess_source","source":"a51a0a3d47524e5b.html","type":"text/html","size":869096},{"uid":"7a9270550c3e20b4","name":"test_itemgroup_editnamesuccess_failure","source":"7a9270550c3e20b4.png","type":"image/png","size":137200},{"uid":"f059befffe26ab6f","name":"test_itemgroup_editnamesuccess_source","source":"f059befffe26ab6f.html","type":"text/html","size":1526413},{"uid":"302b9466947f7ac4","name":"log","source":"302b9466947f7ac4.txt","type":"text/plain","size":2560}],"parameters":[],"stepsCount":0,"attachmentStep":false,"hasContent":true,"attachmentsCount":5,"shouldDisplayMessage":true},"afterStages":[{"name":"login_to_itemgroup::0","time":{"start":1760963228630,"stop":1760963230874,"duration":2244},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentStep":false,"hasContent":false,"attachmentsCount":0,"shouldDisplayMessage":false}],"labels":[{"name":"story","value":"修改物料组名称，自动补充标识，关联条件成功"},{"name":"feature","value":"物料组表测试用例"},{"name":"parentSuite","value":"Tests.test_items"},{"name":"suite","value":"test_itemgroup"},{"name":"subSuite","value":"TestItemGroupPage"},{"name":"host","value":"WIN-20240820MJV"},{"name":"thread","value":"3232-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"Tests.test_items.test_itemgroup"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[]}],"tags":[]},"source":"c439134a7d8cc737.json","parameterValues":[]}