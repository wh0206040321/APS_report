{"uid":"5c9814fe96ab6435","name":"test_process_textverify","fullName":"Tests.test_items.test_process.TestProcessPage#test_process_textverify","historyId":"0ccc727f247d1e042a7aa9f45b711aba","time":{"start":1761227754441,"stop":1761227766730,"duration":12289},"status":"failed","statusMessage":"AssertionError: 预期数据是111111111111111133331122221111222221111111113333111111144444111111111111111111111111111111111111111111111111，实际得到111111111111111133331122221111222221111111113333111111144444111111111111111111111111111111111111111111111111\nassert ('111111111111...1111111111111' == '111111111111...1111111111111'\n  \n  \u001B[0m\u001B[90m \u001B[39;49;00m 111111111111111133331122221111222221111111113333111111144444111111111111111111111111111111111111111111111111\u001B[90m\u001B[39;49;00m and '9999999999' == '99999999999'\n  \n  \u001B[0m\u001B[91m- 99999999999\u001B[39;49;00m\u001B[90m\u001B[39;49;00m\n  ?           -\u001B[90m\u001B[39;49;00m\n  \u001B[92m+ 9999999999\u001B[39;49;00m\u001B[90m\u001B[39;49;00m)","statusTrace":"self = <test_items.test_process.TestProcessPage object at 0x000001FC19086D10>, login_to_process = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"c8f117c79d88b992261d60f700b376ce\")>\n\n    @allure.story(\"校验数字文本框和文本框成功\")\n    # @pytest.mark.run(order=1)\n    def test_process_textverify(self, login_to_process):\n        driver = login_to_process  # WebDriver 实例\n        process = ProcessPage(driver)  # 用 driver 初始化 ProcessPage\n        name = \"111111111111111133331122221111222221111111113333111111144444111111111111111111111111111111111111111111111111\"\n        process.adds_process(name, name)\n        sleep(1)\n        adddata = process.get_find_element_xpath(\n            f'(//span[text()=\"{name}\"])[1]/ancestor::tr[1]/td[2]'\n        ).text\n        num_ = process.get_find_element_xpath(\n            f'(//span[text()=\"{name}\"])[1]/ancestor::tr[1]/td[5]'\n        ).text\n>       assert adddata == name and num_ == '99999999999', f\"预期数据是{name}，实际得到{adddata}\"\nE       AssertionError: 预期数据是111111111111111133331122221111222221111111113333111111144444111111111111111111111111111111111111111111111111，实际得到111111111111111133331122221111222221111111113333111111144444111111111111111111111111111111111111111111111111\nE       assert ('111111111111...1111111111111' == '111111111111...1111111111111'\nE         \nE         \u001B[0m\u001B[90m \u001B[39;49;00m 111111111111111133331122221111222221111111113333111111144444111111111111111111111111111111111111111111111111\u001B[90m\u001B[39;49;00m and '9999999999' == '99999999999'\nE         \nE         \u001B[0m\u001B[91m- 99999999999\u001B[39;49;00m\u001B[90m\u001B[39;49;00m\nE         ?           -\u001B[90m\u001B[39;49;00m\nE         \u001B[92m+ 9999999999\u001B[39;49;00m\u001B[90m\u001B[39;49;00m)\n\nTests\\test_items\\test_process.py:252: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"login_to_process","time":{"start":1761227739959,"stop":1761227754440,"duration":14481},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"stepsCount":0,"attachmentStep":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: 预期数据是111111111111111133331122221111222221111111113333111111144444111111111111111111111111111111111111111111111111，实际得到111111111111111133331122221111222221111111113333111111144444111111111111111111111111111111111111111111111111\nassert ('111111111111...1111111111111' == '111111111111...1111111111111'\n  \n  \u001B[0m\u001B[90m \u001B[39;49;00m 111111111111111133331122221111222221111111113333111111144444111111111111111111111111111111111111111111111111\u001B[90m\u001B[39;49;00m and '9999999999' == '99999999999'\n  \n  \u001B[0m\u001B[91m- 99999999999\u001B[39;49;00m\u001B[90m\u001B[39;49;00m\n  ?           -\u001B[90m\u001B[39;49;00m\n  \u001B[92m+ 9999999999\u001B[39;49;00m\u001B[90m\u001B[39;49;00m)","statusTrace":"self = <test_items.test_process.TestProcessPage object at 0x000001FC19086D10>, login_to_process = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"c8f117c79d88b992261d60f700b376ce\")>\n\n    @allure.story(\"校验数字文本框和文本框成功\")\n    # @pytest.mark.run(order=1)\n    def test_process_textverify(self, login_to_process):\n        driver = login_to_process  # WebDriver 实例\n        process = ProcessPage(driver)  # 用 driver 初始化 ProcessPage\n        name = \"111111111111111133331122221111222221111111113333111111144444111111111111111111111111111111111111111111111111\"\n        process.adds_process(name, name)\n        sleep(1)\n        adddata = process.get_find_element_xpath(\n            f'(//span[text()=\"{name}\"])[1]/ancestor::tr[1]/td[2]'\n        ).text\n        num_ = process.get_find_element_xpath(\n            f'(//span[text()=\"{name}\"])[1]/ancestor::tr[1]/td[5]'\n        ).text\n>       assert adddata == name and num_ == '99999999999', f\"预期数据是{name}，实际得到{adddata}\"\nE       AssertionError: 预期数据是111111111111111133331122221111222221111111113333111111144444111111111111111111111111111111111111111111111111，实际得到111111111111111133331122221111222221111111113333111111144444111111111111111111111111111111111111111111111111\nE       assert ('111111111111...1111111111111' == '111111111111...1111111111111'\nE         \nE         \u001B[0m\u001B[90m \u001B[39;49;00m 111111111111111133331122221111222221111111113333111111144444111111111111111111111111111111111111111111111111\u001B[90m\u001B[39;49;00m and '9999999999' == '99999999999'\nE         \nE         \u001B[0m\u001B[91m- 99999999999\u001B[39;49;00m\u001B[90m\u001B[39;49;00m\nE         ?           -\u001B[90m\u001B[39;49;00m\nE         \u001B[92m+ 9999999999\u001B[39;49;00m\u001B[90m\u001B[39;49;00m)\n\nTests\\test_items\\test_process.py:252: AssertionError","steps":[],"attachments":[{"uid":"635f43c3910fca26","name":"test_process_textverify_failure","source":"635f43c3910fca26.png","type":"image/png","size":249694},{"uid":"238e8ba0e2b1402f","name":"test_process_textverify_source","source":"238e8ba0e2b1402f.html","type":"text/html","size":869096},{"uid":"12417eed9644c34a","name":"test_process_textverify_failure","source":"12417eed9644c34a.png","type":"image/png","size":107217},{"uid":"803591ce457b32cf","name":"test_process_textverify_source","source":"803591ce457b32cf.html","type":"text/html","size":1285874},{"uid":"7f063541a742a83a","name":"log","source":"7f063541a742a83a.txt","type":"text/plain","size":1587}],"parameters":[],"shouldDisplayMessage":true,"attachmentsCount":5,"hasContent":true,"stepsCount":0,"attachmentStep":false},"afterStages":[{"name":"login_to_process::0","time":{"start":1761227767714,"stop":1761227770033,"duration":2319},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"stepsCount":0,"attachmentStep":false}],"labels":[{"name":"story","value":"校验数字文本框和文本框成功"},{"name":"feature","value":"工序表测试用例"},{"name":"parentSuite","value":"Tests.test_items"},{"name":"suite","value":"test_process"},{"name":"subSuite","value":"TestProcessPage"},{"name":"host","value":"WIN-20240820MJV"},{"name":"thread","value":"21764-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"Tests.test_items.test_process"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":[]},"source":"5c9814fe96ab6435.json","parameterValues":[]}