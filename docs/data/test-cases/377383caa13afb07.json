{"uid":"377383caa13afb07","name":"test_process_textverify","fullName":"Tests.test_items.test_process.TestProcessPage#test_process_textverify","historyId":"0ccc727f247d1e042a7aa9f45b711aba","time":{"start":1761227785511,"stop":1761227795848,"duration":10337},"status":"failed","statusMessage":"AssertionError: 预期数据是111111111111111133331122221111222221111111113333111111144444111111111111111111111111111111111111111111111111，实际得到111111111111111133331122221111222221111111113333111111144444111111111111111111111111111111111111111111111111\nassert ('111111111111...1111111111111' == '111111111111...1111111111111'\n  \n  \u001B[0m\u001B[90m \u001B[39;49;00m 111111111111111133331122221111222221111111113333111111144444111111111111111111111111111111111111111111111111\u001B[90m\u001B[39;49;00m and '9999999999' == '99999999999'\n  \n  \u001B[0m\u001B[91m- 99999999999\u001B[39;49;00m\u001B[90m\u001B[39;49;00m\n  ?           -\u001B[90m\u001B[39;49;00m\n  \u001B[92m+ 9999999999\u001B[39;49;00m\u001B[90m\u001B[39;49;00m)","statusTrace":"self = <test_items.test_process.TestProcessPage object at 0x000001FC19086D10>, login_to_process = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"adc2a9d6358a6dca98dd3ff8f8047b96\")>\n\n    @allure.story(\"校验数字文本框和文本框成功\")\n    # @pytest.mark.run(order=1)\n    def test_process_textverify(self, login_to_process):\n        driver = login_to_process  # WebDriver 实例\n        process = ProcessPage(driver)  # 用 driver 初始化 ProcessPage\n        name = \"111111111111111133331122221111222221111111113333111111144444111111111111111111111111111111111111111111111111\"\n        process.adds_process(name, name)\n        sleep(1)\n        adddata = process.get_find_element_xpath(\n            f'(//span[text()=\"{name}\"])[1]/ancestor::tr[1]/td[2]'\n        ).text\n        num_ = process.get_find_element_xpath(\n            f'(//span[text()=\"{name}\"])[1]/ancestor::tr[1]/td[5]'\n        ).text\n>       assert adddata == name and num_ == '99999999999', f\"预期数据是{name}，实际得到{adddata}\"\nE       AssertionError: 预期数据是111111111111111133331122221111222221111111113333111111144444111111111111111111111111111111111111111111111111，实际得到111111111111111133331122221111222221111111113333111111144444111111111111111111111111111111111111111111111111\nE       assert ('111111111111...1111111111111' == '111111111111...1111111111111'\nE         \nE         \u001B[0m\u001B[90m \u001B[39;49;00m 111111111111111133331122221111222221111111113333111111144444111111111111111111111111111111111111111111111111\u001B[90m\u001B[39;49;00m and '9999999999' == '99999999999'\nE         \nE         \u001B[0m\u001B[91m- 99999999999\u001B[39;49;00m\u001B[90m\u001B[39;49;00m\nE         ?           -\u001B[90m\u001B[39;49;00m\nE         \u001B[92m+ 9999999999\u001B[39;49;00m\u001B[90m\u001B[39;49;00m)\n\nTests\\test_items\\test_process.py:252: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":1,"retriesStatusChange":false,"beforeStages":[{"name":"login_to_process","time":{"start":1761227770042,"stop":1761227785510,"duration":15468},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"stepsCount":0,"attachmentStep":false,"shouldDisplayMessage":false,"attachmentsCount":0}],"testStage":{"status":"failed","statusMessage":"AssertionError: 预期数据是111111111111111133331122221111222221111111113333111111144444111111111111111111111111111111111111111111111111，实际得到111111111111111133331122221111222221111111113333111111144444111111111111111111111111111111111111111111111111\nassert ('111111111111...1111111111111' == '111111111111...1111111111111'\n  \n  \u001B[0m\u001B[90m \u001B[39;49;00m 111111111111111133331122221111222221111111113333111111144444111111111111111111111111111111111111111111111111\u001B[90m\u001B[39;49;00m and '9999999999' == '99999999999'\n  \n  \u001B[0m\u001B[91m- 99999999999\u001B[39;49;00m\u001B[90m\u001B[39;49;00m\n  ?           -\u001B[90m\u001B[39;49;00m\n  \u001B[92m+ 9999999999\u001B[39;49;00m\u001B[90m\u001B[39;49;00m)","statusTrace":"self = <test_items.test_process.TestProcessPage object at 0x000001FC19086D10>, login_to_process = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"adc2a9d6358a6dca98dd3ff8f8047b96\")>\n\n    @allure.story(\"校验数字文本框和文本框成功\")\n    # @pytest.mark.run(order=1)\n    def test_process_textverify(self, login_to_process):\n        driver = login_to_process  # WebDriver 实例\n        process = ProcessPage(driver)  # 用 driver 初始化 ProcessPage\n        name = \"111111111111111133331122221111222221111111113333111111144444111111111111111111111111111111111111111111111111\"\n        process.adds_process(name, name)\n        sleep(1)\n        adddata = process.get_find_element_xpath(\n            f'(//span[text()=\"{name}\"])[1]/ancestor::tr[1]/td[2]'\n        ).text\n        num_ = process.get_find_element_xpath(\n            f'(//span[text()=\"{name}\"])[1]/ancestor::tr[1]/td[5]'\n        ).text\n>       assert adddata == name and num_ == '99999999999', f\"预期数据是{name}，实际得到{adddata}\"\nE       AssertionError: 预期数据是111111111111111133331122221111222221111111113333111111144444111111111111111111111111111111111111111111111111，实际得到111111111111111133331122221111222221111111113333111111144444111111111111111111111111111111111111111111111111\nE       assert ('111111111111...1111111111111' == '111111111111...1111111111111'\nE         \nE         \u001B[0m\u001B[90m \u001B[39;49;00m 111111111111111133331122221111222221111111113333111111144444111111111111111111111111111111111111111111111111\u001B[90m\u001B[39;49;00m and '9999999999' == '99999999999'\nE         \nE         \u001B[0m\u001B[91m- 99999999999\u001B[39;49;00m\u001B[90m\u001B[39;49;00m\nE         ?           -\u001B[90m\u001B[39;49;00m\nE         \u001B[92m+ 9999999999\u001B[39;49;00m\u001B[90m\u001B[39;49;00m)\n\nTests\\test_items\\test_process.py:252: AssertionError","steps":[],"attachments":[{"uid":"c9a3a5890b86c12f","name":"test_process_textverify_failure","source":"c9a3a5890b86c12f.png","type":"image/png","size":86414},{"uid":"7884bacc8052eaac","name":"test_process_textverify_source","source":"7884bacc8052eaac.html","type":"text/html","size":1285766},{"uid":"171bcad5571c1c7","name":"log","source":"171bcad5571c1c7.txt","type":"text/plain","size":3175}],"parameters":[],"hasContent":true,"stepsCount":0,"attachmentStep":false,"shouldDisplayMessage":true,"attachmentsCount":3},"afterStages":[{"name":"login_to_process::0","time":{"start":1761227796431,"stop":1761227798774,"duration":2343},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"stepsCount":0,"attachmentStep":false,"shouldDisplayMessage":false,"attachmentsCount":0}],"labels":[{"name":"story","value":"校验数字文本框和文本框成功"},{"name":"feature","value":"工序表测试用例"},{"name":"parentSuite","value":"Tests.test_items"},{"name":"suite","value":"test_process"},{"name":"subSuite","value":"TestProcessPage"},{"name":"host","value":"WIN-20240820MJV"},{"name":"thread","value":"21764-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"Tests.test_items.test_process"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"69cbe80a0b8985e1","status":"failed","statusDetails":"AssertionError: 预期数据是111111111111111133331122221111222221111111113333111111144444111111111111111111111111111111111111111111111111，实际得到111111111111111133331122221111222221111111113333111111144444111111111111111111111111111111111111111111111111\nassert ('111111111111...1111111111111' == '111111111111...1111111111111'\n  \n  \u001B[0m\u001B[90m \u001B[39;49;00m 111111111111111133331122221111222221111111113333111111144444111111111111111111111111111111111111111111111111\u001B[90m\u001B[39;49;00m and '9999999999' == '99999999999'\n  \n  \u001B[0m\u001B[91m- 99999999999\u001B[39;49;00m\u001B[90m\u001B[39;49;00m\n  ?           -\u001B[90m\u001B[39;49;00m\n  \u001B[92m+ 9999999999\u001B[39;49;00m\u001B[90m\u001B[39;49;00m)","time":{"start":1761227754441,"stop":1761227766730,"duration":12289}}],"categories":[{"name":"Product defects","matchedStatuses":[]}],"tags":[]},"source":"377383caa13afb07.json","parameterValues":[]}