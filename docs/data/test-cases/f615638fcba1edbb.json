{"uid":"f615638fcba1edbb","name":"test_setting_select_dateinput","fullName":"Tests.test_items.test_setting.TestSettingPage#test_setting_select_dateinput","historyId":"3f14c6b0ac055e5e3fb86f8a3d871755","time":{"start":1753971247415,"stop":1753971253431,"duration":6016},"status":"broken","statusMessage":"Exception: 点击失败：Message: stale element reference: stale element not found in the current frame\n  (Session info: chrome=137.0.7151.69); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#stale-element-reference-exception\nStacktrace:\n\tGetHandleVerifier [0x0x7ff787026f65+78965]\n\tGetHandleVerifier [0x0x7ff787026fc0+79056]\n\t(No symbol) [0x0x7ff786db9dda]\n\t(No symbol) [0x0x7ff786dc17c1]\n\t(No symbol) [0x0x7ff786dc482c]\n\t(No symbol) [0x0x7ff786dc48ff]\n\t(No symbol) [0x0x7ff786e181cb]\n\t(No symbol) [0x0x7ff786e15c82]\n\t(No symbol) [0x0x7ff786e12cd1]\n\t(No symbol) [0x0x7ff786e11c44]\n\t(No symbol) [0x0x7ff786e032a4]\n\t(No symbol) [0x0x7ff786e3866a]\n\t(No symbol) [0x0x7ff786e02b56]\n\t(No symbol) [0x0x7ff786e38880]\n\t(No symbol) [0x0x7ff786e60dbe]\n\t(No symbol) [0x0x7ff786e38443]\n\t(No symbol) [0x0x7ff786e01311]\n\t(No symbol) [0x0x7ff786e020a3]\n\tGetHandleVerifier [0x0x7ff7872de26d+2926461]\n\tGetHandleVerifier [0x0x7ff7872d8993+2903715]\n\tGetHandleVerifier [0x0x7ff7872f6aed+3026941]\n\tGetHandleVerifier [0x0x7ff7870416fe+187406]\n\tGetHandleVerifier [0x0x7ff7870496ef+220159]\n\tGetHandleVerifier [0x0x7ff78702faf4+114692]\n\tGetHandleVerifier [0x0x7ff78702fca9+115129]\n\tGetHandleVerifier [0x0x7ff7870164d8+10728]\n\tBaseThreadInitThunk [0x0x7ffe499c7374+20]\n\tRtlUserThreadStart [0x0x7ffe4a2fcc91+33]","statusTrace":"self = <Pages.itemsPage.setting_page.SettingPage object at 0x00000203F1374D00>, by_or_element = 'xpath', value = '//p[text()=\"交货期\"]/following-sibling::div[1]', wait_time = 10\n\n    def click(self, by_or_element, value=None, wait_time=10):\n        if value is not None:\n            by = by_or_element\n            logging.info(f\"点击元素：By = {by}, Value = {value}\")\n            try:\n                element = WebDriverWait(self.driver, wait_time).until(\n                    EC.element_to_be_clickable((by, value))\n                )\n            except TimeoutException:\n                logging.warning(f\"❌ 点击超时：元素 {by} = {value} 未在 {wait_time} 秒内变为可点击\")\n                raise TimeoutException(f\"点击失败，找不到元素：{by} = {value}\")\n        else:\n            logging.info(\"点击元素：WebElement 对象\")\n            element = by_or_element\n    \n        try:\n>           element.click()\n\nPages\\base_page.py:56: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nmyenv\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:121: in click\n    self._execute(Command.CLICK_ELEMENT)\nmyenv\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:574: in _execute\n    return self._parent.execute(command, params)\nmyenv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:447: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000203F0D10820>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"stale element reference\",\"message\":\"stale element reference: stale elemen...ff7870164d8+10728]\\\\n\\\\tBaseThreadInitThunk [0x0x7ffe499c7374+20]\\\\n\\\\tRtlUserThreadStart [0x0x7ffe4a2fcc91+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: stale element not found in the current frame\nE         (Session info: chrome=137.0.7151.69); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#stale-element-reference-exception\nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x7ff787026f65+78965]\nE       \tGetHandleVerifier [0x0x7ff787026fc0+79056]\nE       \t(No symbol) [0x0x7ff786db9dda]\nE       \t(No symbol) [0x0x7ff786dc17c1]\nE       \t(No symbol) [0x0x7ff786dc482c]\nE       \t(No symbol) [0x0x7ff786dc48ff]\nE       \t(No symbol) [0x0x7ff786e181cb]\nE       \t(No symbol) [0x0x7ff786e15c82]\nE       \t(No symbol) [0x0x7ff786e12cd1]\nE       \t(No symbol) [0x0x7ff786e11c44]\nE       \t(No symbol) [0x0x7ff786e032a4]\nE       \t(No symbol) [0x0x7ff786e3866a]\nE       \t(No symbol) [0x0x7ff786e02b56]\nE       \t(No symbol) [0x0x7ff786e38880]\nE       \t(No symbol) [0x0x7ff786e60dbe]\nE       \t(No symbol) [0x0x7ff786e38443]\nE       \t(No symbol) [0x0x7ff786e01311]\nE       \t(No symbol) [0x0x7ff786e020a3]\nE       \tGetHandleVerifier [0x0x7ff7872de26d+2926461]\nE       \tGetHandleVerifier [0x0x7ff7872d8993+2903715]\nE       \tGetHandleVerifier [0x0x7ff7872f6aed+3026941]\nE       \tGetHandleVerifier [0x0x7ff7870416fe+187406]\nE       \tGetHandleVerifier [0x0x7ff7870496ef+220159]\nE       \tGetHandleVerifier [0x0x7ff78702faf4+114692]\nE       \tGetHandleVerifier [0x0x7ff78702fca9+115129]\nE       \tGetHandleVerifier [0x0x7ff7870164d8+10728]\nE       \tBaseThreadInitThunk [0x0x7ffe499c7374+20]\nE       \tRtlUserThreadStart [0x0x7ffe4a2fcc91+33]\n\nmyenv\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: StaleElementReferenceException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_items.test_setting.TestSettingPage object at 0x00000203F0E30B50>\nlogin_to_setting = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"d52f64d544c4484d3db73dbece3a47cb\")>\n\n    @allure.story(\"设置表格布局-制造订单交货期查询-日期范围\")\n    # @pytest.mark.run(order=1)\n    def test_setting_select_dateinput(self, login_to_setting):\n        driver = login_to_setting  # WebDriver 实例\n        setting = SettingPage(driver)  # 用 driver 初始化 SettingPage\n        setting.click_button('(//span[text()=\"计划业务数据\"])[1]')\n        setting.click_button('(//span[text()=\"制造订单\"])[1]')\n        layout = \"测试布局A\"\n        code = \"交货期\"\n        sleep(1)\n        setting.click_button(f'//div[@class=\"tabsDivItemCon\"]/div[text()=\" {layout} \"]')\n        sleep(1)\n        setting.click_setting_button()\n        # 点击快速查询按钮\n        setting.click_button('(//div[text()=\" 快速查询 \"])[2]')\n        # 点击特定代码的行以选择\n        setting.click_button(\n            f'//tr[./td[3][.//span[text()=\"{code}\"]]]/td[4]//input[@placeholder=\"请选择\"]'\n        )\n        # 打开下拉框\n        setting.click_button('//div[text()=\"日期范围\"]')\n        setting.click_button('(//div[@class=\"demo-drawer-footer\"])[5]/button[2]')\n        time1 = setting.get_find_element_xpath(\n            '//div[@class=\"single-page\"]//table[@class=\"vxe-table--body\" and .//tr[@class=\"vxe-body--row\"]]//tr[2]/td[9]'\n        ).text\n        sleep(1)\n>       setting.click_button('//p[text()=\"交货期\"]/following-sibling::div[1]')\n\nTests\\test_items\\test_setting.py:1342: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nPages\\itemsPage\\setting_page.py:22: in click_button\n    self.click(By.XPATH, xpath)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Pages.itemsPage.setting_page.SettingPage object at 0x00000203F1374D00>, by_or_element = 'xpath', value = '//p[text()=\"交货期\"]/following-sibling::div[1]', wait_time = 10\n\n    def click(self, by_or_element, value=None, wait_time=10):\n        if value is not None:\n            by = by_or_element\n            logging.info(f\"点击元素：By = {by}, Value = {value}\")\n            try:\n                element = WebDriverWait(self.driver, wait_time).until(\n                    EC.element_to_be_clickable((by, value))\n                )\n            except TimeoutException:\n                logging.warning(f\"❌ 点击超时：元素 {by} = {value} 未在 {wait_time} 秒内变为可点击\")\n                raise TimeoutException(f\"点击失败，找不到元素：{by} = {value}\")\n        else:\n            logging.info(\"点击元素：WebElement 对象\")\n            element = by_or_element\n    \n        try:\n            element.click()\n        except ElementClickInterceptedException:\n            logging.warning(\"⚠️ 原生点击被拦截，尝试使用 JS 点击\")\n            self.driver.execute_script(\"arguments[0].click();\", element)\n        except Exception as e:\n            logging.warning(f\"点击失败：{e}\")\n>           raise Exception(f\"点击失败：{e}\")\nE           Exception: 点击失败：Message: stale element reference: stale element not found in the current frame\nE             (Session info: chrome=137.0.7151.69); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#stale-element-reference-exception\nE           Stacktrace:\nE           \tGetHandleVerifier [0x0x7ff787026f65+78965]\nE           \tGetHandleVerifier [0x0x7ff787026fc0+79056]\nE           \t(No symbol) [0x0x7ff786db9dda]\nE           \t(No symbol) [0x0x7ff786dc17c1]\nE           \t(No symbol) [0x0x7ff786dc482c]\nE           \t(No symbol) [0x0x7ff786dc48ff]\nE           \t(No symbol) [0x0x7ff786e181cb]\nE           \t(No symbol) [0x0x7ff786e15c82]\nE           \t(No symbol) [0x0x7ff786e12cd1]\nE           \t(No symbol) [0x0x7ff786e11c44]\nE           \t(No symbol) [0x0x7ff786e032a4]\nE           \t(No symbol) [0x0x7ff786e3866a]\nE           \t(No symbol) [0x0x7ff786e02b56]\nE           \t(No symbol) [0x0x7ff786e38880]\nE           \t(No symbol) [0x0x7ff786e60dbe]\nE           \t(No symbol) [0x0x7ff786e38443]\nE           \t(No symbol) [0x0x7ff786e01311]\nE           \t(No symbol) [0x0x7ff786e020a3]\nE           \tGetHandleVerifier [0x0x7ff7872de26d+2926461]\nE           \tGetHandleVerifier [0x0x7ff7872d8993+2903715]\nE           \tGetHandleVerifier [0x0x7ff7872f6aed+3026941]\nE           \tGetHandleVerifier [0x0x7ff7870416fe+187406]\nE           \tGetHandleVerifier [0x0x7ff7870496ef+220159]\nE           \tGetHandleVerifier [0x0x7ff78702faf4+114692]\nE           \tGetHandleVerifier [0x0x7ff78702fca9+115129]\nE           \tGetHandleVerifier [0x0x7ff7870164d8+10728]\nE           \tBaseThreadInitThunk [0x0x7ffe499c7374+20]\nE           \tRtlUserThreadStart [0x0x7ffe4a2fcc91+33]\n\nPages\\base_page.py:62: Exception","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"login_to_setting","time":{"start":1753971239429,"stop":1753971247415,"duration":7986},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"attachmentStep":false,"hasContent":false,"stepsCount":0}],"testStage":{"status":"broken","statusMessage":"Exception: 点击失败：Message: stale element reference: stale element not found in the current frame\n  (Session info: chrome=137.0.7151.69); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#stale-element-reference-exception\nStacktrace:\n\tGetHandleVerifier [0x0x7ff787026f65+78965]\n\tGetHandleVerifier [0x0x7ff787026fc0+79056]\n\t(No symbol) [0x0x7ff786db9dda]\n\t(No symbol) [0x0x7ff786dc17c1]\n\t(No symbol) [0x0x7ff786dc482c]\n\t(No symbol) [0x0x7ff786dc48ff]\n\t(No symbol) [0x0x7ff786e181cb]\n\t(No symbol) [0x0x7ff786e15c82]\n\t(No symbol) [0x0x7ff786e12cd1]\n\t(No symbol) [0x0x7ff786e11c44]\n\t(No symbol) [0x0x7ff786e032a4]\n\t(No symbol) [0x0x7ff786e3866a]\n\t(No symbol) [0x0x7ff786e02b56]\n\t(No symbol) [0x0x7ff786e38880]\n\t(No symbol) [0x0x7ff786e60dbe]\n\t(No symbol) [0x0x7ff786e38443]\n\t(No symbol) [0x0x7ff786e01311]\n\t(No symbol) [0x0x7ff786e020a3]\n\tGetHandleVerifier [0x0x7ff7872de26d+2926461]\n\tGetHandleVerifier [0x0x7ff7872d8993+2903715]\n\tGetHandleVerifier [0x0x7ff7872f6aed+3026941]\n\tGetHandleVerifier [0x0x7ff7870416fe+187406]\n\tGetHandleVerifier [0x0x7ff7870496ef+220159]\n\tGetHandleVerifier [0x0x7ff78702faf4+114692]\n\tGetHandleVerifier [0x0x7ff78702fca9+115129]\n\tGetHandleVerifier [0x0x7ff7870164d8+10728]\n\tBaseThreadInitThunk [0x0x7ffe499c7374+20]\n\tRtlUserThreadStart [0x0x7ffe4a2fcc91+33]","statusTrace":"self = <Pages.itemsPage.setting_page.SettingPage object at 0x00000203F1374D00>, by_or_element = 'xpath', value = '//p[text()=\"交货期\"]/following-sibling::div[1]', wait_time = 10\n\n    def click(self, by_or_element, value=None, wait_time=10):\n        if value is not None:\n            by = by_or_element\n            logging.info(f\"点击元素：By = {by}, Value = {value}\")\n            try:\n                element = WebDriverWait(self.driver, wait_time).until(\n                    EC.element_to_be_clickable((by, value))\n                )\n            except TimeoutException:\n                logging.warning(f\"❌ 点击超时：元素 {by} = {value} 未在 {wait_time} 秒内变为可点击\")\n                raise TimeoutException(f\"点击失败，找不到元素：{by} = {value}\")\n        else:\n            logging.info(\"点击元素：WebElement 对象\")\n            element = by_or_element\n    \n        try:\n>           element.click()\n\nPages\\base_page.py:56: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nmyenv\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:121: in click\n    self._execute(Command.CLICK_ELEMENT)\nmyenv\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:574: in _execute\n    return self._parent.execute(command, params)\nmyenv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:447: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000203F0D10820>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"stale element reference\",\"message\":\"stale element reference: stale elemen...ff7870164d8+10728]\\\\n\\\\tBaseThreadInitThunk [0x0x7ffe499c7374+20]\\\\n\\\\tRtlUserThreadStart [0x0x7ffe4a2fcc91+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: stale element not found in the current frame\nE         (Session info: chrome=137.0.7151.69); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#stale-element-reference-exception\nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x7ff787026f65+78965]\nE       \tGetHandleVerifier [0x0x7ff787026fc0+79056]\nE       \t(No symbol) [0x0x7ff786db9dda]\nE       \t(No symbol) [0x0x7ff786dc17c1]\nE       \t(No symbol) [0x0x7ff786dc482c]\nE       \t(No symbol) [0x0x7ff786dc48ff]\nE       \t(No symbol) [0x0x7ff786e181cb]\nE       \t(No symbol) [0x0x7ff786e15c82]\nE       \t(No symbol) [0x0x7ff786e12cd1]\nE       \t(No symbol) [0x0x7ff786e11c44]\nE       \t(No symbol) [0x0x7ff786e032a4]\nE       \t(No symbol) [0x0x7ff786e3866a]\nE       \t(No symbol) [0x0x7ff786e02b56]\nE       \t(No symbol) [0x0x7ff786e38880]\nE       \t(No symbol) [0x0x7ff786e60dbe]\nE       \t(No symbol) [0x0x7ff786e38443]\nE       \t(No symbol) [0x0x7ff786e01311]\nE       \t(No symbol) [0x0x7ff786e020a3]\nE       \tGetHandleVerifier [0x0x7ff7872de26d+2926461]\nE       \tGetHandleVerifier [0x0x7ff7872d8993+2903715]\nE       \tGetHandleVerifier [0x0x7ff7872f6aed+3026941]\nE       \tGetHandleVerifier [0x0x7ff7870416fe+187406]\nE       \tGetHandleVerifier [0x0x7ff7870496ef+220159]\nE       \tGetHandleVerifier [0x0x7ff78702faf4+114692]\nE       \tGetHandleVerifier [0x0x7ff78702fca9+115129]\nE       \tGetHandleVerifier [0x0x7ff7870164d8+10728]\nE       \tBaseThreadInitThunk [0x0x7ffe499c7374+20]\nE       \tRtlUserThreadStart [0x0x7ffe4a2fcc91+33]\n\nmyenv\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: StaleElementReferenceException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_items.test_setting.TestSettingPage object at 0x00000203F0E30B50>\nlogin_to_setting = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"d52f64d544c4484d3db73dbece3a47cb\")>\n\n    @allure.story(\"设置表格布局-制造订单交货期查询-日期范围\")\n    # @pytest.mark.run(order=1)\n    def test_setting_select_dateinput(self, login_to_setting):\n        driver = login_to_setting  # WebDriver 实例\n        setting = SettingPage(driver)  # 用 driver 初始化 SettingPage\n        setting.click_button('(//span[text()=\"计划业务数据\"])[1]')\n        setting.click_button('(//span[text()=\"制造订单\"])[1]')\n        layout = \"测试布局A\"\n        code = \"交货期\"\n        sleep(1)\n        setting.click_button(f'//div[@class=\"tabsDivItemCon\"]/div[text()=\" {layout} \"]')\n        sleep(1)\n        setting.click_setting_button()\n        # 点击快速查询按钮\n        setting.click_button('(//div[text()=\" 快速查询 \"])[2]')\n        # 点击特定代码的行以选择\n        setting.click_button(\n            f'//tr[./td[3][.//span[text()=\"{code}\"]]]/td[4]//input[@placeholder=\"请选择\"]'\n        )\n        # 打开下拉框\n        setting.click_button('//div[text()=\"日期范围\"]')\n        setting.click_button('(//div[@class=\"demo-drawer-footer\"])[5]/button[2]')\n        time1 = setting.get_find_element_xpath(\n            '//div[@class=\"single-page\"]//table[@class=\"vxe-table--body\" and .//tr[@class=\"vxe-body--row\"]]//tr[2]/td[9]'\n        ).text\n        sleep(1)\n>       setting.click_button('//p[text()=\"交货期\"]/following-sibling::div[1]')\n\nTests\\test_items\\test_setting.py:1342: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nPages\\itemsPage\\setting_page.py:22: in click_button\n    self.click(By.XPATH, xpath)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Pages.itemsPage.setting_page.SettingPage object at 0x00000203F1374D00>, by_or_element = 'xpath', value = '//p[text()=\"交货期\"]/following-sibling::div[1]', wait_time = 10\n\n    def click(self, by_or_element, value=None, wait_time=10):\n        if value is not None:\n            by = by_or_element\n            logging.info(f\"点击元素：By = {by}, Value = {value}\")\n            try:\n                element = WebDriverWait(self.driver, wait_time).until(\n                    EC.element_to_be_clickable((by, value))\n                )\n            except TimeoutException:\n                logging.warning(f\"❌ 点击超时：元素 {by} = {value} 未在 {wait_time} 秒内变为可点击\")\n                raise TimeoutException(f\"点击失败，找不到元素：{by} = {value}\")\n        else:\n            logging.info(\"点击元素：WebElement 对象\")\n            element = by_or_element\n    \n        try:\n            element.click()\n        except ElementClickInterceptedException:\n            logging.warning(\"⚠️ 原生点击被拦截，尝试使用 JS 点击\")\n            self.driver.execute_script(\"arguments[0].click();\", element)\n        except Exception as e:\n            logging.warning(f\"点击失败：{e}\")\n>           raise Exception(f\"点击失败：{e}\")\nE           Exception: 点击失败：Message: stale element reference: stale element not found in the current frame\nE             (Session info: chrome=137.0.7151.69); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#stale-element-reference-exception\nE           Stacktrace:\nE           \tGetHandleVerifier [0x0x7ff787026f65+78965]\nE           \tGetHandleVerifier [0x0x7ff787026fc0+79056]\nE           \t(No symbol) [0x0x7ff786db9dda]\nE           \t(No symbol) [0x0x7ff786dc17c1]\nE           \t(No symbol) [0x0x7ff786dc482c]\nE           \t(No symbol) [0x0x7ff786dc48ff]\nE           \t(No symbol) [0x0x7ff786e181cb]\nE           \t(No symbol) [0x0x7ff786e15c82]\nE           \t(No symbol) [0x0x7ff786e12cd1]\nE           \t(No symbol) [0x0x7ff786e11c44]\nE           \t(No symbol) [0x0x7ff786e032a4]\nE           \t(No symbol) [0x0x7ff786e3866a]\nE           \t(No symbol) [0x0x7ff786e02b56]\nE           \t(No symbol) [0x0x7ff786e38880]\nE           \t(No symbol) [0x0x7ff786e60dbe]\nE           \t(No symbol) [0x0x7ff786e38443]\nE           \t(No symbol) [0x0x7ff786e01311]\nE           \t(No symbol) [0x0x7ff786e020a3]\nE           \tGetHandleVerifier [0x0x7ff7872de26d+2926461]\nE           \tGetHandleVerifier [0x0x7ff7872d8993+2903715]\nE           \tGetHandleVerifier [0x0x7ff7872f6aed+3026941]\nE           \tGetHandleVerifier [0x0x7ff7870416fe+187406]\nE           \tGetHandleVerifier [0x0x7ff7870496ef+220159]\nE           \tGetHandleVerifier [0x0x7ff78702faf4+114692]\nE           \tGetHandleVerifier [0x0x7ff78702fca9+115129]\nE           \tGetHandleVerifier [0x0x7ff7870164d8+10728]\nE           \tBaseThreadInitThunk [0x0x7ffe499c7374+20]\nE           \tRtlUserThreadStart [0x0x7ffe4a2fcc91+33]\n\nPages\\base_page.py:62: Exception","steps":[],"attachments":[{"uid":"dfda0ab71f3b5950","name":"test_setting_select_dateinput_failure","source":"dfda0ab71f3b5950.png","type":"image/png","size":138319},{"uid":"5e2deaaeca168fd6","name":"test_setting_select_dateinput_source","source":"5e2deaaeca168fd6.html","type":"text/html","size":1444220},{"uid":"2564dfe9b0c672bf","name":"log","source":"2564dfe9b0c672bf.txt","type":"text/plain","size":3454}],"parameters":[],"shouldDisplayMessage":true,"attachmentsCount":3,"attachmentStep":false,"hasContent":true,"stepsCount":0},"afterStages":[{"name":"login_to_setting::0","time":{"start":1753971253745,"stop":1753971255903,"duration":2158},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"attachmentStep":false,"hasContent":false,"stepsCount":0}],"labels":[{"name":"story","value":"设置表格布局-制造订单交货期查询-日期范围"},{"name":"feature","value":"标准应用设置测试用例"},{"name":"parentSuite","value":"Tests.test_items"},{"name":"suite","value":"test_setting"},{"name":"subSuite","value":"TestSettingPage"},{"name":"host","value":"WIN-20240820MJV"},{"name":"thread","value":"62740-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"Tests.test_items.test_setting"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":[]},"source":"f615638fcba1edbb.json","parameterValues":[]}