{"uid":"7ee8ee25eab5a8a3","name":"test_spec_editcodesuccess2","fullName":"Tests.test_items.test_spec1.TestSpecPage#test_spec_editcodesuccess2","historyId":"d2ad2e0e0f2cb9916d54f08b7d884a5a","time":{"start":1755777589694,"stop":1755777603547,"duration":13853},"status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n\tGetHandleVerifier [0x0x7ff696576f65+78965]\n\tGetHandleVerifier [0x0x7ff696576fc0+79056]\n\t(No symbol) [0x0x7ff696309dda]\n\t(No symbol) [0x0x7ff6963602ea]\n\t(No symbol) [0x0x7ff69636059c]\n\t(No symbol) [0x0x7ff6963b3f37]\n\t(No symbol) [0x0x7ff6963886af]\n\t(No symbol) [0x0x7ff6963b0dbe]\n\t(No symbol) [0x0x7ff696388443]\n\t(No symbol) [0x0x7ff696351311]\n\t(No symbol) [0x0x7ff6963520a3]\n\tGetHandleVerifier [0x0x7ff69682e26d+2926461]\n\tGetHandleVerifier [0x0x7ff696828993+2903715]\n\tGetHandleVerifier [0x0x7ff696846aed+3026941]\n\tGetHandleVerifier [0x0x7ff6965916fe+187406]\n\tGetHandleVerifier [0x0x7ff6965996ef+220159]\n\tGetHandleVerifier [0x0x7ff69657faf4+114692]\n\tGetHandleVerifier [0x0x7ff69657fca9+115129]\n\tGetHandleVerifier [0x0x7ff6965664d8+10728]\n\tBaseThreadInitThunk [0x0x7ffd35147374+20]\n\tRtlUserThreadStart [0x0x7ffd35bdcc91+33]","statusTrace":"self = <test_items.test_spec1.TestSpecPage object at 0x00000247000EAF20>, login_to_spec1 = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"67e217d672da2cf5faea7d754279f678\")>\n\n    @allure.story(\"把修改后的代码改回来\")\n    # @pytest.mark.run(order=1)\n    def test_spec_editcodesuccess2(self, login_to_spec1):\n        driver = login_to_spec1  # WebDriver 实例\n        spec = Spec1Page(driver)  # 用 driver 初始化 Spec1Page\n    \n        # 选中1测试A代码\n        spec.click_button('//tr[./td[2][.//span[contains(text(),\"1测试A\")]]]/td[2]')\n        # 点击修改按钮\n        spec.click_edi_button()\n        # 代码输入\n        spec.enter_texts('(//label[text()=\"代码\"])[1]/parent::div//input', \"1测试A\")\n        # 点击确定\n        spec.click_button('(//button[@type=\"button\"]/span[text()=\"确定\"])[4]')\n        sleep(1)\n        # 定位表格内容\n>       specdata = spec.get_find_element_xpath(\n            '//tr[./td[2][.//span[text()=\"1测试A\"]]]/td[2]'\n        ).text\n\nTests\\test_items\\test_spec1.py:283: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nPages\\itemsPage\\spec1_page.py:46: in get_find_element_xpath\n    return self.find_element(By.XPATH, xpath)\nPages\\base_page.py:28: in find_element\n    return WebDriverWait(self.driver, wait_time).until(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"67e217d672da2cf5faea7d754279f678\")>\nmethod = <function presence_of_element_located.<locals>._predicate at 0x00000247004C2710>, message = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        -----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x7ff696576f65+78965]\nE       \tGetHandleVerifier [0x0x7ff696576fc0+79056]\nE       \t(No symbol) [0x0x7ff696309dda]\nE       \t(No symbol) [0x0x7ff6963602ea]\nE       \t(No symbol) [0x0x7ff69636059c]\nE       \t(No symbol) [0x0x7ff6963b3f37]\nE       \t(No symbol) [0x0x7ff6963886af]\nE       \t(No symbol) [0x0x7ff6963b0dbe]\nE       \t(No symbol) [0x0x7ff696388443]\nE       \t(No symbol) [0x0x7ff696351311]\nE       \t(No symbol) [0x0x7ff6963520a3]\nE       \tGetHandleVerifier [0x0x7ff69682e26d+2926461]\nE       \tGetHandleVerifier [0x0x7ff696828993+2903715]\nE       \tGetHandleVerifier [0x0x7ff696846aed+3026941]\nE       \tGetHandleVerifier [0x0x7ff6965916fe+187406]\nE       \tGetHandleVerifier [0x0x7ff6965996ef+220159]\nE       \tGetHandleVerifier [0x0x7ff69657faf4+114692]\nE       \tGetHandleVerifier [0x0x7ff69657fca9+115129]\nE       \tGetHandleVerifier [0x0x7ff6965664d8+10728]\nE       \tBaseThreadInitThunk [0x0x7ffd35147374+20]\nE       \tRtlUserThreadStart [0x0x7ffd35bdcc91+33]\n\nmyenv\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:138: TimeoutException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"login_to_spec1","time":{"start":1755777581576,"stop":1755777589693,"duration":8117},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false,"attachmentsCount":0}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n\tGetHandleVerifier [0x0x7ff696576f65+78965]\n\tGetHandleVerifier [0x0x7ff696576fc0+79056]\n\t(No symbol) [0x0x7ff696309dda]\n\t(No symbol) [0x0x7ff6963602ea]\n\t(No symbol) [0x0x7ff69636059c]\n\t(No symbol) [0x0x7ff6963b3f37]\n\t(No symbol) [0x0x7ff6963886af]\n\t(No symbol) [0x0x7ff6963b0dbe]\n\t(No symbol) [0x0x7ff696388443]\n\t(No symbol) [0x0x7ff696351311]\n\t(No symbol) [0x0x7ff6963520a3]\n\tGetHandleVerifier [0x0x7ff69682e26d+2926461]\n\tGetHandleVerifier [0x0x7ff696828993+2903715]\n\tGetHandleVerifier [0x0x7ff696846aed+3026941]\n\tGetHandleVerifier [0x0x7ff6965916fe+187406]\n\tGetHandleVerifier [0x0x7ff6965996ef+220159]\n\tGetHandleVerifier [0x0x7ff69657faf4+114692]\n\tGetHandleVerifier [0x0x7ff69657fca9+115129]\n\tGetHandleVerifier [0x0x7ff6965664d8+10728]\n\tBaseThreadInitThunk [0x0x7ffd35147374+20]\n\tRtlUserThreadStart [0x0x7ffd35bdcc91+33]","statusTrace":"self = <test_items.test_spec1.TestSpecPage object at 0x00000247000EAF20>, login_to_spec1 = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"67e217d672da2cf5faea7d754279f678\")>\n\n    @allure.story(\"把修改后的代码改回来\")\n    # @pytest.mark.run(order=1)\n    def test_spec_editcodesuccess2(self, login_to_spec1):\n        driver = login_to_spec1  # WebDriver 实例\n        spec = Spec1Page(driver)  # 用 driver 初始化 Spec1Page\n    \n        # 选中1测试A代码\n        spec.click_button('//tr[./td[2][.//span[contains(text(),\"1测试A\")]]]/td[2]')\n        # 点击修改按钮\n        spec.click_edi_button()\n        # 代码输入\n        spec.enter_texts('(//label[text()=\"代码\"])[1]/parent::div//input', \"1测试A\")\n        # 点击确定\n        spec.click_button('(//button[@type=\"button\"]/span[text()=\"确定\"])[4]')\n        sleep(1)\n        # 定位表格内容\n>       specdata = spec.get_find_element_xpath(\n            '//tr[./td[2][.//span[text()=\"1测试A\"]]]/td[2]'\n        ).text\n\nTests\\test_items\\test_spec1.py:283: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nPages\\itemsPage\\spec1_page.py:46: in get_find_element_xpath\n    return self.find_element(By.XPATH, xpath)\nPages\\base_page.py:28: in find_element\n    return WebDriverWait(self.driver, wait_time).until(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"67e217d672da2cf5faea7d754279f678\")>\nmethod = <function presence_of_element_located.<locals>._predicate at 0x00000247004C2710>, message = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        -----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x7ff696576f65+78965]\nE       \tGetHandleVerifier [0x0x7ff696576fc0+79056]\nE       \t(No symbol) [0x0x7ff696309dda]\nE       \t(No symbol) [0x0x7ff6963602ea]\nE       \t(No symbol) [0x0x7ff69636059c]\nE       \t(No symbol) [0x0x7ff6963b3f37]\nE       \t(No symbol) [0x0x7ff6963886af]\nE       \t(No symbol) [0x0x7ff6963b0dbe]\nE       \t(No symbol) [0x0x7ff696388443]\nE       \t(No symbol) [0x0x7ff696351311]\nE       \t(No symbol) [0x0x7ff6963520a3]\nE       \tGetHandleVerifier [0x0x7ff69682e26d+2926461]\nE       \tGetHandleVerifier [0x0x7ff696828993+2903715]\nE       \tGetHandleVerifier [0x0x7ff696846aed+3026941]\nE       \tGetHandleVerifier [0x0x7ff6965916fe+187406]\nE       \tGetHandleVerifier [0x0x7ff6965996ef+220159]\nE       \tGetHandleVerifier [0x0x7ff69657faf4+114692]\nE       \tGetHandleVerifier [0x0x7ff69657fca9+115129]\nE       \tGetHandleVerifier [0x0x7ff6965664d8+10728]\nE       \tBaseThreadInitThunk [0x0x7ffd35147374+20]\nE       \tRtlUserThreadStart [0x0x7ffd35bdcc91+33]\n\nmyenv\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:138: TimeoutException","steps":[],"attachments":[{"uid":"55ecb414acb97342","name":"test_spec_editcodesuccess2_failure","source":"55ecb414acb97342.png","type":"image/png","size":110953},{"uid":"c207775e20251fdb","name":"test_spec_editcodesuccess2_source","source":"c207775e20251fdb.html","type":"text/html","size":1294119},{"uid":"46337c420ee44153","name":"log","source":"46337c420ee44153.txt","type":"text/plain","size":1380}],"parameters":[],"stepsCount":0,"hasContent":true,"attachmentStep":false,"shouldDisplayMessage":true,"attachmentsCount":3},"afterStages":[{"name":"login_to_spec1::0","time":{"start":1755777603712,"stop":1755777605880,"duration":2168},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false,"attachmentsCount":0}],"labels":[{"name":"feature","value":"生产特征表测试用例"},{"name":"story","value":"把修改后的代码改回来"},{"name":"parentSuite","value":"Tests.test_items"},{"name":"suite","value":"test_spec1"},{"name":"subSuite","value":"TestSpecPage"},{"name":"host","value":"WIN-20240820MJV"},{"name":"thread","value":"21852-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"Tests.test_items.test_spec1"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[]}],"tags":[]},"source":"7ee8ee25eab5a8a3.json","parameterValues":[]}