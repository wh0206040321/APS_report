{"uid":"6f273585e7e4ae05","name":"test_item_textverify","fullName":"Tests.test_items.test_item.TestItemPage#test_item_textverify","historyId":"3f7319bdae5379eecf31d9ed7f5b2eeb","time":{"start":1761223552250,"stop":1761223568782,"duration":16532},"status":"failed","statusMessage":"AssertionError: 预期数据是111，实际得到111111111111111133331122221111222221111111113333111111144444111111111111111111111111111111111111111111111111\nassert ('111111111111...1111111111111' == '111111111111...1111111111111'\n  \n  \u001B[0m\u001B[90m \u001B[39;49;00m 111111111111111133331122221111222221111111113333111111144444111111111111111111111111111111111111111111111111\u001B[90m\u001B[39;49;00m and '9999999999' == '99999999999'\n  \n  \u001B[0m\u001B[91m- 99999999999\u001B[39;49;00m\u001B[90m\u001B[39;49;00m\n  ?           -\u001B[90m\u001B[39;49;00m\n  \u001B[92m+ 9999999999\u001B[39;49;00m\u001B[90m\u001B[39;49;00m)","statusTrace":"self = <test_items.test_item.TestItemPage object at 0x000001FC18F095D0>, login_to_item = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"8daba098054cdd8a5c338e2ae4023e10\")>\n\n    @allure.story(\"校验数字文本框和文本框成功\")\n    # @pytest.mark.run(order=1)\n    def test_item_textverify(self, login_to_item):\n        driver = login_to_item  # WebDriver 实例\n        item = ItemPage(driver)  # 用 driver 初始化 ItemPage\n    \n        name = \"111111111111111133331122221111222221111111113333111111144444111111111111111111111111111111111111111111111111\"\n        item.add_test_item(name)\n        item.enter_texts('(//label[text()=\"物料优先度\"])[1]/parent::div//input', name)\n        # 点击确定\n        item.click_button(\n            '//div[@class=\"h-40px flex-justify-end flex-align-items-end b-t-s-d9e3f3\"]//span[text()=\"确定\"]')\n        sleep(1)\n        adddata = item.get_find_element_xpath(\n            f'//tr[./td[2][.//span[text()=\"{name}\"]]]/td[2]'\n        ).text\n        num_ = item.get_find_element_xpath(\n            f'//tr[./td[2][.//span[text()=\"{name}\"]]]/td[6]'\n        ).text\n>       assert adddata == name and num_ == \"99999999999\", f\"预期数据是111，实际得到{adddata}\"\nE       AssertionError: 预期数据是111，实际得到111111111111111133331122221111222221111111113333111111144444111111111111111111111111111111111111111111111111\nE       assert ('111111111111...1111111111111' == '111111111111...1111111111111'\nE         \nE         \u001B[0m\u001B[90m \u001B[39;49;00m 111111111111111133331122221111222221111111113333111111144444111111111111111111111111111111111111111111111111\u001B[90m\u001B[39;49;00m and '9999999999' == '99999999999'\nE         \nE         \u001B[0m\u001B[91m- 99999999999\u001B[39;49;00m\u001B[90m\u001B[39;49;00m\nE         ?           -\u001B[90m\u001B[39;49;00m\nE         \u001B[92m+ 9999999999\u001B[39;49;00m\u001B[90m\u001B[39;49;00m)\n\nTests\\test_items\\test_item.py:229: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":1,"retriesStatusChange":false,"beforeStages":[{"name":"login_to_item","time":{"start":1761223540589,"stop":1761223552250,"duration":11661},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentStep":false,"hasContent":false,"attachmentsCount":0,"shouldDisplayMessage":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: 预期数据是111，实际得到111111111111111133331122221111222221111111113333111111144444111111111111111111111111111111111111111111111111\nassert ('111111111111...1111111111111' == '111111111111...1111111111111'\n  \n  \u001B[0m\u001B[90m \u001B[39;49;00m 111111111111111133331122221111222221111111113333111111144444111111111111111111111111111111111111111111111111\u001B[90m\u001B[39;49;00m and '9999999999' == '99999999999'\n  \n  \u001B[0m\u001B[91m- 99999999999\u001B[39;49;00m\u001B[90m\u001B[39;49;00m\n  ?           -\u001B[90m\u001B[39;49;00m\n  \u001B[92m+ 9999999999\u001B[39;49;00m\u001B[90m\u001B[39;49;00m)","statusTrace":"self = <test_items.test_item.TestItemPage object at 0x000001FC18F095D0>, login_to_item = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"8daba098054cdd8a5c338e2ae4023e10\")>\n\n    @allure.story(\"校验数字文本框和文本框成功\")\n    # @pytest.mark.run(order=1)\n    def test_item_textverify(self, login_to_item):\n        driver = login_to_item  # WebDriver 实例\n        item = ItemPage(driver)  # 用 driver 初始化 ItemPage\n    \n        name = \"111111111111111133331122221111222221111111113333111111144444111111111111111111111111111111111111111111111111\"\n        item.add_test_item(name)\n        item.enter_texts('(//label[text()=\"物料优先度\"])[1]/parent::div//input', name)\n        # 点击确定\n        item.click_button(\n            '//div[@class=\"h-40px flex-justify-end flex-align-items-end b-t-s-d9e3f3\"]//span[text()=\"确定\"]')\n        sleep(1)\n        adddata = item.get_find_element_xpath(\n            f'//tr[./td[2][.//span[text()=\"{name}\"]]]/td[2]'\n        ).text\n        num_ = item.get_find_element_xpath(\n            f'//tr[./td[2][.//span[text()=\"{name}\"]]]/td[6]'\n        ).text\n>       assert adddata == name and num_ == \"99999999999\", f\"预期数据是111，实际得到{adddata}\"\nE       AssertionError: 预期数据是111，实际得到111111111111111133331122221111222221111111113333111111144444111111111111111111111111111111111111111111111111\nE       assert ('111111111111...1111111111111' == '111111111111...1111111111111'\nE         \nE         \u001B[0m\u001B[90m \u001B[39;49;00m 111111111111111133331122221111222221111111113333111111144444111111111111111111111111111111111111111111111111\u001B[90m\u001B[39;49;00m and '9999999999' == '99999999999'\nE         \nE         \u001B[0m\u001B[91m- 99999999999\u001B[39;49;00m\u001B[90m\u001B[39;49;00m\nE         ?           -\u001B[90m\u001B[39;49;00m\nE         \u001B[92m+ 9999999999\u001B[39;49;00m\u001B[90m\u001B[39;49;00m)\n\nTests\\test_items\\test_item.py:229: AssertionError","steps":[],"attachments":[{"uid":"2c129a987ce877e4","name":"test_item_textverify_failure","source":"2c129a987ce877e4.png","type":"image/png","size":122931},{"uid":"996fbc9b1e5ec38d","name":"test_item_textverify_source","source":"996fbc9b1e5ec38d.html","type":"text/html","size":1522462},{"uid":"2c2d7c8b421175ef","name":"log","source":"2c2d7c8b421175ef.txt","type":"text/plain","size":2921}],"parameters":[],"stepsCount":0,"attachmentStep":false,"hasContent":true,"attachmentsCount":3,"shouldDisplayMessage":true},"afterStages":[{"name":"login_to_item::0","time":{"start":1761223569081,"stop":1761223571250,"duration":2169},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentStep":false,"hasContent":false,"attachmentsCount":0,"shouldDisplayMessage":false}],"labels":[{"name":"story","value":"校验数字文本框和文本框成功"},{"name":"feature","value":"物料表测试用例"},{"name":"parentSuite","value":"Tests.test_items"},{"name":"suite","value":"test_item"},{"name":"subSuite","value":"TestItemPage"},{"name":"host","value":"WIN-20240820MJV"},{"name":"thread","value":"21764-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"Tests.test_items.test_item"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"73f05d5cbafb3679","status":"failed","statusDetails":"AssertionError: 预期数据是111，实际得到111111111111111133331122221111222221111111113333111111144444111111111111111111111111111111111111111111111111\nassert ('111111111111...1111111111111' == '111111111111...1111111111111'\n  \n  \u001B[0m\u001B[90m \u001B[39;49;00m 111111111111111133331122221111222221111111113333111111144444111111111111111111111111111111111111111111111111\u001B[90m\u001B[39;49;00m and '9999999999' == '99999999999'\n  \n  \u001B[0m\u001B[91m- 99999999999\u001B[39;49;00m\u001B[90m\u001B[39;49;00m\n  ?           -\u001B[90m\u001B[39;49;00m\n  \u001B[92m+ 9999999999\u001B[39;49;00m\u001B[90m\u001B[39;49;00m)","time":{"start":1761223520950,"stop":1761223538148,"duration":17198}}],"categories":[{"name":"Product defects","matchedStatuses":[]}],"tags":[]},"source":"6f273585e7e4ae05.json","parameterValues":[]}